import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-03T13:09:20.652-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 11 tests
 * <br>
*  Covered targets: 33
 * <br>
*  Used time: 0h 15m 1s
 * <br>
*  Needed budget for current results: 33%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.graphqlscs.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_queryOnDateParseReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { dateParse  (dayname : \\\"\\N\\\",monthname : \\\"jun\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_1_queryOnRegexReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { regex  (txt : \\\"GQhZp_ZRMA\\Vl\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_2_queryOnFileSuffixReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { fileSuffix  (directory : \\\"i\\Mf;:3CYFeTbtUj\\\",file : \\\"_EM_2262_XYZ_\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_3_queryOnCookieReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { cookie  (name : null,val : \\\"_EM_2445_XYZ_\\\",site : \\\"\\p\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_4_queryOnCostfunsReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { costfuns  (i : -1073741625,s : \\\"rUDU5539AJXY\\VUF\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_5_queryOnCalcReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { calc  (op : \\\"E0Uu0ue6\\Mou\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_6_queryOnTitleReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { title  (sex : \\\"Qs3AW\\i\\\",title : \\\"m0jbMS\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_7_queryOnPatReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { pat  (txt : \\\"Zv\\\\\",pat : \\\"Ory\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_8_queryOnNotyPevarReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { notyPevar  (s : \\\"32Mp\\eTxo0lmru\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_9_queryOnOrdered4ReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { ordered4  (w : \\\"nt{1\\s\\\",x : \\\"_EM_7222_XYZ\\\",z : \\\"Rei\\\",y : \\\"y0ODpNskEiz\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_10_queryOnText2TxtReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { text2Txt  (word1 : \\\"Xgbl\\o\\\",word2 : \\\"W0HLAp\\\",word3 : \\\"_EM_34240_XYZ_\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
