import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-03T13:09:20.628-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 50 tests
 * <br>
*  Covered targets: 686
 * <br>
*  Used time: 0h 15m 1s
 * <br>
*  Needed budget for current results: 33%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.graphqlscs.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_queryOnOrdered4ReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { ordered4  (w : \\\"uD\\\",x : \\\"_EM_5737_XYZ_\\\",z : \\\"_EM_5648_XYZ_\\\",y : \\\"y0ODpNskEiz\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'ordered4'", containsString("unordered"));
    }
    
    
    @Test(timeout = 60000)
    public void test_1_queryOnOrdered4ReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { ordered4  (w : \\\"_EM_30456_XYZ_\\\",x : \\\"2KWdK1qOFGxLH\\\",z : \\\"_EM_2447_XYZ_\\\",y : \\\"f\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'ordered4'", containsString("unordered"));
    }
    
    
    @Test(timeout = 60000)
    public void test_2_queryOnPatReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { pat  (txt : \\\"_EM_2442_XYZ_\\\",pat : \\\"M\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'pat'", containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_3_queryOnOrdered4ReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { ordered4  (w : \\\"ntk1Lc\\\",x : \\\"eM8q\\\",z : \\\"VJqnIfUclX7Ne0ZY\\\",y : \\\"_EM_7436_XYZ_\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'ordered4'", containsString("unordered"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4_queryOnCalcReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { calc  (op : \\\"e\\\",arg1 : 0.26850826)         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'calc'", containsString("2.718281828459045"));
    }
    
    
    @Test(timeout = 60000)
    public void test_5_queryOnOrdered4ReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { ordered4  (w : \\\"nlk1Lc\\\",x : \\\"_EM_7222_XYZ_\\\",z : \\\"_EM_5648_XYZ_\\\",y : \\\"y0ODpNskEiz\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'ordered4'", containsString("unordered"));
    }
    
    
    @Test(timeout = 60000)
    public void test_6_queryOnFileSuffixReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { fileSuffix  (directory : \\\"la9\\\",file : \\\"\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'fileSuffix'", containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_7_queryOnOrdered4ReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { ordered4  (w : \\\"rtU5Lc\\\",x : \\\"i_S7Q\\\",z : \\\"`4qXG\\\",y : \\\"i_S7\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'ordered4'", containsString("unordered"));
    }
    
    
    @Test(timeout = 60000)
    public void test_8_queryOnNotyPevarReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { notyPevar  (s : \\\"mHTrPRs0Fwn0\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'notyPevar'", containsString("2"));
    }
    
    
    @Test(timeout = 60000)
    public void test_9_queryOnNotyPevarReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { notyPevar  (i : 28,s : \\\"ddHxwhDh_tlA_V8\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'notyPevar'", containsString("3"));
    }
    
    
    @Test(timeout = 60000)
    public void test_10_queryOnNotyPevarReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { notyPevar  (i : 7,s : \\\"_EM_72268_XYZ_\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'notyPevar'", containsString("3"));
    }
    
    
    @Test(timeout = 60000)
    public void test_11_queryOnOrdered4ReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { ordered4  (w : \\\"nlk1Lc\\\",x : \\\"x__7If\\\",z : \\\"_EM_9579_XYZ_\\\",y : \\\"y0ODpNskEiz\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'ordered4'", containsString("unordered"));
    }
    
    
    @Test(timeout = 60000)
    public void test_12_queryOnOrdered4ReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { ordered4  (w : \\\"nPk-Uc\\\",x : \\\"x__7If\\\",z : \\\"HUn\\\",y : \\\"x__7If\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'ordered4'", containsString("unordered"));
    }
    
    
    @Test(timeout = 60000)
    public void test_13_queryOnOrdered4ReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { ordered4  (w : \\\"nlk-Lc\\\",x : \\\"x__7If\\\",z : \\\"_EM_9579_XYZ_\\\",y : \\\"x__7If\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'ordered4'", containsString("unordered"));
    }
    
    
    @Test(timeout = 60000)
    public void test_14_queryOnTitleReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { title  (sex : \\\"Qs3AWdi0\\\",title : \\\"HMFBKKAjLhfpWNtt\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'title'", containsString("-1"));
    }
    
    
    @Test(timeout = 60000)
    public void test_15_queryOnCalcReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { calc  (op : \\\"cosine\\\",arg1 : null)         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'calc'", containsString("1.0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_16_queryOnCookieReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { cookie  (name : \\\"NzPHKpmKj\\\",val : \\\"_EM_82988_XYZ_\\\",site : \\\"vOfd4CGiQuE\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'cookie'", containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_17_queryOnOrdered4ReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { ordered4  (w : \\\"nlk-Lc\\\",x : \\\"x__7If\\\",z : \\\"v4qXGp\\\",y : \\\"x__7If\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'ordered4'", containsString("unordered"));
    }
    
    
    @Test(timeout = 60000)
    public void test_18_queryOnOrdered4ReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { ordered4  (w : \\\"UNQULc\\\",x : \\\"iUU7Qv\\\",z : \\\"v4qXG4\\\",y : \\\"k__cGO\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'ordered4'", containsString("increasing"));
    }
    
    
    @Test(timeout = 60000)
    public void test_19_queryOnTitleReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { title  (sex : \\\"male\\\",title : \\\"_EM_25636_XYZ_\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'title'", containsString("-1"));
    }
    
    
    @Test(timeout = 60000)
    public void test_20_queryOnTitleReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { title  (sex : \\\"none\\\",title : \\\"none\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'title'", containsString("-1"));
    }
    
    
    @Test(timeout = 60000)
    public void test_21_queryOnOrdered4ReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { ordered4  (w : \\\"rtU5Lc\\\",x : \\\"i_S7Qf\\\",z : \\\"h4qXG\\\",y : \\\"h__7Af\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'ordered4'", containsString("decreasing"));
    }
    
    
    @Test(timeout = 60000)
    public void test_22_queryOnFileSuffixReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { fileSuffix  (directory : \\\"word\\\",file : \\\"JFj0y\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'fileSuffix'", containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_23_queryOnFileSuffixReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { fileSuffix  (directory : \\\"text\\\",file : \\\"_EM_4415_XYZ_\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'fileSuffix'", containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_24_queryOnOrdered4ReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { ordered4  (w : \\\"rtU5Lc\\\",x : \\\"h_U7Qf\\\",z : \\\"v4qXG\\\",y : \\\"h__7If\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'ordered4'", containsString("unordered"));
    }
    
    
    @Test(timeout = 60000)
    public void test_25_queryOnOrdered4ReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { ordered4  (w : \\\"rtU5Lc\\\",x : \\\"i_S7Qf\\\",z : \\\"x4qXG\\\",y : \\\"h__7If\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'ordered4'", containsString("unordered"));
    }
    
    
    @Test(timeout = 60000)
    public void test_26_queryOnTitleReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { title  (sex : \\\"female\\\",title : \\\"_EM_25636_XYZ_\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'title'", containsString("-1"));
    }
    
    
    @Test(timeout = 60000)
    public void test_27_queryOnCalcReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { calc  (op : \\\"multiply\\\",arg1 : 0.32117182,arg2 : 0.2939409)         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'calc'", containsString("0.094405533825438"));
    }
    
    
    @Test(timeout = 60000)
    public void test_28_queryOnCostfunsReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { costfuns  (i : -4,s : \\\"_EM_8886_XYZ_\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'costfuns'", containsString("10"));
    }
    
    
    @Test(timeout = 60000)
    public void test_29_queryOnCalcReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { calc  (op : \\\"qfTCOcBbI0RqQo\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'calc'", containsString("0.0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_30_queryOnCalcReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { calc  (op : \\\"divide\\\",arg1 : 0.11716309,arg2 : 0.6068385)         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'calc'", containsString("0.1930712866767682"));
    }
    
    
    @Test(timeout = 60000)
    public void test_31_queryOnCostfunsReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { costfuns  (i : 5,s : \\\"_EM_10563_XYZ_\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'costfuns'", containsString("10"));
    }
    
    
    @Test(timeout = 60000)
    public void test_32_queryOnCostfunsReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { costfuns  (i : -1423212120,s : \\\"5_VzGJV\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'costfuns'", containsString("10"));
    }
    
    
    @Test(timeout = 60000)
    public void test_33_queryOnPatReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { pat  (txt : \\\"_EM_2442_XYZ_\\\",pat : \\\"_EM_2443_XYZ_\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'pat'", containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_34_queryOnCostfunsReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { costfuns  (i : -1073737529,s : \\\"rWaH:;I9QftNcVxH\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'costfuns'", containsString("10"));
    }
    
    
    @Test(timeout = 60000)
    public void test_35_queryOnText2TxtReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { text2Txt  (word1 : \\\"QpElzq\\\",word2 : \\\"iHJW1G\\\",word3 : \\\"5wp1\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'text2Txt'", containsString(""));
    }
    
    
    @Test(timeout = 60000)
    public void test_36_queryOnCostfunsReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { costfuns  (i : 769,s : \\\"baab\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'costfuns'", containsString("10"));
    }
    
    
    @Test(timeout = 60000)
    public void test_37_queryOnRegexReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { regex  (txt : \\\"afs//:cj/c7c\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'regex'", containsString("url"));
    }
    
    
    @Test(timeout = 60000)
    public void test_38_queryOnRegexReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { regex  (txt : \\\"wed66mar\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'regex'", containsString("date"));
    }
    
    
    @Test(timeout = 60000)
    public void test_39_queryOnRegexReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { regex  (txt : \\\"9.444e-76\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'regex'", containsString("fpe"));
    }
    
    
    @Test(timeout = 60000)
    public void test_40_queryOnRegexReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { regex  (txt : \\\"_EM_1_XYZ_\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'regex'", containsString("none"));
    }
    
    
    @Test(timeout = 60000)
    public void test_41_queryOnDateParseReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { dateParse  (dayname : \\\"tue\\\",monthname : \\\"may\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'dateParse'", containsString("6"));
    }
    
    
    @Test(timeout = 60000)
    public void test_42_queryOnPatReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { pat  (txt : \\\"ZvDpoW\\\",pat : \\\"ZvD\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'pat'", containsString("1"));
    }
    
    
    @Test(timeout = 60000)
    public void test_43_queryOnDateParseReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { dateParse  (dayname : \\\"_EM_9294_XYZ_\\\",monthname : \\\"jun\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'dateParse'", containsString("6"));
    }
    
    
    @Test(timeout = 60000)
    public void test_44_queryOnDateParseReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { dateParse  (dayname : \\\"9G_xbU9pN8\\\",monthname : \\\"mar\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'dateParse'", containsString("3"));
    }
    
    
    @Test(timeout = 60000)
    public void test_45_queryOnDateParseReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { dateParse  (dayname : \\\"R75X9ea\\\",monthname : \\\"sep\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'dateParse'", containsString("9"));
    }
    
    
    @Test(timeout = 60000)
    public void test_46_queryOnDateParseReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { dateParse  (dayname : \\\"R65X9ea\\\",monthname : \\\"apr\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'dateParse'", containsString("4"));
    }
    
    
    @Test(timeout = 60000)
    public void test_47_queryOnDateParseReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { dateParse  (dayname : \\\"iu7Sff\\\",monthname : \\\"jan\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'dateParse'", containsString("1"));
    }
    
    
    @Test(timeout = 60000)
    public void test_48_queryOnDateParseReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { dateParse  (dayname : \\\"_EM_22374_XYZ_\\\",monthname : \\\"may\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'dateParse'", containsString("5"));
    }
    
    
    @Test(timeout = 60000)
    public void test_49_queryOnPatReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { pat  (txt : \\\"ZvDppTyz\\\",pat : \\\"ZvDp\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'pat'", containsString("1"));
    }


}
