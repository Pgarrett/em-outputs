import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-10-18T12:11:54.319-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 11 tests
 * <br>
*  Covered targets: 36
 * <br>
*  Used time: 0h 10m 5s
 * <br>
*  Needed budget for current results: 83%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.graphqlscs.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: notyPevar
    // 			Action parameters:
    // 				i: ''
    // 				s: ''
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = i:''
    // 				org.evomaster.core.search.gene.optional.OptionalGene = s:''
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: notyPevar
    @Test(timeout = 60000)
    public void test_0_qUERYOnNotyPevarReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { notyPevar           } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'locations'.size()", equalTo(0))
                .body("'data'.'notyPevar'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: calc
    // 			Action parameters:
    // 				op: ''
    // 				arg1: '0.047923315'
    // 				arg2: '0.21218961'
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = op:''
    // 				org.evomaster.core.search.gene.optional.OptionalGene = arg1:'0.047923315'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = arg2:'0.21218961'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: calc
    @Test(timeout = 60000)
    public void test_1_qUERYOnCalcReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { calc  (arg1 : 0.047923315,arg2 : 0.21218961)         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'locations'.size()", equalTo(0))
                .body("'data'.'calc'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: regex
    // 			Action parameters:
    // 				txt: 'null'
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = txt:'null'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: regex
    @Test(timeout = 60000)
    public void test_2_qUERYOnRegexReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { regex  (txt : null)         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'locations'.size()", equalTo(0))
                .body("'data'.'regex'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: costfuns
    // 			Action parameters:
    // 				i: ''
    // 				s: ''
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = i:''
    // 				org.evomaster.core.search.gene.optional.OptionalGene = s:''
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: costfuns
    @Test(timeout = 60000)
    public void test_3_qUERYOnCostfunsReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { costfuns           } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'locations'.size()", equalTo(0))
                .body("'data'.'costfuns'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: dateParse
    // 			Action parameters:
    // 				dayname: '_EM_1343_XYZ_'
    // 				monthname: ''
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = dayname:'_EM_1343_XYZ_'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = monthname:''
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: dateParse
    @Test(timeout = 60000)
    public void test_4_qUERYOnDateParseReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { dateParse  (dayname : \\\"_EM_1343_XYZ_\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'locations'.size()", equalTo(0))
                .body("'data'.'dateParse'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: pat
    // 			Action parameters:
    // 				txt: 'N18bqu'
    // 				pat: ''
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = txt:'N18bqu'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = pat:''
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: pat
    @Test(timeout = 60000)
    public void test_5_qUERYOnPatReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { pat  (txt : \\\"N18bqu\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'locations'.size()", equalTo(0))
                .body("'data'.'pat'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: title
    // 			Action parameters:
    // 				sex: 'FyF@TMzx'
    // 				title: ''
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = sex:'FyF@TMzx'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = title:''
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: title
    @Test(timeout = 60000)
    public void test_6_qUERYOnTitleReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { title  (sex : \\\"FyF@TMzx\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'locations'.size()", equalTo(0))
                .body("'data'.'title'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: fileSuffix
    // 			Action parameters:
    // 				directory: 'fH'
    // 				file: ''
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = directory:'fH'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = file:''
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: fileSuffix
    @Test(timeout = 60000)
    public void test_7_qUERYOnFileSuffixReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { fileSuffix  (directory : \\\"fH\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'locations'.size()", equalTo(0))
                .body("'data'.'fileSuffix'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: cookie
    // 			Action parameters:
    // 				name: 'Wq'
    // 				val: '3yAu4ur9hQH1Cb58'
    // 				site: ''
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = name:'Wq'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = val:'3yAu4ur9hQH1Cb58'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = site:''
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: cookie
    @Test(timeout = 60000)
    public void test_8_qUERYOnCookieReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { cookie  (name : \\\"Wq\\\",val : \\\"3yAu4ur9hQH1Cb58\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'locations'.size()", equalTo(0))
                .body("'data'.'cookie'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: text2Txt
    // 			Action parameters:
    // 				word1: 'mSxX'
    // 				word2: '6pKlsAhvt'
    // 				word3: ''
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = word1:'mSxX'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = word2:'6pKlsAhvt'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = word3:''
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: text2Txt
    @Test(timeout = 60000)
    public void test_9_qUERYOnText2TxtReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { text2Txt  (word1 : \\\"mSxX\\\",word2 : \\\"6pKlsAhvt\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'locations'.size()", equalTo(0))
                .body("'data'.'text2Txt'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: ordered4
    // 			Action parameters:
    // 				w: ''
    // 				x: 'vMOb5tAWAiW2o'
    // 				z: '_EM_585_XYZ_'
    // 				y: ''
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = w:''
    // 				org.evomaster.core.search.gene.optional.OptionalGene = x:'vMOb5tAWAiW2o'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = z:'_EM_585_XYZ_'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = y:''
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: ordered4
    @Test(timeout = 60000)
    public void test_10_qUERYOnOrdered4ReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { ordered4  (w : \\\"\\\",x : \\\"vMOb5tAWAiW2o\\\",z : \\\"_EM_585_XYZ_\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'locations'.size()", equalTo(0))
                .body("'data'.'ordered4'", nullValue());
    }


}
