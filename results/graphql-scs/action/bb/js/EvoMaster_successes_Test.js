const superagent = require("superagent");
const EM = require("./EMTestUtils.js");
jest.setTimeout(60000);




/**
*  This file was automatically generated by EvoMaster on 2024-10-06T17:56:19.754-03:00[America/Argentina/Buenos_Aires]
*  
*  The generated test suite contains 11 tests
*  
*  Covered targets: 32
*  
*  Used time: 0h 11m 29s
*  
*  Needed budget for current results: 93%
*  
*  This file contains test cases that represent successful calls.
*/

const baseUrlOfSut = "http://localhost:8080/graphql";


beforeAll( async () => {
});








// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: ordered4
// 			Action parameters:
// 				w: 'null'
// 				x: ''
// 				z: ''
// 				y: ''
// 			Genes:
// 				org.evomaster.core.search.gene.optional.OptionalGene = w:null
// 				org.evomaster.core.search.gene.optional.OptionalGene = x:
// 				org.evomaster.core.search.gene.optional.OptionalGene = z:
// 				org.evomaster.core.search.gene.optional.OptionalGene = y:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: ordered4
test("test_0_QueryOnOrdered4ReturnsError", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"  { ordered4  (w : null)         } \" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.errors.length).toBe(1);
    expect(res_0.body.errors[0].message).toBe("Internal Server Error(s) while executing query");
    expect(res_0.body.errors[0].locations.length).toBe(0);
    expect(res_0.body.data.ordered4).toBe(null);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: regex
// 			Action parameters:
// 				txt: 'R7R5mLLOXwumQEP'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.OptionalGene = txt:R7R5mLLOXwumQEP
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: regex
test("test_1_QueryOnRegexReturnsData", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"  { regex  (txt : \\\"R7R5mLLOXwumQEP\\\")         } \" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data.regex).toBe("none");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: costfuns
// 			Action parameters:
// 				i: '-1271601005'
// 				s: 'dB6c5PdCmouJV_'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.OptionalGene = i:-1271601005
// 				org.evomaster.core.search.gene.optional.OptionalGene = s:dB6c5PdCmouJV_
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: costfuns
test("test_2_QueryOnCostfunsReturnsData", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"  { costfuns  (i : -1271601005,s : \\\"dB6c5PdCmouJV_\\\")         } \" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data.costfuns).toBe("10");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: notyPevar
// 			Action parameters:
// 				i: '420'
// 				s: ''
// 			Genes:
// 				org.evomaster.core.search.gene.optional.OptionalGene = i:420
// 				org.evomaster.core.search.gene.optional.OptionalGene = s:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: notyPevar
test("test_3_QueryOnNotypevarReturnsData", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"  { notyPevar  (i : 420,s : \\\"\\\")         } \" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data.notyPevar).toBe("3");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: title
// 			Action parameters:
// 				sex: 'eqL06WDtf5pJ'
// 				title: 'igq21IFE4'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.OptionalGene = sex:eqL06WDtf5pJ
// 				org.evomaster.core.search.gene.optional.OptionalGene = title:igq21IFE4
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: title
test("test_4_QueryOnTitleReturnsData", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"  { title  (sex : \\\"eqL06WDtf5pJ\\\",title : \\\"igq21IFE4\\\")         } \" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data.title).toBe("-1");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: pat
// 			Action parameters:
// 				txt: ''
// 				pat: 'ZfUfXftC0z'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.OptionalGene = txt:
// 				org.evomaster.core.search.gene.optional.OptionalGene = pat:ZfUfXftC0z
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: pat
test("test_5_QueryOnPatReturnsData", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"  { pat  (txt : \\\"\\\",pat : \\\"ZfUfXftC0z\\\")         } \" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data.pat).toBe("0");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: calc
// 			Action parameters:
// 				op: 'i05EQT45D'
// 				arg1: 'null'
// 				arg2: ''
// 			Genes:
// 				org.evomaster.core.search.gene.optional.OptionalGene = op:i05EQT45D
// 				org.evomaster.core.search.gene.optional.OptionalGene = arg1:null
// 				org.evomaster.core.search.gene.optional.OptionalGene = arg2:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: calc
test("test_6_QueryOnCalcReturnsData", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"  { calc  (op : \\\"i05EQT45D\\\",arg1 : null)         } \" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data.calc).toBe("0.0");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: text2Txt
// 			Action parameters:
// 				word1: 'QZammtxL'
// 				word2: 'gXRNUSAXqNp2A'
// 				word3: 'f2eO1jGLTcH0T4r2'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.OptionalGene = word1:QZammtxL
// 				org.evomaster.core.search.gene.optional.OptionalGene = word2:gXRNUSAXqNp2A
// 				org.evomaster.core.search.gene.optional.OptionalGene = word3:f2eO1jGLTcH0T4r2
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: text2Txt
test("test_7_QueryOnText2txtReturnsData", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"  { text2Txt  (word1 : \\\"QZammtxL\\\",word2 : \\\"gXRNUSAXqNp2A\\\",word3 : \\\"f2eO1jGLTcH0T4r2\\\")         } \" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data.text2Txt).toBe("");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: dateParse
// 			Action parameters:
// 				dayname: 'P'
// 				monthname: 'R6'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.OptionalGene = dayname:P
// 				org.evomaster.core.search.gene.optional.OptionalGene = monthname:R6
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: dateParse
test("test_8_QueryOnDateparseReturnsData", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"  { dateParse  (dayname : \\\"P\\\",monthname : \\\"R6\\\")         } \" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data.dateParse).toBe("0");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: cookie
// 			Action parameters:
// 				name: 'M6djsOd'
// 				val: 'j6xP4'
// 				site: '_lXrB9UYk0ixe'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.OptionalGene = name:M6djsOd
// 				org.evomaster.core.search.gene.optional.OptionalGene = val:j6xP4
// 				org.evomaster.core.search.gene.optional.OptionalGene = site:_lXrB9UYk0ixe
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: cookie
test("test_9_QueryOnCookieReturnsData", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"  { cookie  (name : \\\"M6djsOd\\\",val : \\\"j6xP4\\\",site : \\\"_lXrB9UYk0ixe\\\")         } \" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data.cookie).toBe("0");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: fileSuffix
// 			Action parameters:
// 				directory: '7'
// 				file: 'D'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.OptionalGene = directory:7
// 				org.evomaster.core.search.gene.optional.OptionalGene = file:D
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: fileSuffix
test("test_10_QueryOnFilesuffixReturnsData", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"  { fileSuffix  (directory : \\\"7\\\",file : \\\"D\\\")         } \" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data.fileSuffix).toBe("0");
});
