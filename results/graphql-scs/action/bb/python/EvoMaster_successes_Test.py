#!/usr/bin/env python

import json
import unittest
import requests
import os
if os.name == 'nt':
    class timeout_decorator:
        @staticmethod
        def timeout(*args, **kwargs):
            return lambda f: f # return a no-op decorator
else:
    import timeout_decorator
from em_test_utils import *


#  This file was automatically generated by EvoMaster on 2024-10-06T17:44:48.516-03:00[America/Argentina/Buenos_Aires]
#  
#  The generated test suite contains 11 tests
#  
#  Covered targets: 32
#  
#  Used time: 0h 11m 24s
#  
#  Needed budget for current results: 78%
#  
#  This file contains test cases that represent successful calls.
class EvoMaster_successes_Test(unittest.TestCase):

    
    baseUrlOfSut = "http://localhost:8080/graphql"
    
    
    
    
    
    
    
    
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: ordered4
    # 			Action parameters:
    # 				w: ''
    # 				x: ''
    # 				z: ''
    # 				y: 'null'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = w:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = x:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = z:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = y:null
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: ordered4
    @timeout_decorator.timeout(60)
    def test_0_QUERY_on_ordered4_returns_error(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"  { ordered4  (y : null)         } \" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert len(res_0.json()["errors"]) == 1
        assert res_0.json()["errors"][0]["message"] == "Internal Server Error(s) while executing query"
        assert len(res_0.json()["errors"][0]["locations"]) == 0
        assert res_0.json()["data"]["ordered4"] is None
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: fileSuffix
    # 			Action parameters:
    # 				directory: ''
    # 				file: '77RVxbVvCw'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = directory:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = file:77RVxbVvCw
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: fileSuffix
    @timeout_decorator.timeout(60)
    def test_1_QUERY_on_fileSuffix_returns_data(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"  { fileSuffix  (directory : \\\"\\\",file : \\\"77RVxbVvCw\\\")         } \" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["data"]["fileSuffix"] == "0"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: costfuns
    # 			Action parameters:
    # 				i: 'null'
    # 				s: 'ECVETWmM3RuA2'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = i:null
    # 				org.evomaster.core.search.gene.optional.OptionalGene = s:ECVETWmM3RuA2
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: costfuns
    @timeout_decorator.timeout(60)
    def test_2_QUERY_on_costfuns_returns_data(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"  { costfuns  (i : null,s : \\\"ECVETWmM3RuA2\\\")         } \" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["data"]["costfuns"] == "10"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: cookie
    # 			Action parameters:
    # 				name: 'E9aCO'
    # 				val: 'bBVjlH3U'
    # 				site: 'h2'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = name:E9aCO
    # 				org.evomaster.core.search.gene.optional.OptionalGene = val:bBVjlH3U
    # 				org.evomaster.core.search.gene.optional.OptionalGene = site:h2
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: cookie
    @timeout_decorator.timeout(60)
    def test_3_QUERY_on_cookie_returns_data(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"  { cookie  (name : \\\"E9aCO\\\",val : \\\"bBVjlH3U\\\",site : \\\"h2\\\")         } \" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["data"]["cookie"] == "0"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: calc
    # 			Action parameters:
    # 				op: 'IoYctl55kz'
    # 				arg1: 'null'
    # 				arg2: ''
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = op:IoYctl55kz
    # 				org.evomaster.core.search.gene.optional.OptionalGene = arg1:null
    # 				org.evomaster.core.search.gene.optional.OptionalGene = arg2:
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: calc
    @timeout_decorator.timeout(60)
    def test_4_QUERY_on_calc_returns_data(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"  { calc  (op : \\\"IoYctl55kz\\\",arg1 : null)         } \" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["data"]["calc"] == "0.0"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: notyPevar
    # 			Action parameters:
    # 				i: ''
    # 				s: 'sgADZPTeJ'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = i:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = s:sgADZPTeJ
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: notyPevar
    @timeout_decorator.timeout(60)
    def test_5_QUERY_on_notyPevar_returns_data(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"  { notyPevar  (s : \\\"sgADZPTeJ\\\")         } \" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["data"]["notyPevar"] == "2"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: title
    # 			Action parameters:
    # 				sex: 'RCP'
    # 				title: 'gbPwQXBjtBoaf1p'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = sex:RCP
    # 				org.evomaster.core.search.gene.optional.OptionalGene = title:gbPwQXBjtBoaf1p
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: title
    @timeout_decorator.timeout(60)
    def test_6_QUERY_on_title_returns_data(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"  { title  (sex : \\\"RCP\\\",title : \\\"gbPwQXBjtBoaf1p\\\")         } \" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["data"]["title"] == "-1"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: text2Txt
    # 			Action parameters:
    # 				word1: 'hnt'
    # 				word2: 'Pi'
    # 				word3: 'mU5nR8MEI6jp6Sf'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = word1:hnt
    # 				org.evomaster.core.search.gene.optional.OptionalGene = word2:Pi
    # 				org.evomaster.core.search.gene.optional.OptionalGene = word3:mU5nR8MEI6jp6Sf
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: text2Txt
    @timeout_decorator.timeout(60)
    def test_7_QUERY_on_text2Txt_returns_data(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"  { text2Txt  (word1 : \\\"hnt\\\",word2 : \\\"Pi\\\",word3 : \\\"mU5nR8MEI6jp6Sf\\\")         } \" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["data"]["text2Txt"] == ""
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: pat
    # 			Action parameters:
    # 				txt: 'MV9OpRt3cezUuV'
    # 				pat: 'ZutH684Ng3jI80Z'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = txt:MV9OpRt3cezUuV
    # 				org.evomaster.core.search.gene.optional.OptionalGene = pat:ZutH684Ng3jI80Z
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: pat
    @timeout_decorator.timeout(60)
    def test_8_QUERY_on_pat_returns_data(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"  { pat  (txt : \\\"MV9OpRt3cezUuV\\\",pat : \\\"ZutH684Ng3jI80Z\\\")         } \" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["data"]["pat"] == "0"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: dateParse
    # 			Action parameters:
    # 				dayname: 'U8PG'
    # 				monthname: 'aXvYCz2nSTjONQC7'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = dayname:U8PG
    # 				org.evomaster.core.search.gene.optional.OptionalGene = monthname:aXvYCz2nSTjONQC7
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: dateParse
    @timeout_decorator.timeout(60)
    def test_9_QUERY_on_dateParse_returns_data(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"  { dateParse  (dayname : \\\"U8PG\\\",monthname : \\\"aXvYCz2nSTjONQC7\\\")         } \" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["data"]["dateParse"] == "0"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: regex
    # 			Action parameters:
    # 				txt: 'x03ykO4uKmDuNikx'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = txt:x03ykO4uKmDuNikx
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: regex
    @timeout_decorator.timeout(60)
    def test_10_QUERY_on_regex_returns_data(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"  { regex  (txt : \\\"x03ykO4uKmDuNikx\\\")         } \" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["data"]["regex"] == "none"


if __name__ == '__main__':
    unittest.main()
