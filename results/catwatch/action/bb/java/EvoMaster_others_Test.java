import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-10-17T16:00:43.598-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 11 tests
 * <br>
*  Covered targets: 11
 * <br>
*  Used time: 0h 12m 49s
 * <br>
*  Needed budget for current results: 91%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: GET:/fetch
    // 			Action parameters:
    // 			Genes:
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: GET:/fetch
    @Test(timeout = 60000)
    public void test_0_getOnFetchReturnsNull() throws Exception {
        
        try{
            given().accept("*/*")
                    .get(baseUrlOfSut + "/fetch");
        } catch(Exception e){
        }
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/contributors
    // 			Action parameters:
    // 				organizations: ''
    // 				start_date: 'nwKx4EDNx0MM'
    // 				end_date: ''
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:''
    // 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:'nwKx4EDNx0MM'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:''
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/contributors
    @Test(timeout = 60000)
    public void test_1_getOnContributorsReturns400() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/contributors?start_date=nwKx4EDNx0MM")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string nwKx4EDNx0MM."));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/projects
    // 			Action parameters:
    // 				organizations: 'kYqQHR_'
    // 				start_date: ''
    // 				end_date: 'Q43P2UtiU5W6WCPJ'
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:'kYqQHR_'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:''
    // 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:'Q43P2UtiU5W6WCPJ'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/projects
    @Test(timeout = 60000)
    public void test_2_getOnStatisticsProjectsReturns400() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=kYqQHR_&" + 
                    "end_date=Q43P2UtiU5W6WCPJ")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string Q43P2UtiU5W6WCPJ."));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: GET:/projects
    // 			Action parameters:
    // 				organizations: ''
    // 				limit: ''
    // 				offset: ''
    // 				start_date: '2062-09-26T24:59:34'
    // 				end_date: '2006-06-24T-1:25:26'
    // 				sortBy: ''
    // 				q: 'okZB8l'
    // 				language: ''
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:''
    // 				org.evomaster.core.search.gene.optional.OptionalGene = limit:''
    // 				org.evomaster.core.search.gene.optional.OptionalGene = offset:''
    // 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:'2062-09-26T24:59:34'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:'2006-06-24T-1:25:26'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = sortBy:''
    // 				org.evomaster.core.search.gene.optional.OptionalGene = q:'okZB8l'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = language:''
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: GET:/projects
    @Test(timeout = 60000)
    public void test_3_getOn/ProjectsReturns400() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/projects?" + 
                    "start_date=2062-09-26T24%3A59%3A34&" + 
                    "end_date=2006-06-24T-1%3A25%3A26&" + 
                    "q=okZB8l")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"))
                .body("'message'", containsString("Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '2062-09-26T24:59:34'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [2062-09-26T24:59:34]"))
                .body("'path'", containsString("/projects"));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/languages
    // 			Action parameters:
    // 				organizations: ''
    // 				start_date: ''
    // 				end_date: 'mi6'
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:''
    // 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:''
    // 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:'mi6'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/languages
    @Test(timeout = 60000)
    public void test_4_getOnLanguagesReturns400() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/languages?end_date=mi6")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string mi6."));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics
    // 			Action parameters:
    // 				organizations: 'wmUHnxLtBZ3'
    // 				start_date: '1QEpgnzvxw'
    // 				end_date: 'WiiqwPdyIbHev'
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:'wmUHnxLtBZ3'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:'1QEpgnzvxw'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:'WiiqwPdyIbHev'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics
    @Test(timeout = 60000)
    public void test_5_getOnStatisticsReturns400() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=wmUHnxLtBZ3&" + 
                    "start_date=1QEpgnzvxw&" + 
                    "end_date=WiiqwPdyIbHev")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for stardDate"));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: POST:/import
    // 			Action parameters:
    // 				body: '{"projects":[{"commitsCount":905, "contributorsCount":990, "description":"iEz6JoZWkOSur", "externalContributorsCount":528, "forksCount":321, "languageList":[], "lastPushed":"3hEXPeYMmWmza_", "maintainers":["2", "y", "u0oDd5", "zT619D6EN", "la8bDf12mBfbmI"], "organizationName":"us", "primaryLanguage":"aANS", "score":732, "starsCount":618, "url":"T9WdBEbT65cmF"}], "statistics":[{"allStarsCount":545, "membersCount":167, "organizationName":"CkWoRpH_Es", "publicProjectCount":462, "snapshotDate":"2022-09-13T17:25:37", "tagsCount":2098883333, "teamsCount":238}, {"allContributorsCount":446, "allStarsCount":748, "id":207, "key":{"snapshotDate":"1931-04-10T11:31:13"}, "publicProjectCount":694, "snapshotDate":"2041-12-04T19:56:24", "teamsCount":770}, {"allForksCount":41, "allSizeCount":758, "id":4505391782591577929, "key":{"id":892, "snapshotDate":"1964-11-06T07:10:11"}, "snapshotDate":"1909-12-29T12:-1:49", "tagsCount":292}]}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = body:'{"projects":[{"commitsCount":905, "contributorsCount":990, "description":"iEz6JoZWkOSur", "externalContributorsCount":528, "forksCount":321, "languageList":[], "lastPushed":"3hEXPeYMmWmza_", "maintainers":["2", "y", "u0oDd5", "zT619D6EN", "la8bDf12mBfbmI"], "organizationName":"us", "primaryLanguage":"aANS", "score":732, "starsCount":618, "url":"T9WdBEbT65cmF"}], "statistics":[{"allStarsCount":545, "membersCount":167, "organizationName":"CkWoRpH_Es", "publicProjectCount":462, "snapshotDate":"2022-09-13T17:25:37", "tagsCount":2098883333, "teamsCount":238}, {"allContributorsCount":446, "allStarsCount":748, "id":207, "key":{"snapshotDate":"1931-04-10T11:31:13"}, "publicProjectCount":694, "snapshotDate":"2041-12-04T19:56:24", "teamsCount":770}, {"allForksCount":41, "allSizeCount":758, "id":4505391782591577929, "key":{"id":892, "snapshotDate":"1964-11-06T07:10:11"}, "snapshotDate":"1909-12-29T12:-1:49", "tagsCount":292}]}'
    // 				org.evomaster.core.search.gene.collection.EnumGene = contentType:'application/json'
    // 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = sendUnquoteJsonString:'true'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: POST:/import
    @Test(timeout = 60000)
    public void test_6_postOnImportReturns400() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .contentType("application/json")
                .body(" { " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"commitsCount\": 905, " + 
                    " \"contributorsCount\": 990, " + 
                    " \"description\": \"iEz6JoZWkOSur\", " + 
                    " \"externalContributorsCount\": 528, " + 
                    " \"forksCount\": 321, " + 
                    " \"languageList\": [], " + 
                    " \"lastPushed\": \"3hEXPeYMmWmza_\", " + 
                    " \"maintainers\": [ " + 
                    " \"2\", " + 
                    " \"y\", " + 
                    " \"u0oDd5\", " + 
                    " \"zT619D6EN\", " + 
                    " \"la8bDf12mBfbmI\" " + 
                    " ], " + 
                    " \"organizationName\": \"us\", " + 
                    " \"primaryLanguage\": \"aANS\", " + 
                    " \"score\": 732, " + 
                    " \"starsCount\": 618, " + 
                    " \"url\": \"T9WdBEbT65cmF\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allStarsCount\": 545, " + 
                    " \"membersCount\": 167, " + 
                    " \"organizationName\": \"CkWoRpH_Es\", " + 
                    " \"publicProjectCount\": 462, " + 
                    " \"snapshotDate\": \"2022-09-13T17:25:37\", " + 
                    " \"tagsCount\": 2098883333, " + 
                    " \"teamsCount\": 238 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 446, " + 
                    " \"allStarsCount\": 748, " + 
                    " \"id\": 207, " + 
                    " \"key\": { " + 
                    " \"snapshotDate\": \"1931-04-10T11:31:13\" " + 
                    " }, " + 
                    " \"publicProjectCount\": 694, " + 
                    " \"snapshotDate\": \"2041-12-04T19:56:24\", " + 
                    " \"teamsCount\": 770 " + 
                    " }, " + 
                    " { " + 
                    " \"allForksCount\": 41, " + 
                    " \"allSizeCount\": 758, " + 
                    " \"id\": 4505391782591577929, " + 
                    " \"key\": { " + 
                    " \"id\": 892, " + 
                    " \"snapshotDate\": \"1964-11-06T07:10:11\" " + 
                    " }, " + 
                    " \"snapshotDate\": \"1909-12-29T12:-1:49\", " + 
                    " \"tagsCount\": 292 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.http.converter.HttpMessageNotReadableException"))
                .body("'message'", containsString("JSON parse error: Can not deserialize value of type java.util.Date from String \"1909-12-29T12:-1:49\": not a valid representation (error: Failed to parse Date value '1909-12-29T12:-1:49': Can not parse date \"1909-12-29T12:-149\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not deserialize value of type java.util.Date from String \"1909-12-29T12:-1:49\": not a valid representation (error: Failed to parse Date value '1909-12-29T12:-1:49': Can not parse date \"1909-12-29T12:-149\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null))\n at [Source: java.io.PushbackInputStream@18f2e114; line: 1, column: 889] (through reference chain: org.zalando.catwatch.backend.web.admin.DatabaseDto[\"statistics\"]->java.util.ArrayList[2]->org.zalando.catwatch.backend.model.Statistics[\"snapshotDate\"])"))
                .body("'path'", containsString("/import"));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: GET:/init
    // 			Action parameters:
    // 			Genes:
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: GET:/init
    @Test(timeout = 60000)
    public void test_7_getOnInitReturns401() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .get(baseUrlOfSut + "/init")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: GET:/delete
    // 			Action parameters:
    // 			Genes:
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: GET:/delete
    @Test(timeout = 60000)
    public void test_8_getOnDeleteReturns401() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .get(baseUrlOfSut + "/delete")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: POST:/config/scoring.project
    // 			Action parameters:
    // 				X-Organizations: ''
    // 				body: ''
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = X-Organizations:''
    // 				org.evomaster.core.search.gene.optional.OptionalGene = body:''
    // 				org.evomaster.core.search.gene.collection.EnumGene = contentType:'application/json'
    // 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = sendUnquoteJsonString:'true'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: POST:/config/scoring.project
    @Test(timeout = 60000)
    public void test_9_postOnScoring_projectReturns403() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/config/scoring.project")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: POST:/import
    // 			Action parameters:
    // 				body: '{}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = body:'{}'
    // 				org.evomaster.core.search.gene.collection.EnumGene = contentType:'application/json'
    // 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = sendUnquoteJsonString:'true'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.rest.RestCallAction: POST:/import
    @Test(timeout = 60000)
    public void test_10_postOnImportReturns403() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }


}
