import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-03T00:17:09.400-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 31 tests
 * <br>
*  Covered targets: 155
 * <br>
*  Used time: 0h 19m 11s
 * <br>
*  Needed budget for current results: 97%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_headOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. HEAD:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. HEAD:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .head(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_1_deleteOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. DELETE:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/error -> Response status 500 not defined for path '/error'.
        given().accept("text/html")
                .delete(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_2_patchOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. PATCH:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PATCH:/error -> Response status 500 not defined for path '/error'.
        given().accept("text/html")
                .patch(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_3_putOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. PUT:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/error -> Response status 500 not defined for path '/error'.
        given().accept("text/html")
                .put(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_4_postOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/error -> Response status 500 not defined for path '/error'.
        given().accept("text/html")
                .post(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_5_getOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/error -> Response status 500 not defined for path '/error'.
        given().accept("text/html")
                .get(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_6_getOnProjectsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/statistics/projects
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 500 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/projects")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/projects"));
    }
    
    
    @Test(timeout = 60000)
    public void test_7_getOnStatisticsContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/statistics/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 500 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/contributors")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_8_getOnProjectsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/statistics/projects
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 500 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/projects?organizations=I_TfOZJ7EfzUdKk")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/projects"));
    }
    
    
    @Test(timeout = 60000)
    public void test_9_getOnLanguagesShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/languages
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/languages -> Response status 500 not defined for path '/languages'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=e1R50Zp&" + 
                    "offset=-443168220")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("-443168220"))
                .body("'path'", containsString("/languages"));
    }
    
    
    @Test(timeout = 60000)
    public void test_10_getOnLanguagesShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/languages
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/languages -> Response status 500 not defined for path '/languages'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=_I5gWyruOT&" + 
                    "limit=-1306955769&" + 
                    "offset=823")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("-1306955769"))
                .body("'path'", containsString("/languages"));
    }
    
    
    @Test(timeout = 60000)
    public void test_11_getOnContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=ru9NqW&" + 
                    "offset=48")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.UnsupportedOperationException"))
                .body("'message'", containsString("this parameter configuration is not implemented yet .. start date, end date required atm"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_12_getOnContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=Dgt_bVcgSi4a&" + 
                    "limit=662&" + 
                    "start_date=0t&" + 
                    "end_date=h4xMEpNtshfJ")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"h4xMEpNtshfJ\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_13_getOnContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=GKNMVIz9OHJ&" + 
                    "offset=-62775991&" + 
                    "start_date=WaZY9")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("offset must be greater than zero but was -62775991"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_14_getOnContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=qUPJ7RLMMOW7YIW&" + 
                    "limit=96&" + 
                    "offset=277&" + 
                    "end_date=roVMnYx563LN")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"roVMnYx563LN\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_15_getOnContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=LOMiu9&" + 
                    "limit=49&" + 
                    "offset=796&" + 
                    "start_date=JFgcKcTVayUU&" + 
                    "sortBy=sBsYpTeo")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("sortBy must be empty or have a valid value but was sBsYpTeo. Valid values are organizationalCommitsCount,organizationalProjectsCount,personalCommitsCount,personalProjectsCount,organizationName,name"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_16_getOnContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=NlulHy7PM3_I9vdL&" + 
                    "limit=597&" + 
                    "offset=963&" + 
                    "start_date=Y089mQySaeGXGp7N&" + 
                    "end_date=VdEdmNlZ3&" + 
                    "sortBy=LF5IzY1SoafY")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("sortBy must be empty or have a valid value but was LF5IzY1SoafY. Valid values are organizationalCommitsCount,organizationalProjectsCount,personalCommitsCount,personalProjectsCount,organizationName,name"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_17_getOnContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=W9&" + 
                    "limit=697&" + 
                    "offset=803&" + 
                    "end_date=fHnBDUWjLnMoN&" + 
                    "q=")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"fHnBDUWjLnMoN\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_18_optionsOnErrorReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. OPTIONS:/error -> OPTIONS on path '/error' defines a response schema but no response body found.
        given().accept("*/*")
                .options(baseUrlOfSut + "/error")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_19_getOnConfigReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/github.login'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.database.driverClassName'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.datasource.platform'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.datasource.url'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.datasource.username'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.jpa.database'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .get(baseUrlOfSut + "/config")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'cache.path'", containsString("target/cache"))
                .body("'cache.size'", containsString("50"))
                .body("'endpoints.enabled'", containsString("false"))
                .body("'endpoints.health.enabled'", containsString("true"))
                .body("'github.login'", nullValue())
                .body("'organization.list'", containsString("zalando,zalando-stups,zalando-incubator"))
                .body("'schedule'", containsString("0 1 8 * * *"))
                .body("'scoring.project'", containsString("function(project) {var daysSinceLastPush = 0;if (project.lastPushed) {var tokens = project.lastPushed.split(\" \");var day = tokens[2];var month = tokens[1];var year = tokens[5];var lastPushedDate = new Date(day + ' ' + month + ' ' + year);var millisInDay = 86400000;daysSinceLastPush = Math.floor((new Date() - lastPushedDate) / millisInDay);}var maintainersPenalty = 0;if (project.maintainers.length < 2) {maintainersPenalty = 100;}return project.starsCount * 3 + project.forksCount * 2 + project.contributorsCount * 5 - daysSinceLastPush - maintainersPenalty}"))
                .body("'spring.database.driverClassName'", nullValue())
                .body("'spring.datasource.platform'", nullValue())
                .body("'spring.datasource.url'", nullValue())
                .body("'spring.datasource.username'", nullValue())
                .body("'spring.jpa.database'", nullValue())
                .body("'spring.jpa.hibernate.ddl-auto'", containsString("update"));
    }
    
    
    @Test(timeout = 60000)
    public void test_20_getOnLanguagesReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/languages -> Response status 400 not defined for path '/statistics/languages'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=YffSD&" + 
                    "start_date=vEXN5tf6fCL&" + 
                    "end_date=wkMaUbk471UoBe")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string vEXN5tf6fCL."));
    }
    
    
    @Test(timeout = 60000)
    public void test_21_getOnContributorsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 400 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=j_C2_rSdZlc&" + 
                    "start_date=CfunyXLF0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string CfunyXLF0."));
    }
    
    
    @Test(timeout = 60000)
    public void test_22_getOnProjectsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 400 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/projects?end_date=qCk5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string qCk5."));
    }
    
    
    @Test(timeout = 60000)
    public void test_23_getOnStatisticsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics -> Response status 400 not defined for path '/statistics'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=ieObQR_y7y7Ed&" + 
                    "start_date=0gNsQchN8&" + 
                    "end_date=4GllieGjj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for stardDate"));
    }
    
    
    @Test(timeout = 60000)
    public void test_24_getOnContributorsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 400 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=RW&" + 
                    "end_date=1npe88nr")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string 1npe88nr."));
    }
    
    
    @Test(timeout = 60000)
    public void test_25_getOnProjectsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 400 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/projects?start_date=o_0aHD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string o_0aHD."));
    }
    
    
    @Test(timeout = 60000)
    public void test_26_getOnProjectsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/projects -> Response status 400 not defined for path '/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/projects?" + 
                    "start_date=1923-03-04T08%3A04%3A13.119Z&" + 
                    "end_date=2095-02-31T18%3A06%3A30%2B16%3A34&" + 
                    "q=NquP&" + 
                    "language=caAl")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"))
                .body("'message'", containsString("Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '2095-02-31T18:06:30+16:34'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [2095-02-31T18:06:30+16:34]"))
                .body("'path'", containsString("/projects"));
    }
    
    
    @Test(timeout = 60000)
    public void test_27_getOnInitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/init -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .get(baseUrlOfSut + "/init")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    @Test(timeout = 60000)
    public void test_28_getOnDeleteReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/delete -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .get(baseUrlOfSut + "/delete")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    @Test(timeout = 60000)
    public void test_29_postOnImportReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/import -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .contentType("application/json")
                .body(" { " + 
                    " \"statistics\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }
    
    
    @Test(timeout = 60000)
    public void test_30_postOnScoring_projectReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/config/scoring.project -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .contentType("application/json")
                .body(" 94R ")
                .post(baseUrlOfSut + "/config/scoring.project")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }


}
