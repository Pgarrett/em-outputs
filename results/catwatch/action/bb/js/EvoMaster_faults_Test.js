const superagent = require("superagent");
const EM = require("./EMTestUtils.js");
jest.setTimeout(60000);




/**
*  This file was automatically generated by EvoMaster on 2024-10-06T13:38:39.584-03:00[America/Argentina/Buenos_Aires]
*  
*  The generated test suite contains 11 tests
*  
*  Covered targets: 33
*  
*  Used time: 0h 15m 10s
*  
*  Needed budget for current results: 100%
*  
*  This file contains test cases that are likely to indicate faults.
*/

const baseUrlOfSut = "http://localhost:8080";


beforeAll( async () => {
});








// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: PATCH:/error
// 			Action parameters:
// 			Genes:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: PATCH:/error
test("test_0_PatchOnErrorCauses500_internalservererror", async () => {
    
    // Fault100. HTTP Status 500. PATCH:/error
    const res_0 = await superagent
            .patch(baseUrlOfSut + "/error").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.status).toBe(999.0);
    expect(res_0.body.error).toBe("None");
    expect(res_0.body.message).toBe("No message available");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: HEAD:/error
// 			Action parameters:
// 			Genes:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: HEAD:/error
test("test_1_HeadOnErrorCauses500_internalservererror", async () => {
    
    // Fault100. HTTP Status 500. HEAD:/error
    const res_0 = await superagent
            .head(baseUrlOfSut + "/error").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500);
    expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/contributors
// 			Action parameters:
// 				organizations: 'Pu'
// 				limit: ''
// 				offset: ''
// 				start_date: ''
// 				end_date: ''
// 				sortBy: ''
// 				q: ''
// 			Genes:
// 				org.evomaster.core.search.gene.string.StringGene = organizations:Pu
// 				org.evomaster.core.search.gene.optional.OptionalGene = limit:
// 				org.evomaster.core.search.gene.optional.OptionalGene = offset:
// 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:
// 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:
// 				org.evomaster.core.search.gene.optional.OptionalGene = sortBy:
// 				org.evomaster.core.search.gene.optional.OptionalGene = q:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/contributors
test("test_2_GetOnContributorsCauses500_internalservererror", async () => {
    
    // Fault100. HTTP Status 500. GET:/contributors
    const res_0 = await superagent
            .get(baseUrlOfSut + "/contributors?organizations=Pu").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.status).toBe(500.0);
    expect(res_0.body.error).toBe("Internal Server Error");
    expect(res_0.body.exception).toBe("java.lang.UnsupportedOperationException");
    expect(res_0.body.message).toBe("this parameter configuration is not implemented yet .. start date, end date required atm");
    expect(res_0.body.path).toBe("/contributors");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: DELETE:/error
// 			Action parameters:
// 			Genes:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: DELETE:/error
test("test_3_DeleteOnErrorCauses500_internalservererror", async () => {
    
    // Fault100. HTTP Status 500. DELETE:/error
    const res_0 = await superagent
            .delete(baseUrlOfSut + "/error").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.status).toBe(999.0);
    expect(res_0.body.error).toBe("None");
    expect(res_0.body.message).toBe("No message available");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: POST:/error
// 			Action parameters:
// 			Genes:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: POST:/error
test("test_4_PostOnErrorCauses500_internalservererror", async () => {
    
    // Fault100. HTTP Status 500. POST:/error
    const res_0 = await superagent
            .post(baseUrlOfSut + "/error").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.status).toBe(999.0);
    expect(res_0.body.error).toBe("None");
    expect(res_0.body.message).toBe("No message available");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/projects
// 			Action parameters:
// 				organizations: ''
// 				limit: '289'
// 				offset: '-117542062'
// 				start_date: '1906-05-24T02:55:11'
// 				end_date: '1993-08-15T03:47:27'
// 				sortBy: ''
// 				q: '4tIDMAU8Vl0xxnfN'
// 				language: ''
// 			Genes:
// 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:
// 				org.evomaster.core.search.gene.optional.OptionalGene = limit:289
// 				org.evomaster.core.search.gene.optional.OptionalGene = offset:-117542062
// 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:1906-05-24T02:55:11
// 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:1993-08-15T03:47:27
// 				org.evomaster.core.search.gene.optional.OptionalGene = sortBy:
// 				org.evomaster.core.search.gene.optional.OptionalGene = q:4tIDMAU8Vl0xxnfN
// 				org.evomaster.core.search.gene.optional.OptionalGene = language:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/projects
test("test_5_GetOnProjectsCauses500_internalservererror", async () => {
    
    // Fault100. HTTP Status 500. GET:/projects
    const res_0 = await superagent
            .get(baseUrlOfSut + "/projects?" + 
                "limit=289&" + 
                "offset=-117542062&" + 
                "start_date=1906-05-24T02%3A55%3A11&" + 
                "end_date=1993-08-15T03%3A47%3A27&" + 
                "q=4tIDMAU8Vl0xxnfN").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.status).toBe(500.0);
    expect(res_0.body.error).toBe("Internal Server Error");
    expect(res_0.body.exception).toBe("java.lang.IllegalArgumentException");
    expect(res_0.body.message).toBe("-117542062");
    expect(res_0.body.path).toBe("/projects");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: PUT:/error
// 			Action parameters:
// 			Genes:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: PUT:/error
test("test_6_PutOnErrorCauses500_internalservererror", async () => {
    
    // Fault100. HTTP Status 500. PUT:/error
    const res_0 = await superagent
            .put(baseUrlOfSut + "/error").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.status).toBe(999.0);
    expect(res_0.body.error).toBe("None");
    expect(res_0.body.message).toBe("No message available");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/languages
// 			Action parameters:
// 				organizations: 'ZHHwO1aRT8BYLp'
// 				limit: ''
// 				offset: '-1953992076'
// 				q: ''
// 			Genes:
// 				org.evomaster.core.search.gene.string.StringGene = organizations:ZHHwO1aRT8BYLp
// 				org.evomaster.core.search.gene.optional.OptionalGene = limit:
// 				org.evomaster.core.search.gene.optional.OptionalGene = offset:-1953992076
// 				org.evomaster.core.search.gene.optional.OptionalGene = q:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/languages
test("test_7_GetOnLanguagesCauses500_internalservererror", async () => {
    
    // Fault100. HTTP Status 500. GET:/languages
    const res_0 = await superagent
            .get(baseUrlOfSut + "/languages?" + 
                "organizations=ZHHwO1aRT8BYLp&" + 
                "offset=-1953992076").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.status).toBe(500.0);
    expect(res_0.body.error).toBe("Internal Server Error");
    expect(res_0.body.exception).toBe("java.lang.IllegalArgumentException");
    expect(res_0.body.message).toBe("-1953992076");
    expect(res_0.body.path).toBe("/languages");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/error
// 			Action parameters:
// 			Genes:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/error
test("test_8_GetOnErrorCauses500_internalservererror", async () => {
    
    // Fault100. HTTP Status 500. GET:/error
    const res_0 = await superagent
            .get(baseUrlOfSut + "/error").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.status).toBe(999.0);
    expect(res_0.body.error).toBe("None");
    expect(res_0.body.message).toBe("No message available");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/contributors
// 			Action parameters:
// 				organizations: ''
// 				start_date: ''
// 				end_date: ''
// 			Genes:
// 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:
// 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:
// 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/contributors
test("test_9_GetOnContributorsCauses500_internalservererror", async () => {
    
    // Fault100. HTTP Status 500. GET:/statistics/contributors
    const res_0 = await superagent
            .get(baseUrlOfSut + "/statistics/contributors").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.status).toBe(500.0);
    expect(res_0.body.error).toBe("Internal Server Error");
    expect(res_0.body.exception).toBe("java.lang.IndexOutOfBoundsException");
    expect(res_0.body.message).toBe("toIndex = 10");
    expect(res_0.body.path).toBe("/statistics/contributors");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/projects
// 			Action parameters:
// 				organizations: ''
// 				start_date: ''
// 				end_date: ''
// 			Genes:
// 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:
// 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:
// 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/projects
test("test_10_GetOnProjectsCauses500_internalservererror", async () => {
    
    // Fault100. HTTP Status 500. GET:/statistics/projects
    const res_0 = await superagent
            .get(baseUrlOfSut + "/statistics/projects?organizations=").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.status).toBe(500.0);
    expect(res_0.body.error).toBe("Internal Server Error");
    expect(res_0.body.exception).toBe("java.lang.IndexOutOfBoundsException");
    expect(res_0.body.message).toBe("toIndex = 10");
    expect(res_0.body.path).toBe("/statistics/projects");
});
