const superagent = require("superagent");
const EM = require("./EMTestUtils.js");
jest.setTimeout(60000);




/**
*  This file was automatically generated by EvoMaster on 2024-10-06T13:38:39.597-03:00[America/Argentina/Buenos_Aires]
*  
*  The generated test suite contains 10 tests
*  
*  Covered targets: 20
*  
*  Used time: 0h 15m 10s
*  
*  Needed budget for current results: 100%
*  
*  This file contains test cases that represent successful calls.
*/

const baseUrlOfSut = "http://localhost:8080";


beforeAll( async () => {
});








// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/languages
// 			Action parameters:
// 				organizations: 'cR'
// 				start_date: ''
// 				end_date: ''
// 			Genes:
// 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:cR
// 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:
// 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/languages
test("test_0_GetOnLanguagesReturns200", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/statistics/languages?organizations=cR").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.length).toBe(0);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/config
// 			Action parameters:
// 			Genes:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/config
test("test_1_GetOnConfigReturns200", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/config").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body["cache.path"]).toBe("target/cache");
    expect(res_0.body["cache.size"]).toBe("50");
    expect(res_0.body["endpoints.enabled"]).toBe("false");
    expect(res_0.body["endpoints.health.enabled"]).toBe("true");
    expect(res_0.body["github.login"]).toBe(null);
    expect(res_0.body["organization.list"]).toBe("zalando,zalando-stups,zalando-incubator");
    expect(res_0.body.schedule).toBe("0 1 8 * * *");
    expect(res_0.body["scoring.project"]).toBe("function(project) {var daysSinceLastPush = 0;if (project.lastPushed) {var tokens = project.lastPushed.split(\" \");var day = tokens[2];var month = tokens[1];var year = tokens[5];var lastPushedDate = new Date(day + ' ' + month + ' ' + year);var millisInDay = 86400000;daysSinceLastPush = Math.floor((new Date() - lastPushedDate) / millisInDay);}var maintainersPenalty = 0;if (project.maintainers.length < 2) {maintainersPenalty = 100;}return project.starsCount * 3 + project.forksCount * 2 + project.contributorsCount * 5 - daysSinceLastPush - maintainersPenalty}");
    expect(res_0.body["spring.database.driverClassName"]).toBe(null);
    expect(res_0.body["spring.datasource.platform"]).toBe(null);
    expect(res_0.body["spring.datasource.url"]).toBe(null);
    expect(res_0.body["spring.datasource.username"]).toBe(null);
    expect(res_0.body["spring.jpa.database"]).toBe(null);
    expect(res_0.body["spring.jpa.hibernate.ddl-auto"]).toBe("update");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/projects
// 			Action parameters:
// 				organizations: 'NpeylT0aV_2A65hz'
// 				limit: '866'
// 				offset: ''
// 				start_date: '2068-04-19T16:32:02'
// 				end_date: '1977-06-08T17:31:57'
// 				sortBy: ''
// 				q: ''
// 				language: 'sMwGhUt_DW'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:NpeylT0aV_2A65hz
// 				org.evomaster.core.search.gene.optional.OptionalGene = limit:866
// 				org.evomaster.core.search.gene.optional.OptionalGene = offset:
// 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:2068-04-19T16:32:02
// 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:1977-06-08T17:31:57
// 				org.evomaster.core.search.gene.optional.OptionalGene = sortBy:
// 				org.evomaster.core.search.gene.optional.OptionalGene = q:
// 				org.evomaster.core.search.gene.optional.OptionalGene = language:sMwGhUt_DW
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/projects
test("test_2_GetOnProjectsReturns200", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/projects?" + 
                "organizations=NpeylT0aV_2A65hz&" + 
                "limit=866&" + 
                "start_date=2068-04-19T16%3A32%3A02&" + 
                "end_date=1977-06-08T17%3A31%3A57&" + 
                "language=sMwGhUt_DW").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.length).toBe(0);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/health.json
// 			Action parameters:
// 			Genes:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/health.json
test("test_3_GetOnHealth_jsonReturns200", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/health.json").set('Accept', "application/vnd.spring-boot.actuator.v1+json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/vnd.spring-boot.actuator.v1+json")).toBe(true);
    expect(res_0.body.status).toBe("UP");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/languages
// 			Action parameters:
// 				organizations: '7rrrqkSwh3'
// 				limit: '960'
// 				offset: '834'
// 				q: 'eA7Dfcd_6Nc0a1a'
// 			Genes:
// 				org.evomaster.core.search.gene.string.StringGene = organizations:7rrrqkSwh3
// 				org.evomaster.core.search.gene.optional.OptionalGene = limit:960
// 				org.evomaster.core.search.gene.optional.OptionalGene = offset:834
// 				org.evomaster.core.search.gene.optional.OptionalGene = q:eA7Dfcd_6Nc0a1a
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/languages
test("test_4_GetOnLanguagesReturns200", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/languages?" + 
                "organizations=7rrrqkSwh3&" + 
                "limit=960&" + 
                "offset=834&" + 
                "q=eA7Dfcd_6Nc0a1a").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.length).toBe(0);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/export
// 			Action parameters:
// 			Genes:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/export
test("test_5_GetOnExportReturns200", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/export").set('Accept', "application/json;charset=utf-8")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.contributors.length).toBe(0);
    expect(res_0.body.projects.length).toBe(0);
    expect(res_0.body.statistics.length).toBe(0);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics
// 			Action parameters:
// 				organizations: '7SueYa'
// 				start_date: ''
// 				end_date: ''
// 			Genes:
// 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:7SueYa
// 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:
// 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics
test("test_6_GetOnStatisticsReturns200", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/statistics?organizations=7SueYa").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.length).toBe(0);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/health
// 			Action parameters:
// 			Genes:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/health
test("test_7_GetOnHealthReturns200", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/health").set('Accept', "application/vnd.spring-boot.actuator.v1+json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/vnd.spring-boot.actuator.v1+json")).toBe(true);
    expect(res_0.body.status).toBe("UP");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: OPTIONS:/error
// 			Action parameters:
// 			Genes:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: OPTIONS:/error
test("test_8_OptionsOnErrorReturns200", async () => {
    
    const res_0 = await superagent
            .options(baseUrlOfSut + "/error").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/v2/api-docs
// 			Action parameters:
// 			Genes:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/v2/api-docs
test("test_9_GetOnApi_docsReturns200", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/v2/api-docs").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
});
