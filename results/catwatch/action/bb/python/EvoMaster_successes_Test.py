#!/usr/bin/env python

import json
import unittest
import requests
import os
if os.name == 'nt':
    class timeout_decorator:
        @staticmethod
        def timeout(*args, **kwargs):
            return lambda f: f # return a no-op decorator
else:
    import timeout_decorator
from em_test_utils import *


#  This file was automatically generated by EvoMaster on 2024-10-06T13:23:26.667-03:00[America/Argentina/Buenos_Aires]
#  
#  The generated test suite contains 10 tests
#  
#  Covered targets: 20
#  
#  Used time: 0h 15m 23s
#  
#  Needed budget for current results: 97%
#  
#  This file contains test cases that represent successful calls.
class EvoMaster_successes_Test(unittest.TestCase):

    
    baseUrlOfSut = "http://localhost:8080"
    
    
    
    
    
    
    
    
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/health.json
    # 			Action parameters:
    # 			Genes:
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/health.json
    @timeout_decorator.timeout(60)
    def test_0_GET_on_health_json_returns_200(self):
        
        headers = {}
        headers['Accept'] = "application/vnd.spring-boot.actuator.v1+json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/health.json",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/vnd.spring-boot.actuator.v1+json" in res_0.headers["content-type"]
        assert res_0.json()["status"] == "UP"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/config
    # 			Action parameters:
    # 			Genes:
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/config
    @timeout_decorator.timeout(60)
    def test_1_GET_on_config_returns_200(self):
        
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/config",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["cache.path"] == "target/cache"
        assert res_0.json()["cache.size"] == "50"
        assert res_0.json()["endpoints.enabled"] == "false"
        assert res_0.json()["endpoints.health.enabled"] == "true"
        assert res_0.json()["github.login"] is None
        assert res_0.json()["organization.list"] == "zalando,zalando-stups,zalando-incubator"
        assert res_0.json()["schedule"] == "0 1 8 * * *"
        assert res_0.json()["scoring.project"] == "function(project) {var daysSinceLastPush = 0;if (project.lastPushed) {var tokens = project.lastPushed.split(\" \");var day = tokens[2];var month = tokens[1];var year = tokens[5];var lastPushedDate = new Date(day + ' ' + month + ' ' + year);var millisInDay = 86400000;daysSinceLastPush = Math.floor((new Date() - lastPushedDate) / millisInDay);}var maintainersPenalty = 0;if (project.maintainers.length < 2) {maintainersPenalty = 100;}return project.starsCount * 3 + project.forksCount * 2 + project.contributorsCount * 5 - daysSinceLastPush - maintainersPenalty}"
        assert res_0.json()["spring.database.driverClassName"] is None
        assert res_0.json()["spring.datasource.platform"] is None
        assert res_0.json()["spring.datasource.url"] is None
        assert res_0.json()["spring.datasource.username"] is None
        assert res_0.json()["spring.jpa.database"] is None
        assert res_0.json()["spring.jpa.hibernate.ddl-auto"] == "update"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: OPTIONS:/error
    # 			Action parameters:
    # 			Genes:
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: OPTIONS:/error
    @timeout_decorator.timeout(60)
    def test_2_OPTIONS_on_error_returns_200(self):
        
        headers = {}
        headers['Accept'] = "*/*"
        res_0 = requests \
                .options(self.baseUrlOfSut + "/error",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert res_0.text == ''
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/export
    # 			Action parameters:
    # 			Genes:
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/export
    @timeout_decorator.timeout(60)
    def test_3_GET_on_export_returns_200(self):
        
        headers = {}
        headers['Accept'] = "application/json;charset=utf-8"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/export",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert len(res_0.json()["contributors"]) == 0
        assert len(res_0.json()["projects"]) == 0
        assert len(res_0.json()["statistics"]) == 0
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/projects
    # 			Action parameters:
    # 				organizations: 'LlAGtbSGMlO'
    # 				limit: '932'
    # 				offset: ''
    # 				start_date: ''
    # 				end_date: '1905-10-17T07:35:12'
    # 				sortBy: ''
    # 				q: ''
    # 				language: 'OY9oBnoMi'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:LlAGtbSGMlO
    # 				org.evomaster.core.search.gene.optional.OptionalGene = limit:932
    # 				org.evomaster.core.search.gene.optional.OptionalGene = offset:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:1905-10-17T07:35:12
    # 				org.evomaster.core.search.gene.optional.OptionalGene = sortBy:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = q:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = language:OY9oBnoMi
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/projects
    @timeout_decorator.timeout(60)
    def test_4_GET_on_projects_returns_200(self):
        
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/projects?" + 
                    "organizations=LlAGtbSGMlO&" + 
                    "limit=932&" + 
                    "end_date=1905-10-17T07%3A35%3A12&" + 
                    "language=OY9oBnoMi",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert len(res_0.json()) == 0
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/health
    # 			Action parameters:
    # 			Genes:
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/health
    @timeout_decorator.timeout(60)
    def test_5_GET_on_health_returns_200(self):
        
        headers = {}
        headers['Accept'] = "application/vnd.spring-boot.actuator.v1+json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/health",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/vnd.spring-boot.actuator.v1+json" in res_0.headers["content-type"]
        assert res_0.json()["status"] == "UP"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics
    # 			Action parameters:
    # 				organizations: ''
    # 				start_date: ''
    # 				end_date: ''
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics
    @timeout_decorator.timeout(60)
    def test_6_GET_on_statistics_returns_200(self):
        
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/statistics?organizations=",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert len(res_0.json()) == 0
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/languages
    # 			Action parameters:
    # 				organizations: 'iA2kkVH_l1'
    # 				limit: '507'
    # 				offset: '854'
    # 				q: ''
    # 			Genes:
    # 				org.evomaster.core.search.gene.string.StringGene = organizations:iA2kkVH_l1
    # 				org.evomaster.core.search.gene.optional.OptionalGene = limit:507
    # 				org.evomaster.core.search.gene.optional.OptionalGene = offset:854
    # 				org.evomaster.core.search.gene.optional.OptionalGene = q:
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/languages
    @timeout_decorator.timeout(60)
    def test_7_GET_on_languages_returns_200(self):
        
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/languages?" + 
                    "organizations=iA2kkVH_l1&" + 
                    "limit=507&" + 
                    "offset=854",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert len(res_0.json()) == 0
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/languages
    # 			Action parameters:
    # 				organizations: ''
    # 				start_date: ''
    # 				end_date: ''
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/languages
    @timeout_decorator.timeout(60)
    def test_8_GET_on_languages_returns_200(self):
        
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/statistics/languages",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert len(res_0.json()) == 0
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/v2/api-docs
    # 			Action parameters:
    # 			Genes:
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/v2/api-docs
    @timeout_decorator.timeout(60)
    def test_9_GET_on_api_docs_returns_200(self):
        
        headers = {}
        headers['Accept'] = "*/*"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/v2/api-docs",
                    headers=headers)
        
        assert res_0.status_code == 200


if __name__ == '__main__':
    unittest.main()
