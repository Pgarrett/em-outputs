#!/usr/bin/env python

import json
import unittest
import requests
import os
if os.name == 'nt':
    class timeout_decorator:
        @staticmethod
        def timeout(*args, **kwargs):
            return lambda f: f # return a no-op decorator
else:
    import timeout_decorator
from em_test_utils import *


#  This file was automatically generated by EvoMaster on 2024-10-06T13:23:26.671-03:00[America/Argentina/Buenos_Aires]
#  
#  The generated test suite contains 10 tests
#  
#  Covered targets: 10
#  
#  Used time: 0h 15m 23s
#  
#  Needed budget for current results: 97%
#  
#  This file contains test cases that represent failed calls, but not indicative of faults.
class EvoMaster_others_Test(unittest.TestCase):

    
    baseUrlOfSut = "http://localhost:8080"
    
    
    
    
    
    
    
    
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/fetch
    # 			Action parameters:
    # 			Genes:
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/fetch
    @timeout_decorator.timeout(60)
    def test_0_GET_on_fetch_returns_null(self):
        
        try:
            headers = {}
            headers['Accept'] = "*/*"
            requests \
                    .get(self.baseUrlOfSut + "/fetch",
                        headers=headers)
        except AssertionError as e:
            raise e
        except Exception as e:
            pass
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/projects
    # 			Action parameters:
    # 				organizations: ''
    # 				start_date: 'nJVAV05'
    # 				end_date: '4uffspRb8'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:nJVAV05
    # 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:4uffspRb8
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/projects
    @timeout_decorator.timeout(60)
    def test_1_GET_on_projects_returns_400(self):
        
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/statistics/projects?" + 
                    "start_date=nJVAV05&" + 
                    "end_date=4uffspRb8",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert "Couldn't parse date string nJVAV05." in res_0.text
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/contributors
    # 			Action parameters:
    # 				organizations: ''
    # 				start_date: 'alyc8wfd9jWiSo'
    # 				end_date: 'RsihaJsR'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:alyc8wfd9jWiSo
    # 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:RsihaJsR
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/contributors
    @timeout_decorator.timeout(60)
    def test_2_GET_on_contributors_returns_400(self):
        
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/statistics/contributors?" + 
                    "start_date=alyc8wfd9jWiSo&" + 
                    "end_date=RsihaJsR",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert "Couldn't parse date string alyc8wfd9jWiSo." in res_0.text
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics
    # 			Action parameters:
    # 				organizations: ''
    # 				start_date: '1ptps'
    # 				end_date: ''
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:1ptps
    # 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics
    @timeout_decorator.timeout(60)
    def test_3_GET_on_statistics_returns_400(self):
        
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/statistics?start_date=1ptps",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert "Invalid date format for stardDate" in res_0.text
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/languages
    # 			Action parameters:
    # 				organizations: '2yQ95XwDb'
    # 				start_date: ''
    # 				end_date: 'cbY'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:2yQ95XwDb
    # 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:cbY
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/statistics/languages
    @timeout_decorator.timeout(60)
    def test_4_GET_on_languages_returns_400(self):
        
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=2yQ95XwDb&" + 
                    "end_date=cbY",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert "Couldn't parse date string cbY." in res_0.text
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/projects
    # 			Action parameters:
    # 				organizations: 'IflP1RCSLQgNfd'
    # 				limit: ''
    # 				offset: ''
    # 				start_date: '2020-07-26T21:53:43'
    # 				end_date: '1942-11-32T00:02:45'
    # 				sortBy: ''
    # 				q: ''
    # 				language: ''
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = organizations:IflP1RCSLQgNfd
    # 				org.evomaster.core.search.gene.optional.OptionalGene = limit:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = offset:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = start_date:2020-07-26T21:53:43
    # 				org.evomaster.core.search.gene.optional.OptionalGene = end_date:1942-11-32T00:02:45
    # 				org.evomaster.core.search.gene.optional.OptionalGene = sortBy:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = q:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = language:
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/projects
    @timeout_decorator.timeout(60)
    def test_5_GET_on_projects_returns_400(self):
        
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/projects?" + 
                    "organizations=IflP1RCSLQgNfd&" + 
                    "start_date=2020-07-26T21%3A53%3A43&" + 
                    "end_date=1942-11-32T00%3A02%3A45",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["status"] == 400.0
        assert res_0.json()["error"] == "Bad Request"
        assert res_0.json()["exception"] == "org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"
        assert res_0.json()["message"] == "Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '1942-11-32T00:02:45'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [1942-11-32T00:02:45]"
        assert res_0.json()["path"] == "/projects"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/delete
    # 			Action parameters:
    # 			Genes:
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/delete
    @timeout_decorator.timeout(60)
    def test_6_GET_on_delete_returns_401(self):
        
        headers = {}
        headers['Accept'] = "application/json;charset=utf-8"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/delete",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["error"] == "unauthorized"
        assert res_0.json()["error_description"] == "Full authentication is required to access this resource"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/init
    # 			Action parameters:
    # 			Genes:
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/init
    @timeout_decorator.timeout(60)
    def test_7_GET_on_init_returns_401(self):
        
        headers = {}
        headers['Accept'] = "application/json;charset=utf-8"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/init",
                    headers=headers)
        
        assert res_0.status_code == 401
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["error"] == "unauthorized"
        assert res_0.json()["error_description"] == "Full authentication is required to access this resource"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: POST:/config/scoring.project
    # 			Action parameters:
    # 				X-Organizations: ''
    # 				body: '8HPsTiVIxwgWUnl'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = X-Organizations:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = body:8HPsTiVIxwgWUnl
    # 				org.evomaster.core.search.gene.collection.EnumGene = contentType:application/json
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = sendUnquoteJsonString:false
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: POST:/config/scoring.project
    @timeout_decorator.timeout(60)
    def test_8_POST_on_scoring_project_returns_403(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " \"8HPsTiVIxwgWUnl\" "
        headers['Accept'] = "application/json;charset=utf-8"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/config/scoring.project",
                    headers=headers, data=body)
        
        assert res_0.status_code == 403
        assert "application/json" in res_0.headers["content-type"]
        assert "This endpoint is deactivated." in res_0.text
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: POST:/import
    # 			Action parameters:
    # 				body: '{"projects":[{"commitsCount":599, "contributorsCount":517, "description":"mzQ70d5DK", "name":"ny_cuOs9jayFtmL", "organizationName":"y6PbFePHHH", "score":941, "snapshotDate":"1976-13-32T12:07:40", "starsCount":751, "title":"OqWtWcq", "url":"ds99yL9g6FWDX8uU"}, {"commitsCount":751, "contributorsCount":178, "description":"vlI0dCx6LxLY7", "gitHubProjectId":407, "languageList":[], "primaryLanguage":"7QLnir", "score":410, "snapshotDate":"2039-07-26T03:47:04", "url":"XDSiNE9G3j"}, {"commitsCount":601, "contributorsCount":985, "description":"bPIrg8p7O4Xy6gSA", "externalContributorsCount":597, "forksCount":356, "languageList":[], "lastPushed":"ciAJoF", "maintainers":["HRDSSzHUQSXYV6p", "FOkt", "kjuXLzMrXG", "Zpe"], "primaryLanguage":"VJ74GmF", "title":"XlfIYPl", "url":"r"}, {"commitsCount":930, "contributorsCount":48, "description":"dvasHIkaB7S", "externalContributorsCount":8, "forksCount":423, "languageList":["IHzfLyo3", "gsyObhiejeSNeVLf", "rrwHQus4IlhM", "RAFngJ"], "lastPushed":"", "maintainers":["XQrwL3h"], "name":"w7TJPKe", "organizationName":"lfaUe7eyR2p", "primaryLanguage":"JUpUK99dhUN2jN9", "score":811, "starsCount":775, "title":"5fna7C"}], "statistics":[{"allContributorsCount":658, "allForksCount":2, "allStarsCount":736, "id":211, "membersCount":995, "organizationName":"DrRDFe1nwh", "snapshotDate":"2045-05-26T02:15:18"}]}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.ObjectGene = body:{"projects":[{"commitsCount":599, "contributorsCount":517, "description":"mzQ70d5DK", "name":"ny_cuOs9jayFtmL", "organizationName":"y6PbFePHHH", "score":941, "snapshotDate":"1976-13-32T12:07:40", "starsCount":751, "title":"OqWtWcq", "url":"ds99yL9g6FWDX8uU"}, {"commitsCount":751, "contributorsCount":178, "description":"vlI0dCx6LxLY7", "gitHubProjectId":407, "languageList":[], "primaryLanguage":"7QLnir", "score":410, "snapshotDate":"2039-07-26T03:47:04", "url":"XDSiNE9G3j"}, {"commitsCount":601, "contributorsCount":985, "description":"bPIrg8p7O4Xy6gSA", "externalContributorsCount":597, "forksCount":356, "languageList":[], "lastPushed":"ciAJoF", "maintainers":["HRDSSzHUQSXYV6p", "FOkt", "kjuXLzMrXG", "Zpe"], "primaryLanguage":"VJ74GmF", "title":"XlfIYPl", "url":"r"}, {"commitsCount":930, "contributorsCount":48, "description":"dvasHIkaB7S", "externalContributorsCount":8, "forksCount":423, "languageList":["IHzfLyo3", "gsyObhiejeSNeVLf", "rrwHQus4IlhM", "RAFngJ"], "lastPushed":"", "maintainers":["XQrwL3h"], "name":"w7TJPKe", "organizationName":"lfaUe7eyR2p", "primaryLanguage":"JUpUK99dhUN2jN9", "score":811, "starsCount":775, "title":"5fna7C"}], "statistics":[{"allContributorsCount":658, "allForksCount":2, "allStarsCount":736, "id":211, "membersCount":995, "organizationName":"DrRDFe1nwh", "snapshotDate":"2045-05-26T02:15:18"}]}
    # 				org.evomaster.core.search.gene.collection.EnumGene = contentType:application/json
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = sendUnquoteJsonString:false
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: POST:/import
    @timeout_decorator.timeout(60)
    def test_9_POST_on_import_returns_403(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"projects\": [ " + \
            " { " + \
            " \"commitsCount\": 599, " + \
            " \"contributorsCount\": 517, " + \
            " \"description\": \"mzQ70d5DK\", " + \
            " \"name\": \"ny_cuOs9jayFtmL\", " + \
            " \"organizationName\": \"y6PbFePHHH\", " + \
            " \"score\": 941, " + \
            " \"snapshotDate\": \"1976-13-32T12:07:40\", " + \
            " \"starsCount\": 751, " + \
            " \"title\": \"OqWtWcq\", " + \
            " \"url\": \"ds99yL9g6FWDX8uU\" " + \
            " }, " + \
            " { " + \
            " \"commitsCount\": 751, " + \
            " \"contributorsCount\": 178, " + \
            " \"description\": \"vlI0dCx6LxLY7\", " + \
            " \"gitHubProjectId\": 407, " + \
            " \"languageList\": [], " + \
            " \"primaryLanguage\": \"7QLnir\", " + \
            " \"score\": 410, " + \
            " \"snapshotDate\": \"2039-07-26T03:47:04\", " + \
            " \"url\": \"XDSiNE9G3j\" " + \
            " }, " + \
            " { " + \
            " \"commitsCount\": 601, " + \
            " \"contributorsCount\": 985, " + \
            " \"description\": \"bPIrg8p7O4Xy6gSA\", " + \
            " \"externalContributorsCount\": 597, " + \
            " \"forksCount\": 356, " + \
            " \"languageList\": [], " + \
            " \"lastPushed\": \"ciAJoF\", " + \
            " \"maintainers\": [ " + \
            " \"HRDSSzHUQSXYV6p\", " + \
            " \"FOkt\", " + \
            " \"kjuXLzMrXG\", " + \
            " \"Zpe\" " + \
            " ], " + \
            " \"primaryLanguage\": \"VJ74GmF\", " + \
            " \"title\": \"XlfIYPl\", " + \
            " \"url\": \"r\" " + \
            " }, " + \
            " { " + \
            " \"commitsCount\": 930, " + \
            " \"contributorsCount\": 48, " + \
            " \"description\": \"dvasHIkaB7S\", " + \
            " \"externalContributorsCount\": 8, " + \
            " \"forksCount\": 423, " + \
            " \"languageList\": [ " + \
            " \"IHzfLyo3\", " + \
            " \"gsyObhiejeSNeVLf\", " + \
            " \"rrwHQus4IlhM\", " + \
            " \"RAFngJ\" " + \
            " ], " + \
            " \"lastPushed\": \"\", " + \
            " \"maintainers\": [ " + \
            " \"XQrwL3h\" " + \
            " ], " + \
            " \"name\": \"w7TJPKe\", " + \
            " \"organizationName\": \"lfaUe7eyR2p\", " + \
            " \"primaryLanguage\": \"JUpUK99dhUN2jN9\", " + \
            " \"score\": 811, " + \
            " \"starsCount\": 775, " + \
            " \"title\": \"5fna7C\" " + \
            " } " + \
            " ], " + \
            " \"statistics\": [ " + \
            " { " + \
            " \"allContributorsCount\": 658, " + \
            " \"allForksCount\": 2, " + \
            " \"allStarsCount\": 736, " + \
            " \"id\": 211, " + \
            " \"membersCount\": 995, " + \
            " \"organizationName\": \"DrRDFe1nwh\", " + \
            " \"snapshotDate\": \"2045-05-26T02:15:18\" " + \
            " } " + \
            " ] " + \
            " } "
        headers['Accept'] = "application/json;charset=utf-8"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/import",
                    headers=headers, data=body)
        
        assert res_0.status_code == 403
        assert "application/json" in res_0.headers["content-type"]
        assert "This endpoint is deactivated." in res_0.text


if __name__ == '__main__':
    unittest.main()
