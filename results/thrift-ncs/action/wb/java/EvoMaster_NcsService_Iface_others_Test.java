import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.hamcrest.Matchers.*;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-03T03:16:57.592-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 33 tests
 * <br>
*  Covered targets: 501
 * <br>
*  Used time: 0h 20m 3s
 * <br>
*  Needed budget for current results: 97%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_NcsService_Iface_others_Test {

    
    private static final SutHandler controller = new em.external.org.rpc.thriftncs.ExternalEvoMasterController("/run/datad/facultad/tesis/EMB/jdk_8_maven/cs/rpc/thrift/artificial/thrift-ncs/target/rpc-thrift-ncs-sut.jar");
    private static String baseUrlOfSut;
    private static org.thrift.ncs.client.NcsService.Client var_client0_NcsService_Iface;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        controller.extractRPCSchema();
        assertNotNull(baseUrlOfSut);
        var_client0_NcsService_Iface = (org.thrift.ncs.client.NcsService.Client) controller.getRPCClient("org.thrift.ncs.client.NcsService$Iface");
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_ifaceOnCheckTriangleReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 0;
         int arg1 = 610;
         int arg2 = -523617;
         res_0 = var_client0_NcsService_Iface.checkTriangle(arg0,arg1,arg2);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_1_ifaceOnCheckTriangleReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 5;
         int arg1 = -1406;
         int arg2 = -134217057;
         res_0 = var_client0_NcsService_Iface.checkTriangle(arg0,arg1,arg2);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2_ifaceOnCheckTriangleReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 767;
         int arg1 = 505;
         int arg2 = -3608;
         res_0 = var_client0_NcsService_Iface.checkTriangle(arg0,arg1,arg2);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3_ifaceOnRemainderReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 0;
         int arg1 = 755;
         res_0 = var_client0_NcsService_Iface.remainder(arg0,arg1);
        }
        assertEquals(-1, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4_ifaceOnExpintReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 0;
         double arg1 = 0.79435537447;
         res_0 = var_client0_NcsService_Iface.expint(arg0,arg1);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.5688542484686409, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5_ifaceOnRemainderReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 781;
         int arg1 = 0;
         res_0 = var_client0_NcsService_Iface.remainder(arg0,arg1);
        }
        assertEquals(-1, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6_ifaceOnCheckTriangleReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 188;
         int arg1 = 588;
         int arg2 = 66;
         res_0 = var_client0_NcsService_Iface.checkTriangle(arg0,arg1,arg2);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7_ifaceOnCheckTriangleReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 5;
         int arg1 = 642;
         int arg2 = 671;
         res_0 = var_client0_NcsService_Iface.checkTriangle(arg0,arg1,arg2);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8_ifaceOnCheckTriangleReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 465;
         int arg1 = 302;
         int arg2 = 690;
         res_0 = var_client0_NcsService_Iface.checkTriangle(arg0,arg1,arg2);
        }
        assertEquals(1, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9_ifaceOnExpintReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 257;
         double arg1 = 0.0;
         res_0 = var_client0_NcsService_Iface.expint(arg0,arg1);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.00390625, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10_ifaceOnCheckTriangleReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 810;
         int arg1 = 860;
         int arg2 = 290;
         res_0 = var_client0_NcsService_Iface.checkTriangle(arg0,arg1,arg2);
        }
        assertEquals(1, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11_ifaceOnCheckTriangleReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 767;
         int arg1 = 505;
         int arg2 = 488;
         res_0 = var_client0_NcsService_Iface.checkTriangle(arg0,arg1,arg2);
        }
        assertEquals(1, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12_ifaceOnBessjReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 934;
         double arg1 = 0.0;
         res_0 = var_client0_NcsService_Iface.bessj(arg0,arg1);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13_ifaceOnRemainderReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 583;
         int arg1 = 213;
         res_0 = var_client0_NcsService_Iface.remainder(arg0,arg1);
        }
        assertEquals(157, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14_ifaceOnRemainderReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = -1593;
         int arg1 = 173;
         res_0 = var_client0_NcsService_Iface.remainder(arg0,arg1);
        }
        assertEquals(-36, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15_ifaceOnRemainderReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 781;
         int arg1 = -16;
         res_0 = var_client0_NcsService_Iface.remainder(arg0,arg1);
        }
        assertEquals(13, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16_ifaceOnFisherReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = -3385;
         int arg1 = 348;
         double arg2 = 0.8790483983157606;
         res_0 = var_client0_NcsService_Iface.fisher(arg0,arg1,arg2);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(1.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17_ifaceOnFisherReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 302;
         int arg1 = 708;
         double arg2 = 0.7715898990760461;
         res_0 = var_client0_NcsService_Iface.fisher(arg0,arg1,arg2);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.00459530187241122, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18_ifaceOnFisherReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 718;
         int arg1 = 101;
         double arg2 = 1.6663481793001806;
         res_0 = var_client0_NcsService_Iface.fisher(arg0,arg1,arg2);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.9991725466715101, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19_ifaceOnFisherReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 935;
         int arg1 = 674;
         double arg2 = 0.9007238389096451;
         res_0 = var_client0_NcsService_Iface.fisher(arg0,arg1,arg2);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.07072802196533093, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20_ifaceOnExpintReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 56;
         double arg1 = 0.12730269652089254;
         res_0 = var_client0_NcsService_Iface.expint(arg0,arg1);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.015970844142032512, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21_ifaceOnFisherReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 533;
         int arg1 = 683;
         double arg2 = 0.40291110377276895;
         res_0 = var_client0_NcsService_Iface.fisher(arg0,arg1,arg2);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22_ifaceOnGammqReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         double arg0 = 0.950991;
         double arg1 = 0.0;
         res_0 = var_client0_NcsService_Iface.gammq(arg0,arg1);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(1.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23_ifaceOnExpintReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 239;
         double arg1 = 755.8708262594151;
         res_0 = var_client0_NcsService_Iface.expint(arg0,arg1);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24_ifaceOnFisherReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 311;
         int arg1 = 471;
         double arg2 = 0.2911449816900258;
         res_0 = var_client0_NcsService_Iface.fisher(arg0,arg1,arg2);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(9.942926191482154E-15, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25_ifaceOnFisherReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 953;
         int arg1 = 965;
         double arg2 = 1745.478608076878;
         res_0 = var_client0_NcsService_Iface.fisher(arg0,arg1,arg2);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(1.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26_ifaceOnGammqReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         double arg0 = 0.7598915562709727;
         double arg1 = 0.4805040463206388;
         res_0 = var_client0_NcsService_Iface.gammq(arg0,arg1);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.48950478182638457, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27_ifaceOnBessjReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 386;
         double arg1 = -0.03413937388616142;
         res_0 = var_client0_NcsService_Iface.bessj(arg0,arg1);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28_ifaceOnGammqReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         double arg0 = 0.13855628184712543;
         double arg1 = 3.4225451329110155;
         res_0 = var_client0_NcsService_Iface.gammq(arg0,arg1);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.00138393632018159, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29_ifaceOnBessjReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 350;
         double arg1 = 7208156.126963793;
         res_0 = var_client0_NcsService_Iface.bessj(arg0,arg1);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(2.79908141937612E-4, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30_ifaceOnBessjReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 777;
         double arg1 = -387665.45702570956;
         res_0 = var_client0_NcsService_Iface.bessj(arg0,arg1);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(9.192487139004435E-4, res_0.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31_ifaceOnExpintReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 235;
         int arg1 = 771;
         res_0 = var_client0_NcsService_Iface.remainder(arg0,arg1);
        }
        assertEquals(-1, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
        
        
        org.thrift.ncs.client.Dto res_1 = null;
        {
         int arg0 = 923;
         double arg1 = 0.01458262959194434;
         res_1 = var_client0_NcsService_Iface.bessj(arg0,arg1);
        }
        assertEquals(0, res_1.resultAsInt);
        assertTrue(numbersMatch(0.0, res_1.resultAsDouble));
        
        
        
        org.thrift.ncs.client.Dto res_2 = null;
        {
         int arg0 = 1086059579;
         double arg1 = 0.27116421468821506;
         res_2 = var_client0_NcsService_Iface.expint(arg0,arg1);
        }
        assertEquals(0, res_2.resultAsInt);
        assertTrue(numbersMatch(7.020713121161214E-10, res_2.resultAsDouble));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32_ifaceOnGammqReturnsSuccess() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 895;
         int arg1 = 213;
         res_0 = var_client0_NcsService_Iface.remainder(arg0,arg1);
        }
        assertEquals(43, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
        
        
        org.thrift.ncs.client.Dto res_1 = null;
        {
         int arg0 = 429;
         double arg1 = 0.0803698204934229;
         res_1 = var_client0_NcsService_Iface.expint(arg0,arg1);
        }
        assertEquals(0, res_1.resultAsInt);
        assertTrue(numbersMatch(0.0021556106777846666, res_1.resultAsDouble));
        
        
        
        org.thrift.ncs.client.Dto res_2 = null;
        {
         int arg0 = 157;
         int arg1 = 44;
         double arg2 = 0.826724985940958;
         res_2 = var_client0_NcsService_Iface.fisher(arg0,arg1,arg2);
        }
        assertEquals(0, res_2.resultAsInt);
        assertTrue(numbersMatch(0.19890054331154805, res_2.resultAsDouble));
        
        
        
        org.thrift.ncs.client.Dto res_3 = null;
        {
         int arg0 = 432;
         int arg1 = 307;
         int arg2 = 265;
         res_3 = var_client0_NcsService_Iface.checkTriangle(arg0,arg1,arg2);
        }
        assertEquals(1, res_3.resultAsInt);
        assertTrue(numbersMatch(0.0, res_3.resultAsDouble));
        
        
        
        org.thrift.ncs.client.Dto res_4 = null;
        {
         int arg0 = 758;
         int arg1 = 68;
         int arg2 = 96;
         res_4 = var_client0_NcsService_Iface.checkTriangle(arg0,arg1,arg2);
        }
        assertEquals(0, res_4.resultAsInt);
        assertTrue(numbersMatch(0.0, res_4.resultAsDouble));
        
        
        
        org.thrift.ncs.client.Dto res_5 = null;
        {
         int arg0 = 398;
         int arg1 = 662;
         res_5 = var_client0_NcsService_Iface.remainder(arg0,arg1);
        }
        assertEquals(-1, res_5.resultAsInt);
        assertTrue(numbersMatch(0.0, res_5.resultAsDouble));
        
        
        try{
            
            org.thrift.ncs.client.Dto res_6 = null;
            {
             int arg0 = -1257425852;
             int arg1 = 819;
             res_6 = var_client0_NcsService_Iface.remainder(arg0,arg1);
            }// org/thrift/ncs/service/NcsServiceImpl_77_remainder OTHERWISE_EXCEPTION:org.apache.thrift.TApplicationException
            
        } catch(Exception e){
            // remainder failed: unknown result
        }
        
        
        org.thrift.ncs.client.Dto res_7 = null;
        {
         int arg0 = 413;
         int arg1 = 370;
         int arg2 = 450;
         res_7 = var_client0_NcsService_Iface.checkTriangle(arg0,arg1,arg2);
        }
        assertEquals(1, res_7.resultAsInt);
        assertTrue(numbersMatch(0.0, res_7.resultAsDouble));
        
        
        
        org.thrift.ncs.client.Dto res_8 = null;
        {
         double arg0 = 0.22695275926305114;
         double arg1 = 0.11808365926275621;
         res_8 = var_client0_NcsService_Iface.gammq(arg0,arg1);
        }
        assertEquals(0, res_8.resultAsInt);
        assertTrue(numbersMatch(0.3386828846871368, res_8.resultAsDouble));
        
    }


}
