import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-07T01:11:48.456-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 27 tests
 * <br>
*  Covered targets: 149
 * <br>
*  Used time: 0h 12m 32s
 * <br>
*  Needed budget for current results: 93%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_headOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. HEAD:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. HEAD:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .head(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_1_deleteOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. DELETE:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .delete(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(999.0))
                .body("'error'", containsString("None"))
                .body("'message'", containsString("No message available"));
    }
    
    
    @Test(timeout = 60000)
    public void test_2_patchOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. PATCH:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PATCH:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .patch(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(999.0))
                .body("'error'", containsString("None"))
                .body("'message'", containsString("No message available"));
    }
    
    
    @Test(timeout = 60000)
    public void test_3_putOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. PUT:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .put(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(999.0))
                .body("'error'", containsString("None"))
                .body("'message'", containsString("No message available"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4_postOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .post(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(999.0))
                .body("'error'", containsString("None"))
                .body("'message'", containsString("No message available"));
    }
    
    
    @Test(timeout = 60000)
    public void test_5_getOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .get(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(999.0))
                .body("'error'", containsString("None"))
                .body("'message'", containsString("No message available"));
    }
    
    
    @Test(timeout = 60000)
    public void test_6_getOnProjectsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/statistics/projects
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 500 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/projects?organizations=")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/projects"));
    }
    
    
    @Test(timeout = 60000)
    public void test_7_getOnContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/statistics/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 500 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/contributors")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_8_getOnContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=oTA&" + 
                    "offset=656")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.UnsupportedOperationException"))
                .body("'message'", containsString("this parameter configuration is not implemented yet .. start date, end date required atm"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_9_getOnContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=YjgruJgzqLyew2&" + 
                    "limit=310&" + 
                    "start_date=LQ5&" + 
                    "end_date=UsGL")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"UsGL\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_10_getOnContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=T&" + 
                    "limit=725&" + 
                    "end_date=zZ8UM&" + 
                    "sortBy=_PtnPu78nJD&" + 
                    "q=Cot1pVAwntah")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("sortBy must be empty or have a valid value but was _PtnPu78nJD. Valid values are organizationalCommitsCount,organizationalProjectsCount,personalCommitsCount,personalProjectsCount,organizationName,name"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_11_getOnContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=b6Gp4&" + 
                    "limit=909&" + 
                    "offset=688&" + 
                    "q=nXjT4MxrrZRHMD3")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.UnsupportedOperationException"))
                .body("'message'", containsString("this parameter configuration is not implemented yet .. start date, end date required atm"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_12_optionsOnErrorReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. OPTIONS:/error -> OPTIONS on path '/error' defines a response schema but no response body found.
        given().accept("*/*")
                .options(baseUrlOfSut + "/error")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_13_getOnConfigReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/github.login'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.database.driverClassName'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.datasource.platform'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.datasource.url'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.datasource.username'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.jpa.database'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .get(baseUrlOfSut + "/config")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'cache.path'", containsString("target/cache"))
                .body("'cache.size'", containsString("50"))
                .body("'endpoints.enabled'", containsString("false"))
                .body("'endpoints.health.enabled'", containsString("true"))
                .body("'github.login'", nullValue())
                .body("'organization.list'", containsString("zalando,zalando-stups,zalando-incubator"))
                .body("'schedule'", containsString("0 1 8 * * *"))
                .body("'scoring.project'", containsString("function(project) {var daysSinceLastPush = 0;if (project.lastPushed) {var tokens = project.lastPushed.split(\" \");var day = tokens[2];var month = tokens[1];var year = tokens[5];var lastPushedDate = new Date(day + ' ' + month + ' ' + year);var millisInDay = 86400000;daysSinceLastPush = Math.floor((new Date() - lastPushedDate) / millisInDay);}var maintainersPenalty = 0;if (project.maintainers.length < 2) {maintainersPenalty = 100;}return project.starsCount * 3 + project.forksCount * 2 + project.contributorsCount * 5 - daysSinceLastPush - maintainersPenalty}"))
                .body("'spring.database.driverClassName'", nullValue())
                .body("'spring.datasource.platform'", nullValue())
                .body("'spring.datasource.url'", nullValue())
                .body("'spring.datasource.username'", nullValue())
                .body("'spring.jpa.database'", nullValue())
                .body("'spring.jpa.hibernate.ddl-auto'", containsString("update"));
    }
    
    
    @Test(timeout = 60000)
    public void test_14_getOnProjectsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 400 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=_HFM56v&" + 
                    "start_date=YLNC5yyLY")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string YLNC5yyLY."));
    }
    
    
    @Test(timeout = 60000)
    public void test_15_getOnStatisticsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics -> Response status 400 not defined for path '/statistics'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics?" + 
                    "start_date=cqtLnQAseSmb4m&" + 
                    "end_date=GpmLLoddZxoZJ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for stardDate"));
    }
    
    
    @Test(timeout = 60000)
    public void test_16_getOnLanguagesReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/languages -> Response status 400 not defined for path '/statistics/languages'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=cvvj2whHgPFPxO&" + 
                    "end_date=DcVoqaECBKjn5Hod")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string DcVoqaECBKjn5Hod."));
    }
    
    
    @Test(timeout = 60000)
    public void test_17_getOnContributorsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 400 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=9cRdX6MeCS&" + 
                    "start_date=lXbjYyHeiI4hStS")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string lXbjYyHeiI4hStS."));
    }
    
    
    @Test(timeout = 60000)
    public void test_18_getOnLanguagesReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/languages -> Response status 400 not defined for path '/statistics/languages'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=9JKK3diyY&" + 
                    "start_date=AhlcKU&" + 
                    "end_date=R")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string AhlcKU."));
    }
    
    
    @Test(timeout = 60000)
    public void test_19_getOnProjectsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 400 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/projects?end_date=uKYE1oxHU4ClDKbK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string uKYE1oxHU4ClDKbK."));
    }
    
    
    @Test(timeout = 60000)
    public void test_20_getOnContributorsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 400 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "start_date=5mJ&" + 
                    "end_date=4blcP5K2r1")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string 5mJ."));
    }
    
    
    @Test(timeout = 60000)
    public void test_21_getOnProjectsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/projects -> Response status 400 not defined for path '/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=UsMQfgdjdW1evNs&" + 
                    "limit=324&" + 
                    "offset=132&" + 
                    "start_date=1904-05-21T15%3A56%3A02%2B03%3A32&" + 
                    "end_date=1950-02-31T15%3A53%3A40.137-22%3A29&" + 
                    "sortBy=1jmqtINAG3")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"))
                .body("'message'", containsString("Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '1950-02-31T15:53:40.137-22:29'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [1950-02-31T15:53:40.137-22:29]"))
                .body("'path'", containsString("/projects"));
    }
    
    
    @Test(timeout = 60000)
    public void test_22_getOnProjectsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/projects -> Response status 400 not defined for path '/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=RRkxh7O7OC3&" + 
                    "limit=13&" + 
                    "start_date=1956-10-01T25%3A29%3A49.425%2B20%3A24&" + 
                    "end_date=1922-05-05T17%3A29%3A45.460Z&" + 
                    "q=2lRab085EQ5s")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"))
                .body("'message'", containsString("Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '1956-10-01T25:29:49.425+20:24'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [1956-10-01T25:29:49.425+20:24]"))
                .body("'path'", containsString("/projects"));
    }
    
    
    @Test(timeout = 60000)
    public void test_23_getOnInitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/init -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .get(baseUrlOfSut + "/init")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    @Test(timeout = 60000)
    public void test_24_getOnDeleteReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/delete -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .get(baseUrlOfSut + "/delete")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    @Test(timeout = 60000)
    public void test_25_postOnImportReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/import -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 642, " + 
                    " \"key\": { " + 
                    " \"organizationId\": 222, " + 
                    " \"snapshotDate\": \"2062-10-19T22:06:16+10:34\" " + 
                    " }, " + 
                    " \"loginId\": \"douRf_ByW2wmt\", " + 
                    " \"name\": \"GY2V\", " + 
                    " \"organizationalCommitsCount\": 596, " + 
                    " \"organizationalProjectsCount\": 934, " + 
                    " \"personalCommitsCount\": 274 " + 
                    " }, " + 
                    " { " + 
                    " \"loginId\": \"L\", " + 
                    " \"name\": \"GQ_N\", " + 
                    " \"organizationId\": 707298542791936518, " + 
                    " \"organizationalCommitsCount\": 147, " + 
                    " \"personalProjectsCount\": 250, " + 
                    " \"snapshotDate\": \"1940-10-20T06:33:22+09:10\" " + 
                    " }, " + 
                    " { " + 
                    " \"key\": { " + 
                    " \"id\": 482 " + 
                    " }, " + 
                    " \"name\": \"Xa5cGrgE\", " + 
                    " \"organizationId\": 924, " + 
                    " \"organizationalCommitsCount\": 144, " + 
                    " \"personalCommitsCount\": 864, " + 
                    " \"personalProjectsCount\": 972, " + 
                    " \"url\": \"LFL\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 432, " + 
                    " \"key\": { " + 
                    " \"id\": 8470064784148200366, " + 
                    " \"organizationId\": 611 " + 
                    " }, " + 
                    " \"loginId\": \"lBTDKTSmGaReNX\", " + 
                    " \"organizationName\": \"JEewCu\", " + 
                    " \"organizationalCommitsCount\": 478, " + 
                    " \"organizationalProjectsCount\": 327, " + 
                    " \"personalProjectsCount\": 231 " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"commitsCount\": 267, " + 
                    " \"contributorsCount\": 70, " + 
                    " \"description\": \"a7U9WEtauPuE_\", " + 
                    " \"forksCount\": 295, " + 
                    " \"gitHubProjectId\": 540, " + 
                    " \"image\": \"O48\", " + 
                    " \"languageList\": [ " + 
                    " \"\", " + 
                    " \"e\", " + 
                    " \"RR3ARL\" " + 
                    " ], " + 
                    " \"organizationName\": \"4ylaz0T6F8Qg\", " + 
                    " \"score\": 150, " + 
                    " \"snapshotDate\": \"1923-04-08T16:12:09+17:37\", " + 
                    " \"starsCount\": 274, " + 
                    " \"title\": \"K5ZX9\" " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 435, " + 
                    " \"description\": \"CK0AanheVu3C_WwV\", " + 
                    " \"forksCount\": 325, " + 
                    " \"image\": \"pUv\", " + 
                    " \"maintainers\": [ " + 
                    " \"tc1X3YpCLMq\" " + 
                    " ], " + 
                    " \"name\": \"JztyTm\", " + 
                    " \"score\": 537, " + 
                    " \"snapshotDate\": \"2081-08-17T07:56:45.867Z\", " + 
                    " \"url\": \"u0QJTCvcq3HGZ5w\" " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 344, " + 
                    " \"description\": \"_Imv8sU_4vwcGEz\", " + 
                    " \"forksCount\": 339, " + 
                    " \"image\": \"ZmRE\", " + 
                    " \"languageList\": [], " + 
                    " \"lastPushed\": \"9ca\", " + 
                    " \"maintainers\": [], " + 
                    " \"name\": \"TFnf\", " + 
                    " \"organizationName\": \"J771p\", " + 
                    " \"primaryLanguage\": \"Fg3m_m1lY\", " + 
                    " \"score\": -1211845249, " + 
                    " \"snapshotDate\": \"2008-01-03T07:45:44.562+12:59\", " + 
                    " \"starsCount\": 423 " + 
                    " }, " + 
                    " { " + 
                    " \"description\": \"M9\", " + 
                    " \"gitHubProjectId\": 276, " + 
                    " \"primaryLanguage\": \"Xqq5tn2pb\", " + 
                    " \"starsCount\": 191, " + 
                    " \"title\": \"QW\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }
    
    
    @Test(timeout = 60000)
    public void test_26_postOnScoring_projectReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/config/scoring.project -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "Y0F_YVJ9t4")
                .contentType("application/json")
                .post(baseUrlOfSut + "/config/scoring.project")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }


}
