import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-07T15:27:28.106-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 16 tests
 * <br>
*  Covered targets: 48
 * <br>
*  Used time: 0h 10m 2s
 * <br>
*  Needed budget for current results: 93%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.tsdes.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("NEWS_ENTITY"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_deleteOnNewReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/news/V")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_1_getOnNewReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news/Dbx5%5CzvY4ApFao5?" + 
                    "country=oc7PPw9&" + 
                    "authorId=JAHo")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_2_postOnNewsReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .body(" { " + 
                    " \"authorId\": \"pa16\", " + 
                    " \"country\": \"_EM_2445_XYZ_\", " + 
                    " \"id\": \"dElCE9nJLdQcp5h\" " + 
                    " } ")
                .post(baseUrlOfSut + "/news?authorId=_EM_2449_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_3_putOnNewReturns400() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"creationTime\": \"1910-01-32T00:57:53.095-21:03\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/kn8ymE4YQh?" + 
                    "EMextraParam123=42&" + 
                    "country=El1fYyC078V")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("JSON parse error: Cannot deserialize value of type `java.time.ZonedDateTime` from String \"1910-01-32T00:57:53.095-21:03\": Failed to deserialize java.time.ZonedDateTime: (java.time.format.DateTimeParseException) Text '1910-01-32T00:57:53.095-21:03' could not be parsed: Invalid value for DayOfMonth (valid values 1 - 28/31): 32; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.ZonedDateTime` from String \"1910-01-32T00:57:53.095-21:03\": Failed to deserialize java.time.ZonedDateTime: (java.time.format.DateTimeParseException) Text '1910-01-32T00:57:53.095-21:03' could not be parsed: Invalid value for DayOfMonth (valid values 1 - 28/31): 32\n at [Source: (ByteArrayInputStream); line: 1, column: 17] (through reference chain: org.tsdes.spring.examples.news.dto.NewsDto[\"creationTime\"])"))
                .body("'path'", containsString("/news/kn8ymE4YQh"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4_postOnNewsReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .body(" { " + 
                    " \"authorId\": \"5Le1OSdNJV\", " + 
                    " \"creationTime\": \"2011-12-02T10:08:18.608Z\", " + 
                    " \"id\": \"Jn7BUVT_DrT4K2\", " + 
                    " \"newsId\": \"pjxyonOpJ\" " + 
                    " } ")
                .post(baseUrlOfSut + "/news?country=w7etfkc")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_5_putOnTextReturns400() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "42")
                .contentType("text/plain")
                .body()
                .put(baseUrlOfSut + "/news/577/text?" + 
                    "EMextraParam123=_EM_602_XYZ_&" + 
                    "authorId=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("Required request body is missing: public org.springframework.http.ResponseEntity<java.lang.Object> org.tsdes.spring.examples.news.api.NewsRestApi.updateText(java.lang.Long,java.lang.String)"))
                .body("'path'", containsString("/news/577/text"));
    }
    
    
    @Test(timeout = 60000)
    public void test_6_deleteOnNewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1825_XYZ_")
                .delete(baseUrlOfSut + "/news/122?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_7_getOnNewReturns404UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 45L)
                .d("ID", "746")
                .d("AUTHOR_ID", "\"_EM_1292_XYZ_\"")
                .d("COUNTRY", "\"_EM_1293_XYZ_\"")
                .d("CREATION_TIME", "\"2096-07-21 18:29:05\"")
                .d("TEXT", "\"1Yat\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/news/-1212")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_8_deleteOnNewReturns404UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 190L)
                .d("ID", "535")
                .d("AUTHOR_ID", "\"4`jR8OgW\"")
                .d("COUNTRY", "\"_EM_4075_XYZ_\"")
                .d("CREATION_TIME", "\"2047-05-30 18:45:02\"")
                .d("TEXT", "\"ZJoYsnEzigu9\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/news/-134?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_9_getOnNewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news/_EM_4948_XYZ_?authorId=q7h99PBE6D9G6rNh")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_10_putOnNewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"country\": \"\", " + 
                    " \"newsId\": \"XeO4_B7ZTG2afs\", " + 
                    " \"text\": \"xyudNjj5BA\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/92yQM?" + 
                    "country=&" + 
                    "authorId=M_m")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_11_putOnNewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"country\": \"rd8oB0dLOCu\", " + 
                    " \"newsId\": \"eDCs1dG\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/BMxdwEt?" + 
                    "EMextraParam123=42&" + 
                    "authorId=PD2l92f3")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_12_putOnTextReturns404UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 21L)
                .d("ID", "140")
                .d("AUTHOR_ID", "\"_EM_1381_XYZ_\"")
                .d("COUNTRY", "\"AW05\"")
                .d("CREATION_TIME", "\"2022-04-28 21:25:36\"")
                .d("TEXT", "\"_EM_9428_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("text/plain")
                .body("i78kJGc8JtcmX")
                .put(baseUrlOfSut + "/news/-25558/text?" + 
                    "country=-25558G&" + 
                    "authorId=-25558G")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_13_deleteOnNewReturns405UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 771L)
                .d("ID", "200")
                .d("AUTHOR_ID", "\"wDqjLLg\"")
                .d("COUNTRY", "\"qpxiRtyka29W\"")
                .d("CREATION_TIME", "\"1900-12-10 06:46:27\"")
                .d("TEXT", "\"_EM_10259_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/news/;")
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(405.0))
                .body("'error'", containsString("Method Not Allowed"))
                .body("'message'", containsString("Request method 'DELETE' not supported"))
                .body("'path'", containsString("/news/;"));
    }
    
    
    @Test(timeout = 60000)
    public void test_14_putOnNewReturns405UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 771L)
                .d("ID", "200")
                .d("AUTHOR_ID", "\"wDqjLLg\"")
                .d("COUNTRY", "\"qpxiRtyka29W\"")
                .d("CREATION_TIME", "\"1900-12-10 06:46:27\"")
                .d("TEXT", "\"_EM_10259_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"creationTime\": \"1973-05-17T16:39:33.692+02:13\", " + 
                    " \"id\": \";\", " + 
                    " \"newsId\": \"42\", " + 
                    " \"text\": \"_EM_2272_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/;")
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(405.0))
                .body("'error'", containsString("Method Not Allowed"))
                .body("'message'", containsString("Request method 'PUT' not supported"))
                .body("'path'", containsString("/news/;"));
    }
    
    
    @Test(timeout = 60000)
    public void test_15_putOnNewReturns409UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 378L)
                .d("ID", "386")
                .d("AUTHOR_ID", "\"7ms8zgZVE\"")
                .d("COUNTRY", "\"Sweden\"")
                .d("CREATION_TIME", "\"2081-09-05 03:55:27\"")
                .d("TEXT", "\"UmKvwCZRAyLHS\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"creationTime\": \"2086-08-15T05:18:15.416+06:55\", " + 
                    " \"id\": \"HxAY\", " + 
                    " \"newsId\": \"1\", " + 
                    " \"text\": \"hTD\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/HxAY?EMextraParam123=42")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
