import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-07T00:58:59.638-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 19 tests
 * <br>
*  Covered targets: 65
 * <br>
*  Used time: 0h 11m 9s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_getOnFeaturesReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/6h/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_1_getOnFeaturesReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/ELEARNING_SITE/configurations/ObmZM/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_2_getOnConfigurationsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/Fv/configurations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_3_getOnProductsReturns165Elements() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(165))
                .body("", hasItems("ELEARNING_SITE", "ELEARNING_SITE", "ELEARNING_SITE", "ELEARNING_SITE", "xQewP", "ELEARNING_SITE", "a3Nhd", "xQewP", "ELEARNING_SITE", "lXuVe8OhURhWIok", "xQewP", "dsImqmbIWV", "xQewP", "lXuVe8OhURhWIok", "6h", "a3Nhd", "a3Nhd", "3x1K7a", "ELEARNING_SITE", "a3Nhd", "dsImqmbIWV", "ELEARNING_SITE", "znp_j", "iG", "Yixn", "6h", "Yixn", "ELEARNING_SITE", "dsImqmbIWV", "iG", "dsImqmbIWV", "ELEARNING_SITE", "dsImqmbIWV", "a3Nhd", "KTY2EHub", "ELEARNING_SITE", "C0ihyh5Fmmb", "QhIMfX9K7bh", "iG", "Yixn", "IebQy4NlHmq", "IebQy4NlHmq", "a3Nhd", "IebQy4NlHmq", "QhIMfX9K7bh", "3x1K7a", "a3Nhd", "IebQy4NlHmq", "IebQy4NlHmq", "a3Nhd", "lXuVe8OhURhWIok", "ELEARNING_SITE", "dsImqmbIWV", "R", "znp_j", "6h", "ELEARNING_SITE", "lXuVe8OhURhWIok", "6h", "ovbmWuS3ea6Z1ct", "IebQy4NlHmq", "xQewP", "6h", "a3Nhd", "P_nGqlWFMhSAHv_", "QhIMfX9K7bh", "RTVRTkb3k0ddGeS", "RTVRTkb3k0ddGeS", "P_nGqlWFMhSAHv_", "dLe1iSd2gqO0a", "KTY2EHub", "JnIutufKXO_Ru", "a3Nhd", "Yixn", "qFybVv1tO", "a3Nhd", "YaJ4QSVKgy0GSIfK", "oH0qNuzy", "3RgaK5eb", "iG", "C0ihyh5Fmmb", "QhIMfX9K7bh", "P_nGqlWFMhSAHv_", "dsImqmbIWV", "a3Nhd", "A", "3RgaK5eb", "3RgaK5eb", "QhIMfX9K7bh", "6h", "dLe1iSd2gqO0a", "ovbmWuS3ea6Z1ct", "A", "3x1K7a", "YaJ4QSVKgy0GSIfK", "qFybVv1tO", "bY", "Yixn", "6h", "qFybVv1tO", "YaJ4QSVKgy0GSIfK", "RTVRTkb3k0ddGeS", "3x1K7a", "IebQy4NlHmq", "ELEARNING_SITE", "P_nGqlWFMhSAHv_", "ovbmWuS3ea6Z1ct", "a3Nhd", "QhIMfX9K7bh", "GyuXb", "3x1K7a", "iG", "dsImqmbIWV", "ELEARNING_SITE", "Bi4spFAf", "qFybVv1tO", "6c7Vcozk98i", "GyuXb", "ovbmWuS3ea6Z1ct", "rvKI", "qFybVv1tO", "R", "Yixn", "GyuXb", "5gulxO2beXQ", "YaJ4QSVKgy0GSIfK", "lsD02_NZ", "3x1K7a", "lXuVe8OhURhWIok", "HqdZnh", "KTY2EHub", "oH0qNuzy", "3RgaK5eb", "RTVRTkb3k0ddGeS", "6c7Vcozk98i", "ovbmWuS3ea6Z1ct", "2Z9zBXS1", "gX", "qFybVv1tO", "0CSrwX9EjwahClD", "dsImqmbIWV", "HqdZnh", "KTY2EHub", "IebQy4NlHmq", "l154pBMpyotYJw", "dsImqmbIWV", "6c7Vcozk98i", "R", "6c7Vcozk98i", "Ozc", "YK7i0xgrJonSY", "YMC", "iG", "xQewP", "17ztQqXoN", "qFybVv1tO", "ELEARNING_SITE", "3x1K7a", "HqdZnh", "sboMTTOkR3", "ELEARNING_SITE", "iG", "znp_j", "xQewP", "xQewP"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4_getOnProductReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("ELEARNING_SITE"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_5_getOnConfigurReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/QhIMfX9K7bh/configurations/AXASlkgOiT")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("AXASlkgOiT"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_6_getOnSwagger_jsonReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/swagger.json")
                .then()
                .statusCode(200);
    }
    
    
    @Test(timeout = 60000)
    public void test_7_putOnFeaturReturns200() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/iG")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/ELEARNING_SITE/features/Tcbb7TJ6tVGIAN"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(resolveLocation(location_productName, baseUrlOfSut + "/products/a3Nhd/features/Tcbb7TJ6tVGIAN"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Tcbb7TJ6tVGIAN"))
                .body("'description'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_8_postOnProductReturns201() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/a3Nhd")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_9_postOnConfigurReturns201() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/lXuVe8OhURhWIok/configurations/ls3uHHa")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_10_postOnFeaturReturns201() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE/features/P9GxF")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_11_postOnRequiresReturns201() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/Yixn/constraints/requires")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_12_postOnExcludesReturns201() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=fzO9")
                .post(baseUrlOfSut + "/products/xQewP/constraints/excludes")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_13_deleteOnConfigurReturns204() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/xQewP")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/a3Nhd/configurations/HcgFkzwgJGlC6"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/ELEARNING_SITE/configurations/HcgFkzwgJGlC6"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_14_deleteOnFeaturReturns204() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/ELEARNING_SITE/features/vo"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/ejZzrC0H1Uz/features/vo"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_15_getOnConfigurReturns204() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/products/_Vq7EAZY/configurations/VNpKV")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_16_deleteOnProductReturns204() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_17_deleteOnConstraintReturns204() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/1/constraints/1483458951")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_18_deleteOnConstraintReturns204() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/znp_j/constraints/-6515709119826277345")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
