import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-07T01:33:20.077-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 13 tests
 * <br>
*  Covered targets: 45
 * <br>
*  Used time: 0h 10m 14s
 * <br>
*  Needed budget for current results: 76%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/title/dl0I81/3Ulumt0C9lJ6yTtE")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-1"));
    }
    
    
    @Test(timeout = 60000)
    public void test_1_getOnPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/pat/X13I/Sx31mU_B")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_2_getOnPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/pat/DsUud74")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("none"));
    }
    
    
    @Test(timeout = 60000)
    public void test_3_getOnOrdered4ReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/ordered4/bLCxS2ckWsRIF2od/YXGh3LLcO/RUGZaT3BHqn_W/SNOrwLL2S3K")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4_getOnFilesuffixReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/filesuffix/w/35binO")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_5_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/dateparse/NhtNuIhCMsUQs/MIUokF95H2czOH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_6_getOnCookiReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/cookie/wFLrGvH_/y2XVoa4QPIRm/h1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_7_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    @Test(timeout = 60000)
    public void test_8_getOnNotypevarReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/notypevar/327/zCmqfwb0i")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("3"));
    }
    
    
    @Test(timeout = 60000)
    public void test_9_getOnCostfunReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/costfuns/601/GVdPHyDZWOlGR")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
    }
    
    
    @Test(timeout = 60000)
    public void test_10_getOnCostfunReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/costfuns/-961366065/pu3cGAg")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
    }
    
    
    @Test(timeout = 60000)
    public void test_11_getOnNotypevarReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/notypevar/-2074920283/hVAorO1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_12_getOnCalcReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/calc/Ajt5pI/0.6774882953725064/0.128505311165656")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.0"));
    }


}
