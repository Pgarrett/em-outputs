import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-10-17T17:19:02.138-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 6 tests
 * <br>
*  Covered targets: 18
 * <br>
*  Used time: 0h 10m 34s
 * <br>
*  Needed budget for current results: 78%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080/graphql";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: remainder
    // 			Action parameters:
    // 				a: ''
    // 				b: 'null'
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = a:''
    // 				org.evomaster.core.search.gene.optional.OptionalGene = b:'null'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: remainder
    @Test(timeout = 60000)
    public void test_0_qUERYOnRemainderReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { remainder  (b : null)         } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'remainder'", numberMatches(-1.0));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: expint
    // 			Action parameters:
    // 				n: '659'
    // 				x: ''
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = n:'659'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = x:''
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: expint
    @Test(timeout = 60000)
    public void test_1_qUERYOnExpintReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { expint  (n : 659)         } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'expint'", numberMatches(0.001519756838905775));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: triangleClassification
    // 			Action parameters:
    // 				a: '594'
    // 				b: '673'
    // 				c: 'null'
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = a:'594'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = b:'673'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = c:'null'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: triangleClassification
    @Test(timeout = 60000)
    public void test_2_qUERYOnTriangleClassificationReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { triangleClassification  (a : 594,b : 673,c : null)         } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'triangleClassification'", numberMatches(0.0));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: bessj
    // 			Action parameters:
    // 				n: '30'
    // 				x: '0.94649386'
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = n:'30'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = x:'0.94649386'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: bessj
    @Test(timeout = 60000)
    public void test_3_qUERYOnBessjReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { bessj  (n : 30,x : 0.94649386)         } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'bessj'", numberMatches(6.696318870931595E-43));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: gammq
    // 			Action parameters:
    // 				a: '0.0046149185'
    // 				x: 'null'
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = a:'0.0046149185'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = x:'null'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: gammq
    @Test(timeout = 60000)
    public void test_4_qUERYOnGammqReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { gammq  (a : 0.0046149185,x : null)         } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'gammq'", numberMatches(1.0));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: fisher
    // 			Action parameters:
    // 				m: '762'
    // 				n: '-424781628'
    // 				x: '0.113377854'
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = m:'762'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = n:'-424781628'
    // 				org.evomaster.core.search.gene.optional.OptionalGene = x:'0.113377854'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: fisher
    @Test(timeout = 60000)
    public void test_5_qUERYOnFisherReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { fisher  (m : 762,n : -424781628,x : 0.113377854)         } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'fisher'", numberMatches(0.0));
    }


}
