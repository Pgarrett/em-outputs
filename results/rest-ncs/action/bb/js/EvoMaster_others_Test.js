const superagent = require("superagent");
const EM = require("./EMTestUtils.js");
jest.setTimeout(60000);




/**
*  This file was automatically generated by EvoMaster on 2024-10-06T14:13:49.624-03:00[America/Argentina/Buenos_Aires]
*  
*  The generated test suite contains 4 tests
*  
*  Covered targets: 4
*  
*  Used time: 0h 10m 48s
*  
*  Needed budget for current results: 86%
*  
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/

const baseUrlOfSut = "http://localhost:8080";


beforeAll( async () => {
});








// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/api/remainder/{a}/{b}
// 			Action parameters:
// 				a: '-1192401296'
// 				b: '121'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = a:-1192401296
// 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = b:121
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/api/remainder/{a}/{b}
test("test_0_GetOnRemaindReturns400", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/remainder/-1192401296/121").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(400);
    expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/api/expint/{n}/{x}
// 			Action parameters:
// 				n: '-53019741'
// 				x: '0.42288256004937375'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = n:-53019741
// 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = x:0.42288256004937375
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/api/expint/{n}/{x}
test("test_1_GetOnExpintReturns400", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/expint/-53019741/0.42288256004937375").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(400);
    expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/api/bessj/{n}/{x}
// 			Action parameters:
// 				n: '2105075025'
// 				x: '0.5425212779568718'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = n:2105075025
// 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = x:0.5425212779568718
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/api/bessj/{n}/{x}
test("test_2_GetOnBessjReturns400", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/bessj/2105075025/0.5425212779568718").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(400);
    expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/api/fisher/{m}/{n}/{x}
// 			Action parameters:
// 				m: '143'
// 				n: '280253277'
// 				x: '0.2596943421471114'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = m:143
// 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = n:280253277
// 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = x:0.2596943421471114
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/api/fisher/{m}/{n}/{x}
test("test_3_GetOnFisherReturns400", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/fisher/143/280253277/0.2596943421471114").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(400);
    expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
});
