import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-03T00:32:47.248-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 5 tests
 * <br>
*  Covered targets: 19
 * <br>
*  Used time: 0h 15m 17s
 * <br>
*  Needed budget for current results: 68%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_getOnRemaindReturns400() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/remainder/-1467054278/708")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_1_getOnExpintReturns400() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/expint/-1244228603/0.2758070124530069")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_2_getOnRemaindReturns400() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/remainder/467/-2146992472")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_3_getOnBessjReturns400() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/bessj/-908445562/0.573126750462918")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_4_getOnFisherReturns400() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/fisher/15/347517415/0.40086647561599775")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
