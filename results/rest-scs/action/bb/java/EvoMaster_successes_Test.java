import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-03T00:48:17.191-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 13 tests
 * <br>
*  Covered targets: 45
 * <br>
*  Used time: 0h 15m 14s
 * <br>
*  Needed budget for current results: 54%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/title/RfFAj2EGTq/oAJD")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-1"));
    }
    
    
    @Test(timeout = 60000)
    public void test_1_getOnPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/pat/GzmlOnkJJ8R/SyO9TCykLOzD")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_2_getOnApiPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/pat/vlKXccnyKN")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("none"));
    }
    
    
    @Test(timeout = 60000)
    public void test_3_getOnOrdered4ReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/ordered4/x6050qFRmvHNNrmh/NJ2VFdh1gS/EdNJiK5DmJqBY/3DOvZojEDJ")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4_getOnFilesuffixReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/filesuffix/PDlASmEX5N/3WKkurhh_IbqH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_5_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/dateparse/XmyVrzqjgwFmT6/zMRHpvkgh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_6_getOnCookiReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/cookie/m7j7dl78/TUtax7sGBoscGsMt/60s3")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_7_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    @Test(timeout = 60000)
    public void test_8_getOnNotypevarReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/notypevar/200/nwjs8qWjUtKM2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("3"));
    }
    
    
    @Test(timeout = 60000)
    public void test_9_getOnCostfunReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/costfuns/457/mZAxtfR8V8z0MzU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
    }
    
    
    @Test(timeout = 60000)
    public void test_10_getOnCostfunReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/costfuns/-1211223729/P4BsxOjyBHx4b")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
    }
    
    
    @Test(timeout = 60000)
    public void test_11_getOnNotypevarReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/notypevar/-1944154451/gPhch7scVd24")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_12_getOnCalcReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/calc/8/0.9445039102175518/0.6431039663483966")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.0"));
    }


}
