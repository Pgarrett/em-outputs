#!/usr/bin/env python

import json
import unittest
import requests
import os
if os.name == 'nt':
    class timeout_decorator:
        @staticmethod
        def timeout(*args, **kwargs):
            return lambda f: f # return a no-op decorator
else:
    import timeout_decorator
from em_test_utils import *


#  This file was automatically generated by EvoMaster on 2024-10-06T15:07:23.602-03:00[America/Argentina/Buenos_Aires]
#  
#  The generated test suite contains 8 tests
#  
#  Covered targets: 8
#  
#  Used time: 0h 10m 56s
#  
#  Needed budget for current results: 63%
#  
#  This file contains test cases that represent failed calls, but not indicative of faults.
class EvoMaster_others_Test(unittest.TestCase):

    
    baseUrlOfSut = "http://localhost:8080"
    
    
    
    
    
    
    
    
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: PUT:/news/{id}
    # 			Action parameters:
    # 				id: 'T0Y'
    # 				body: '{"authorId":"BFvCFyrLO", "country":"wDEFeiaeJaNRFm11", "creationTime":"1965-03-14T16:22:45", "newsId":"Vyv7XFFGIj49_J", "text":"P9JY7ZIDUxcW7"}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = id:T0Y
    # 				org.evomaster.core.search.gene.optional.OptionalGene = body:{"authorId":"BFvCFyrLO", "country":"wDEFeiaeJaNRFm11", "creationTime":"1965-03-14T16:22:45", "newsId":"Vyv7XFFGIj49_J", "text":"P9JY7ZIDUxcW7"}
    # 				org.evomaster.core.search.gene.collection.EnumGene = contentType:application/json
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = sendUnquoteJsonString:true
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: PUT:/news/{id}
    @timeout_decorator.timeout(60)
    def test_0_PUT_on_new_returns_400(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"authorId\": \"BFvCFyrLO\", " + \
            " \"country\": \"wDEFeiaeJaNRFm11\", " + \
            " \"creationTime\": \"1965-03-14T16:22:45\", " + \
            " \"newsId\": \"Vyv7XFFGIj49_J\", " + \
            " \"text\": \"P9JY7ZIDUxcW7\" " + \
            " } "
        headers['Accept'] = "application/vnd.tsdes.news+json;charset=UTF-8;version=2"
        res_0 = requests \
                .put(self.baseUrlOfSut + "/news/T0Y",
                    headers=headers, data=body)
        
        assert res_0.status_code == 400
        assert "application/vnd.tsdes.news+json" in res_0.headers["content-type"]
        assert res_0.json()["status"] == 400.0
        assert res_0.json()["error"] == "Bad Request"
        assert res_0.json()["message"] == "JSON parse error: Cannot deserialize value of type `java.time.ZonedDateTime` from String \"1965-03-14T16:22:45\": Failed to deserialize java.time.ZonedDateTime: (java.time.format.DateTimeParseException) Text '1965-03-14T16:22:45' could not be parsed at index 19; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.ZonedDateTime` from String \"1965-03-14T16:22:45\": Failed to deserialize java.time.ZonedDateTime: (java.time.format.DateTimeParseException) Text '1965-03-14T16:22:45' could not be parsed at index 19\n at [Source: (PushbackInputStream); line: 1, column: 71] (through reference chain: org.tsdes.spring.examples.news.dto.NewsDto[\"creationTime\"])"
        assert res_0.json()["path"] == "/news/T0Y"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: POST:/news
    # 			Action parameters:
    # 				body: ''
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = body:
    # 				org.evomaster.core.search.gene.collection.EnumGene = contentType:application/json;charset=UTF-8
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = sendUnquoteJsonString:true
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: POST:/news
    @timeout_decorator.timeout(60)
    def test_1_POST_on_news_returns_400(self):
        
        headers = {}
        headers["content-type"] = "application/json;charset=UTF-8"
        body = {}
        body = " null "
        headers['Accept'] = "application/vnd.tsdes.news+json;charset=UTF-8;version=2"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/news",
                    headers=headers, data=body)
        
        assert res_0.status_code == 400
        assert "application/vnd.tsdes.news+json" in res_0.headers["content-type"]
        assert res_0.json()["status"] == 400.0
        assert res_0.json()["error"] == "Bad Request"
        assert res_0.json()["message"] == "Required request body is missing: public org.springframework.http.ResponseEntity<java.lang.Long> org.tsdes.spring.examples.news.api.NewsRestApi.createNews(org.tsdes.spring.examples.news.dto.NewsDto)"
        assert res_0.json()["path"] == "/news"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: DELETE:/news/{id}
    # 			Action parameters:
    # 				id: 'gjLqPQ'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = id:gjLqPQ
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: DELETE:/news/{id}
    @timeout_decorator.timeout(60)
    def test_2_DELETE_on_new_returns_400(self):
        
        headers = {}
        headers['Accept'] = "*/*"
        res_0 = requests \
                .delete(self.baseUrlOfSut + "/news/gjLqPQ",
                    headers=headers)
        
        assert res_0.status_code == 400
        assert res_0.text == ''
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: PUT:/news/{id}/text
    # 			Action parameters:
    # 				id: '124'
    # 				body: ''
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = id:124
    # 				org.evomaster.core.search.gene.optional.OptionalGene = body:
    # 				org.evomaster.core.search.gene.collection.EnumGene = contentType:text/plain
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = sendUnquoteJsonString:true
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: PUT:/news/{id}/text
    @timeout_decorator.timeout(60)
    def test_3_PUT_on_text_returns_400(self):
        
        headers = {}
        headers["content-type"] = "text/plain"
        body = ""
        headers['Accept'] = "application/vnd.tsdes.news+json;charset=UTF-8;version=2"
        res_0 = requests \
                .put(self.baseUrlOfSut + "/news/124/text",
                    headers=headers, data=body)
        
        assert res_0.status_code == 400
        assert "application/vnd.tsdes.news+json" in res_0.headers["content-type"]
        assert res_0.json()["status"] == 400.0
        assert res_0.json()["error"] == "Bad Request"
        assert res_0.json()["message"] == "Required request body is missing: public org.springframework.http.ResponseEntity<java.lang.Object> org.tsdes.spring.examples.news.api.NewsRestApi.updateText(java.lang.Long,java.lang.String)"
        assert res_0.json()["path"] == "/news/124/text"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/news/{id}
    # 			Action parameters:
    # 				id: '_2ubzz6lvrpH'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = id:_2ubzz6lvrpH
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/news/{id}
    @timeout_decorator.timeout(60)
    def test_4_GET_on_new_returns_404(self):
        
        headers = {}
        headers['Accept'] = "*/*"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/news/_2ubzz6lvrpH",
                    headers=headers)
        
        assert res_0.status_code == 404
        assert res_0.text == ''
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: PUT:/news/{id}/text
    # 			Action parameters:
    # 				id: '8862067394918886461'
    # 				body: '8862067394918886461'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = id:8862067394918886461
    # 				org.evomaster.core.search.gene.optional.OptionalGene = body:8862067394918886461
    # 				org.evomaster.core.search.gene.collection.EnumGene = contentType:text/plain
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = sendUnquoteJsonString:false
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: PUT:/news/{id}/text
    @timeout_decorator.timeout(60)
    def test_5_PUT_on_text_returns_404(self):
        
        headers = {}
        headers["content-type"] = "text/plain"
        body = "8862067394918886461"
        headers['Accept'] = "*/*"
        res_0 = requests \
                .put(self.baseUrlOfSut + "/news/8862067394918886461/text",
                    headers=headers, data=body)
        
        assert res_0.status_code == 404
        assert res_0.text == ''
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: PUT:/news/{id}
    # 			Action parameters:
    # 				id: 'R0OTQjWKbfdWqLs'
    # 				body: '{"authorId":"tA"}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = id:R0OTQjWKbfdWqLs
    # 				org.evomaster.core.search.gene.optional.OptionalGene = body:{"authorId":"tA"}
    # 				org.evomaster.core.search.gene.collection.EnumGene = contentType:application/json
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = sendUnquoteJsonString:false
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: PUT:/news/{id}
    @timeout_decorator.timeout(60)
    def test_6_PUT_on_new_returns_404(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = {}
        body = " { " + \
            " \"authorId\": \"tA\" " + \
            " } "
        headers['Accept'] = "*/*"
        res_0 = requests \
                .put(self.baseUrlOfSut + "/news/R0OTQjWKbfdWqLs",
                    headers=headers, data=body)
        
        assert res_0.status_code == 404
        assert res_0.text == ''
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: DELETE:/news/{id}
    # 			Action parameters:
    # 				id: '73'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = id:73
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: DELETE:/news/{id}
    @timeout_decorator.timeout(60)
    def test_7_DELETE_on_new_returns_404(self):
        
        headers = {}
        headers['Accept'] = "*/*"
        res_0 = requests \
                .delete(self.baseUrlOfSut + "/news/73",
                    headers=headers)
        
        assert res_0.status_code == 404
        assert res_0.text == ''


if __name__ == '__main__':
    unittest.main()
