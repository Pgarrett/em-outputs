const superagent = require("superagent");
const EM = require("./EMTestUtils.js");
jest.setTimeout(60000);




/**
*  This file was automatically generated by EvoMaster on 2024-10-06T12:56:49.603-03:00[America/Argentina/Buenos_Aires]
*  
*  The generated test suite contains 7 tests
*  
*  Covered targets: 14
*  
*  Used time: 0h 10m 59s
*  
*  Needed budget for current results: 98%
*  
*  This file contains test cases that represent successful calls.
*/

const baseUrlOfSut = "http://localhost:8080";


beforeAll( async () => {
});








// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/products/{productName}/configurations
// 			Action parameters:
// 				productName: 'GBLklp6ItFu'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = productName:GBLklp6ItFu
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/products/{productName}/configurations
test("test_0_GetOnConfigurationsReturns200", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/products/GBLklp6ItFu/configurations").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.length).toBe(0);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/products/{productName}/features
// 			Action parameters:
// 				productName: 'o'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = productName:o
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/products/{productName}/features
test("test_1_GetOnFeaturesReturns200", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/products/o/features").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.length).toBe(0);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/products
// 			Action parameters:
// 			Genes:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/products
test("test_2_GetOnProductsReturns200", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/products").set('Accept', "application/json")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.length).toBe(54);
    expect(res_0.body[0]).toBe("ELEARNING_SITE");
    expect(res_0.body[1]).toBe("h3yK");
    expect(res_0.body[2]).toBe("j34TyA9a");
    // Skipping assertions on the remaining 51 elements. This limit of 3 elements can be increased in the configurations
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/swagger.json
// 			Action parameters:
// 			Genes:
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/swagger.json
test("test_3_GetOnSwagger_jsonReturns200", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/swagger.json").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: POST:/products/{productName}
// 			Action parameters:
// 				productName: 'WOjs'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = productName:WOjs
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: POST:/products/{productName}
test("test_4_PostOnProductReturns201", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut + "/products/WOjs").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(201);
    expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: DELETE:/products/{productName}/constraints/{constraintId}
// 			Action parameters:
// 				productName: 'JCJ3zLPLlXSp'
// 				constraintId: '1329752696'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = productName:JCJ3zLPLlXSp
// 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = constraintId:1329752696
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: DELETE:/products/{productName}/constraints/{constraintId}
test("test_5_DeleteOnConstraintReturns204", async () => {
    
    const res_0 = await superagent
            .delete(baseUrlOfSut + "/products/JCJ3zLPLlXSp/constraints/1329752696").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(204);
    expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/products/{productName}/configurations/{configurationName}
// 			Action parameters:
// 				productName: 'ZtAuDKl4QTexj'
// 				configurationName: 'HQAkwXm5gZsmN1KO'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = productName:ZtAuDKl4QTexj
// 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = configurationName:HQAkwXm5gZsmN1KO
// 	Evaluated Actions:
// 		org.evomaster.core.problem.rest.RestCallAction: GET:/products/{productName}/configurations/{configurationName}
test("test_6_GetOnConfigurReturns204", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/products/ZtAuDKl4QTexj/configurations/HQAkwXm5gZsmN1KO").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(204);
    expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
});
