import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-02T23:57:41.205-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 19 tests
 * <br>
*  Covered targets: 65
 * <br>
*  Used time: 0h 16m 11s
 * <br>
*  Needed budget for current results: 39%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_getOnFeaturesReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/FjS3l38pPQo9/configurations/VTSFjGC/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_1_getOnProductReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/2km7pz5eUFIsA")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("2km7pz5eUFIsA"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_2_getOnFeaturesReturns2Elements() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/M6QJ/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("nflzyWHWPpUM"))
                .body("[0].'description'", nullValue())
                .body("[1].'name'", containsString("k0SbU1rSPSmALe"))
                .body("[1].'description'", containsString("5RbJi1fxxTX4Dz"));
    }
    
    
    @Test(timeout = 60000)
    public void test_3_getOnConfigurationsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/J35lEVB/configurations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_4_getOnProductsReturns240Elements() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(240))
                .body("", hasItems("ELEARNING_SITE", "2km7pz5eUFIsA", "ELEARNING_SITE", "ELEARNING_SITE", "ELEARNING_SITE", "ELEARNING_SITE", "ELEARNING_SITE", "2km7pz5eUFIsA", "ELEARNING_SITE", "RF_JrAKUYyy", "2km7pz5eUFIsA", "2km7pz5eUFIsA", "M6QJ", "pmolx", "2km7pz5eUFIsA", "FjS3l38pPQo9", "RF_JrAKUYyy", "2km7pz5eUFIsA", "ELEARNING_SITE", "nX1", "2km7pz5eUFIsA", "FjS3l38pPQo9", "nX1", "Nv1y61tdMHR", "nX1", "ELEARNING_SITE", "ELEARNING_SITE", "M6QJ", "31TVc2QdQaBIYOxs", "M6QJ", "nX1", "31TVc2QdQaBIYOxs", "q", "RF_JrAKUYyy", "ELEARNING_SITE", "M6QJ", "2km7pz5eUFIsA", "31TVc2QdQaBIYOxs", "pmolx", "ij5TFlR_1mh_JHjH", "2km7pz5eUFIsA", "RF_JrAKUYyy", "LK07Usi", "ELEARNING_SITE", "q", "2km7pz5eUFIsA", "FjS3l38pPQo9", "X_l01of", "RF_JrAKUYyy", "X_l01of", "M6QJ", "31TVc2QdQaBIYOxs", "F", "31TVc2QdQaBIYOxs", "M6QJ", "LK07Usi", "RF_JrAKUYyy", "LK07Usi", "n56E8rlFOR", "nX1", "M6QJ", "ij5TFlR_1mh_JHjH", "ELEARNING_SITE", "ZD30t82IHzvtVu", "M6QJ", "31TVc2QdQaBIYOxs", "pmolx", "JpQh5qBele", "31TVc2QdQaBIYOxs", "n56E8rlFOR", "uTJW", "CvgG_lBy44IrQ", "ij5TFlR_1mh_JHjH", "oG", "2km7pz5eUFIsA", "M6QJ", "31TVc2QdQaBIYOxs", "q", "ij5TFlR_1mh_JHjH", "ij5TFlR_1mh_JHjH", "2km7pz5eUFIsA", "ij5TFlR_1mh_JHjH", "2km7pz5eUFIsA", "FjS3l38pPQo9", "F", "MotKWk2_", "uTJW", "foPisSd", "sGCD", "ij5TFlR_1mh_JHjH", "ELEARNING_SITE", "FjS3l38pPQo9", "oG", "LK07Usi", "JpQh5qBele", "ij5TFlR_1mh_JHjH", "ELEARNING_SITE", "MotKWk2_", "sGCD", "oG", "d_rbuJt", "s4cHPnqu2p", "F", "ELEARNING_SITE", "LK07Usi", "FjS3l38pPQo9", "31TVc2QdQaBIYOxs", "nX1", "q", "xzuDN_1anCuBWg6", "CvgG_lBy44IrQ", "q", "LK07Usi", "31TVc2QdQaBIYOxs", "FjS3l38pPQo9", "n56E8rlFOR", "UDsvMm7UN94", "C8G", "ZD30t82IHzvtVu", "X_l01of", "Nv1y61tdMHR", "d_rbuJt", "aGgMK2QjZhTpZ", "M6QJ", "31TVc2QdQaBIYOxs", "C8G", "FjS3l38pPQo9", "pmolx", "88PKDEV", "uTJW", "MotKWk2_", "oG", "uTJW", "q", "ELEARNING_SITE", "nSGNiE69EjspRU", "MotKWk2_", "FjS3l38pPQo9", "6euRPZTJdDs05tt", "6euRPZTJdDs05tt", "sGCD", "31TVc2QdQaBIYOxs", "Nv1y61tdMHR", "WKqiO", "C8G", "JpQh5qBele", "aGgMK2QjZhTpZ", "d_rbuJt", "ek_PLs", "ALgYi_k05UML3ya8", "foPisSd", "RDGnMZdDn6NYVn0h", "ujf", "iBWHd", "X_l01of", "EmEjcQ", "ij5TFlR_1mh_JHjH", "RF_JrAKUYyy", "ij5TFlR_1mh_JHjH", "BfSb_", "RF_JrAKUYyy", "2km7pz5eUFIsA", "FhCM", "nSGNiE69EjspRU", "nX1", "RF_JrAKUYyy", "30KRoxV", "UDsvMm7UN94", "ZenvqeEWC", "RF_JrAKUYyy", "0a5q4Er", "n56E8rlFOR", "RDGnMZdDn6NYVn0h", "F", "BfSb_", "o8In7hno", "sT", "Yg", "RDGnMZdDn6NYVn0h", "uTJW", "_9F1E", "xzuDN_1anCuBWg6", "s4cHPnqu2p", "YeGnI", "BKoNBt6KO", "MotKWk2_", "ek_PLs", "88PKDEV", "88PKDEV", "LK07Usi", "s4cHPnqu2p", "LK07Usi", "RDGnMZdDn6NYVn0h", "X_l01of", "foPisSd", "31TVc2QdQaBIYOxs", "YeGnI", "F", "30KRoxV", "KQsI6HVeRQfDR7", "88PKDEV", "RDGnMZdDn6NYVn0h", "ALgYi_k05UML3ya8", "_9F1E", "sGCD", "30KRoxV", "aGgMK2QjZhTpZ", "JpQh5qBele", "uTJW", "hOEDazGXoFPKE", "Vr7btzWy", "foPisSd", "oG", "9R", "d_rbuJt", "F", "X_l01of", "JpQh5qBele", "LK07Usi", "FjS3l38pPQo9", "6euRPZTJdDs05tt", "zLhlcLlBwVtF", "BKoNBt6KO", "WKqiO", "ujf", "nX1", "PUYLm6ZaSSqRNsA", "o8In7hno", "pmolx", "foPisSd", "aGgMK2QjZhTpZ", "YeGnI", "30KRoxV", "2km7pz5eUFIsA", "ELEARNING_SITE", "2km7pz5eUFIsA", "ELEARNING_SITE", "ZD30t82IHzvtVu", "FjS3l38pPQo9", "RF_JrAKUYyy"));
    }
    
    
    @Test(timeout = 60000)
    public void test_5_getOnConfigurReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/ELEARNING_SITE/configurations/x")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("x"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_6_getOnSwagger_jsonReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/swagger.json")
                .then()
                .statusCode(200);
    }
    
    
    @Test(timeout = 60000)
    public void test_7_putOnFeaturReturns200() throws Exception {
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(baseUrlOfSut + "/products/ELEARNING_SITE/features/DI")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("DI"))
                .body("'description'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_8_postOnProductReturns201() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/2km7pz5eUFIsA")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_9_postOnConfigurReturns201() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/2km7pz5eUFIsA/configurations/bCHX4vcpCb4sgP5B")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_10_postOnExcludesReturns201() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE/constraints/excludes")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_11_postOnRequiresReturns201() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/FjS3l38pPQo9/constraints/requires")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_12_postOnFeaturReturns201() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE/features/yQ_Erw_E")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_13_deleteOnConfigurReturns204() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/RF_JrAKUYyy")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/FjS3l38pPQo9/configurations/GgMLH5K1c3AkD"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/wSURjcPW7ZC/configurations/GgMLH5K1c3AkD"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_14_deleteOnFeaturReturns204() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/2km7pz5eUFIsA")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=23D")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/o86A1pMhsizghXhH/features/7"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/2km7pz5eUFIsA/features/7"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_15_deleteOnProductReturns204() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/F")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_16_getOnConfigurReturns204() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/products/1ky/configurations/IT2D4gCaqerl")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_17_deleteOnConstraintReturns204() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/T2xRCByzQq/constraints/813")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_18_deleteOnConstraintReturns204() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ij5TFlR_1mh_JHjH/constraints/-1254034303827301575")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
