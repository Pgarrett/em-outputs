#!/usr/bin/env python

import json
import unittest
import requests
import os
if os.name == 'nt':
    class timeout_decorator:
        @staticmethod
        def timeout(*args, **kwargs):
            return lambda f: f # return a no-op decorator
else:
    import timeout_decorator
from em_test_utils import *


#  This file was automatically generated by EvoMaster on 2024-10-06T12:45:48.194-03:00[America/Argentina/Buenos_Aires]
#  
#  The generated test suite contains 6 tests
#  
#  Covered targets: 12
#  
#  Used time: 0h 10m 59s
#  
#  Needed budget for current results: 96%
#  
#  This file contains test cases that represent successful calls.
class EvoMaster_successes_Test(unittest.TestCase):

    
    baseUrlOfSut = "http://localhost:8080"
    
    
    
    
    
    
    
    
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/products/{productName}/configurations
    # 			Action parameters:
    # 				productName: 'Tcg0KzMGV'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = productName:Tcg0KzMGV
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/products/{productName}/configurations
    @timeout_decorator.timeout(60)
    def test_0_GET_on_configurations_returns_200(self):
        
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/products/Tcg0KzMGV/configurations",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert len(res_0.json()) == 0
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/products
    # 			Action parameters:
    # 			Genes:
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/products
    @timeout_decorator.timeout(60)
    def test_1_GET_on_products_returns_200(self):
        
        headers = {}
        headers['Accept'] = "application/json"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/products",
                    headers=headers)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert len(res_0.json()) == 30
        assert res_0.json()[0] == "ELEARNING_SITE"
        assert res_0.json()[1] == "h3yK"
        assert res_0.json()[2] == "j34TyA9a"
        # Skipping assertions on the remaining 27 elements. This limit of 3 elements can be increased in the configurations
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/swagger.json
    # 			Action parameters:
    # 			Genes:
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/swagger.json
    @timeout_decorator.timeout(60)
    def test_2_GET_on_swagger_json_returns_200(self):
        
        headers = {}
        headers['Accept'] = "*/*"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/swagger.json",
                    headers=headers)
        
        assert res_0.status_code == 200
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: POST:/products/{productName}
    # 			Action parameters:
    # 				productName: 'BQZawY'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = productName:BQZawY
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: POST:/products/{productName}
    @timeout_decorator.timeout(60)
    def test_3_POST_on_product_returns_201(self):
        
        headers = {}
        headers['Accept'] = "*/*"
        res_0 = requests \
                .post(self.baseUrlOfSut + "/products/BQZawY",
                    headers=headers)
        
        assert res_0.status_code == 201
        assert res_0.text == ''
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/products/{productName}/configurations/{configurationName}
    # 			Action parameters:
    # 				productName: 'R'
    # 				configurationName: '7bEv2hRHq3W9Y9w'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = productName:R
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = configurationName:7bEv2hRHq3W9Y9w
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: GET:/products/{productName}/configurations/{configurationName}
    @timeout_decorator.timeout(60)
    def test_4_GET_on_configur_returns_204(self):
        
        headers = {}
        headers['Accept'] = "*/*"
        res_0 = requests \
                .get(self.baseUrlOfSut + "/products/R/configurations/7bEv2hRHq3W9Y9w",
                    headers=headers)
        
        assert res_0.status_code == 204
        assert res_0.text == ''
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: DELETE:/products/{productName}/constraints/{constraintId}
    # 			Action parameters:
    # 				productName: 'xX'
    # 				constraintId: '-1006003074'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = productName:xX
    # 				org.evomaster.core.search.gene.optional.CustomMutationRateGene = constraintId:-1006003074
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.rest.RestCallAction: DELETE:/products/{productName}/constraints/{constraintId}
    @timeout_decorator.timeout(60)
    def test_5_DELETE_on_constraint_returns_204(self):
        
        headers = {}
        headers['Accept'] = "*/*"
        res_0 = requests \
                .delete(self.baseUrlOfSut + "/products/xX/constraints/-1006003074",
                    headers=headers)
        
        assert res_0.status_code == 204
        assert res_0.text == ''


if __name__ == '__main__':
    unittest.main()
