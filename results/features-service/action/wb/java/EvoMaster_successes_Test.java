import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-03T14:22:50.957-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 6 tests
 * <br>
*  Covered targets: 147
 * <br>
*  Used time: 0h 15m 5s
 * <br>
*  Needed budget for current results: 90%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONSTRAINT_EXCLUDES","CONSTRAINT_REQUIRES","FEATURE","PRODUCT","PRODUCT_CONFIGURATION","PRODUCT_CONFIGURATION_ACTIVED_FEATURES","constraint_excludes","constraint_requires","product"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_getOnSwagger_jsonReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/swagger.json")
                .then()
                .statusCode(200);
    }
    
    
    @Test(timeout = 60000)
    public void test_1_getOnConfigurationsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/e3AkA/configurations?EMextraParam123=_EM_12_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_2_postOnProductReturns201UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 19L)
                .d("NAME", "\"uU\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 18L)
                .d("NAME", "\"_EM_48_XYZ_\"")
                .d("VALID", "false")
                .r("PRODUCT_ID", 19L)
            .and().insertInto("PRODUCT", 21L)
                .d("NAME", "\"c\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 20L)
                .d("ID", "325")
                .r("FOR_PRODUCT_ID", 19L)
                .d("EXCLUDED_FEATURE_NAME", "\"_EM_49_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "\"\"")
            .and().insertInto("PRODUCT", 23L)
                .d("NAME", "\"_EM_50_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 22L)
                .d("ID", "-1296")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "\"W2c2FyC6Y19n\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/hvF4RS")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_3_deleteOnConstraintReturns204() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/cjJrJejZ46/constraints/66?EMextraParam123=_EM_8_XYZ_")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_4_deleteOnConstraintReturns204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 19L)
                .d("NAME", "\"uU\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 18L)
                .d("NAME", "\"_EM_48_XYZ_\"")
                .d("VALID", "false")
                .r("PRODUCT_ID", 19L)
            .and().insertInto("PRODUCT", 21L)
                .d("NAME", "\"c\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 20L)
                .d("ID", "325")
                .r("FOR_PRODUCT_ID", 19L)
                .d("EXCLUDED_FEATURE_NAME", "\"_EM_49_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "\"\"")
            .and().insertInto("PRODUCT", 23L)
                .d("NAME", "\"_EM_50_XYZ_\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 22L)
                .d("ID", "-1296")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("REQUIRED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "\"W2c2FyC6Y19n\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/hvF4RS/constraints/-32609")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_5_getOnConfigurReturns204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 93L)
                .d("NAME", "\"47eZKBzoSWNqb\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 92L)
                .d("NAME", "\"uL9\"")
                .d("VALID", "NULL")
                .r("PRODUCT_ID", 93L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/uGkPQtQakl5oPmM/configurations/Ht3zjxdvnuJf")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
