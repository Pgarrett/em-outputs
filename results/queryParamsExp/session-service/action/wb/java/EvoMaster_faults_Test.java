import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.mongo.dsl.MongoDsl.mongo;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-12-25T17:29:42.373-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 95 tests
 * <br>
*  Covered targets: 264
 * <br>
*  Used time: 0h 15m 15s
 * <br>
*  Needed budget for current results: 88%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.cbioportal.session_service.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) DELETE:/api/sessions/{source}/{type}/{id}
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_0_deleteOnWithQueryParamShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. framework_code DELETE:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/sessions/ONnj/virtual_study/x;6?EMextraParam123=42")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/ONnj/virtual_study/x;6"));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/api/sessions/{source}/{type}/{id}
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_1_deleteOnSessionShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. framework_code DELETE:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/L;nkh/settings/_UL")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/L;nkh/settings/_UL"));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/api/sessions/{source}/{type}/{id}
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_2_deleteOnSessionShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. framework_code DELETE:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/LNnl/custom_gene_list/%5E%3C;")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/LNnl/custom_gene_list/%5E%3C;"));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/api/sessions/{source}/{type}/{id}
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_3_deleteOnSessionShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. framework_code DELETE:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/LNnk/genomic_chart/%5E;=")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/LNnk/genomic_chart/%5E;="));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/api/sessions/{source}/{type}/{id}
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_4_deleteOnSessionShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. framework_code DELETE:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/sZWA;ap/main_session/_EM_10682_XYZ_")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/sZWA;ap/main_session/_EM_10682_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/api/sessions/{source}/{type}/{id}
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_5_deleteOnSessionShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. framework_code DELETE:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/ONnj/EVOMASTER/F%3E;")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/ONnj/EVOMASTER/F%3E;"));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/api/sessions/{source}/{type}/{id}
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_6_deleteOnSessionShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. framework_code DELETE:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/LNnk/group/b;G")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/LNnk/group/b;G"));
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/api/sessions/{source}/{type}/{id}
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_7_deleteOnSessionShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. framework_code DELETE:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/NNnl/custom_data/;%3C=")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/NNnl/custom_data/;%3C="));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_8_postOnFetchShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. framework_code POST:/api/sessions/{source}/{type}/query/fetch
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Response status 500 not defined for path '/api/sessions/{source}/{type}/query/fetch'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_15_XYZ_")
                .contentType("application/json")
                .body(" \"Cany\" ")
                .post(baseUrlOfSut + "/api/sessions/Isst;%3EW=VIGMEU/virtual_study/query/fetch?EMextraParam123=_EM_14_XYZ_")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/Isst;%3EW=VIGMEU/virtual_study/query/fetch"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/api/sessions/{source}/{type}/{id}
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_9_putOnSessionShowsFaults_100_200UsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"j7jJ\", \"checksum\":\"2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"X\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"9de240fcf04b182ae206aac9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"DCjXs4Su9q1\", \"checksum\":\"Jv2FST\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mUbkiyCEFxPO\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5ca5a1ecdabb34ddb4ed39b4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault100. HTTP Status 500. framework_code PUT:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"AuzvGxN7igKNC\" ")
                .put(baseUrlOfSut + "/api/sessions/APz/group/AuzvGxN7ig;NB?EMextraParam123=_EM_1852_XYZ_")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/APz/group/AuzvGxN7ig;NB"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/sessions/{source}/{type}
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_10_postOnSessionShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. org/cbioportal/session_service/domain/Session_74_setData POST:/api/sessions/{source}/{type}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 500 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" \"_EM_17_XYZ_\" ")
                .post(baseUrlOfSut + "/api/sessions/_EM_16_XYZ_/comparison_session")
                .then()
                .statusCode(500)// org/cbioportal/session_service/domain/Session_74_setData
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/_EM_16_XYZ_/comparison_session"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/api/sessions/{source}/{type}
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_11_getOnSessionShowsFaults_100_200UsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"Qk\", \"checksum\":\"gUUU]U\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"custom_gene_listw\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"6a50376c86c1bfe2bdeabdb5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"_EM_9310_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7090_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"1cf71b10f0e7bbfc69ea4abc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJoL\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_UMU9U53_UYU_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"dae82a82cb50c87cc9f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"NSljK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c3dba4cffe79f7bde1106ed8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"UEUUUU41_U[Z\", \"checksum\":\"QWTtUt0y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"fxdY\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_9311_XYZ_K\", \"checksum\":\"1UwlUiUUdQU_r\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"group\", \"_id\":{\"$oid\":\"b91295d93b1ef1d5debe29be\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAl\", \"checksum\":\"_EM_9313_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7085_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5610aff8486b489dbcc0fa5b\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_9314_XYZ_\", \"checksum\":\"A83ozDDKXwEK7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6322_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"77205ad94dc29c713bbccd37\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_11591_XYZ_\", \"checksum\":\"c0ulTIv2YQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"main_session\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"a3d4dca1c1f063ac8d0f8d2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCUSRUU^zUUS5mYA\", \"checksum\":\"aknZMUks\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_9315_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"d9e2619bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\";OGjJ0cZNc0\", \"checksum\":\"3a95E2jGfLtQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7092_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"22b9d5b6eaebf4eb62c9bc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9r\", \"checksum\":\"_EM_7093_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"UNK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"tpciL\", \"checksum\":\"DKWZ04R_HJh3\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"vSqszfpzkenc\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"cdb99b11c719d7604db58f0f\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"9H85NRK8tiq2\", \"checksum\":\"YkxeDrw\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"2J\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"c69d55b2f73ed6e8663fcabf\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault100. HTTP Status 500. framework_code GET:/api/sessions/{source}/{type}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Response status 500 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22EM_tainted_map%22:%22_EM_5121_XYZ_%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D/EVOMASTER")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22EM_tainted_map%22:%22_EM_5121_XYZ_%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D/EVOMASTER"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/api/sessions/{source}/{type}/query
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_12_getOnQueryShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. org/cbioportal/session_service/domain/internal/SessionRepositoryImpl_104_findBySourceAndTypeAndQuery GET:/api/sessions/{source}/{type}/query
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 500 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/_EM_772_XYZ_/group/query?" + 
                    "field=_&" + 
                    "value=_EM_773_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500)// org/cbioportal/session_service/domain/internal/SessionRepositoryImpl_104_findBySourceAndTypeAndQuery
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/_EM_772_XYZ_/group/query"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/api/sessions/{source}/{type}
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_13_postOnSessionShowsFaults_100_200UsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"Qk\", \"checksum\":\"gUUU]U\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"custom_gene_listw\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"6a50376c86c1bfe2bdeabdb5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"_EM_9310_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7090_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"1cf71b10f0e7bbfc69ea4abc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJoL\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_UMU9U53_UYU_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"dae82a82cb50c87cc9f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"NSljK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c3dba4cffe79f7bde1106ed8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"UEUUUU41_U[Z\", \"checksum\":\"QWTtUt0y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"fxdY\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_9311_XYZ_K\", \"checksum\":\"1UwlUiUUdQU_r\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"group\", \"_id\":{\"$oid\":\"b91295d93b1ef1d5debe29be\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAl\", \"checksum\":\"_EM_9313_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7085_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5610aff8486b489dbcc0fa5b\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_9314_XYZ_\", \"checksum\":\"A83ozDDKXwEK7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6322_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"77205ad94dc29c713bbccd37\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_11591_XYZ_\", \"checksum\":\"c0ulTIv2YQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"main_session\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"a3d4dca1c1f063ac8d0f8d2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCUSRUU^zUUS5mYA\", \"checksum\":\"aknZMUks\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_9315_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"d9e2619bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\";OGjJ0cZNc0\", \"checksum\":\"3a95E2jGfLtQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7092_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"22b9d5b6eaebf4eb62c9bc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9r\", \"checksum\":\"_EM_7093_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"UNK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"tpciL\", \"checksum\":\"DKWZ04R_HJh3\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"vSqszfpzkenc\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"cdb99b11c719d7604db58f0f\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"9H85NRK8tiq2\", \"checksum\":\"YkxeDrw\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"2J\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"c69d55b2f73ed6e8663fcabf\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault100. HTTP Status 500. framework_code POST:/api/sessions/{source}/{type}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 500 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {\\n                    \\\"EM_tainted_map\\\":\\\"_EM_5121_XYZ_\\\"\\n                    } ")
                .post(baseUrlOfSut + "/api/sessions/%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22EM_tainted_map%22:%22_EM_5121_XYZ_%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D/custom_data")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22EM_tainted_map%22:%22_EM_5121_XYZ_%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D/custom_data"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/api/sessions/{source}/{type}/{id}
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_14_getOnSessionShowsFaults_100_200UsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"Qk\", \"checksum\":\"gUUU]U\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"custom_gene_listw\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"6a50376c86c1bfe2bdeabdb5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"_EM_9310_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7090_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"1cf71b10f0e7bbfc69ea4abc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJoL\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_UMU9U53_UYU_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"dae82a82cb50c87cc9f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"NSljK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c3dba4cffe79f7bde1106ed8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"UEUUUU41_U[Z\", \"checksum\":\"QWTtUt0y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"fxdY\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_9311_XYZ_K\", \"checksum\":\"1UwlUiUUdQU_r\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"group\", \"_id\":{\"$oid\":\"b91295d93b1ef1d5debe29be\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAl\", \"checksum\":\"_EM_9313_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7085_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5610aff8486b489dbcc0fa5b\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_9314_XYZ_\", \"checksum\":\"A83ozDDKXwEK7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"eNd4rIi_PS8g\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"87215ad94dc19c713bbccd37\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o9\", \"checksum\":\"c0ulTIv2YQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7091_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"a3d4dca1c1f063ac8d0f8d2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCUSRUU^zUUS5mYA\", \"checksum\":\"aknZMUks\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_9315_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"d9e2619bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\";OGjJ0cZNc0\", \"checksum\":\"3a95E2jGfLtQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7092_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"22b9d5c6ebdbf4eb53cabc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9r\", \"checksum\":\"_EM_7093_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"UNK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"tpciL\", \"checksum\":\"DKWZ04R_HJh2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"vSqszfnzkenc\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"cdb99b11c719d7604db58f0f\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"9H85NRK8tiq2\", \"checksum\":\"YkxeDrw\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"2J\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"c69d55b2f73ed6e8663fcabf\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault100. HTTP Status 500. framework_code GET:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/D8owYPHaOesdK/virtual_study/;OGjJ0cZNc0")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/D8owYPHaOesdK/virtual_study/;OGjJ0cZNc0"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/api/sessions/{source}/{type}/{id}
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_15_getOnSessionShowsFaults_100_200UsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_7089_XYZ_\", \"checksum\":\"hUUU]U\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"false\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3bddacda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"_EM_7084_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7090_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"0df71b10f0e7cafd6aeb4abc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"group\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"NSljK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c3dba4cffe79f7bde1106ed8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"gEM_5341_XYZ\", \"checksum\":\"QWTtUt0y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"fxdY\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQ\u0080x\", \"checksum\":\"1UwlUiUUdSU_r\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b91295d93a1ef1d5debe29be\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAl\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7085_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5610aff8486b489dbdc0fa5b\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Z\", \"checksum\":\"_EM_6321_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"D8owYPHaOesdK\", \"type\":\"settings\", \"_id\":{\"$oid\":\"77215ae93dc19d713caccd46\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o9\", \"checksum\":\"c0ulTIv2Y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7091_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"a3d3cc91c2ff73ac8c008e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCUURUv^zSOS3mU\", \"checksum\":\"aknZMUk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGkR\", \"type\":\"group\", \"_id\":{\"$oid\":\"e9e2619bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\";OGjJ0cZNc0\", \"checksum\":\"3a95E2jGfLtQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7092_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"22b9d5b6eaebf4eb62c9bc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9\", \"checksum\":\"_EM_7093_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mNK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault100. HTTP Status 500. framework_code GET:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/D8owYPHaOesdK/main_session/;OGjJ0cZNc0")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/D8owYPHaOesdK/main_session/;OGjJ0cZNc0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/sessions/{source}/{type}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_16_getOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_93_XYZ_")
                .get(baseUrlOfSut + "/api/sessions/_EM_91_XYZ_/virtual_study")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/sessions/{source}/{type}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_17_getOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/_EM_236_XYZ_/custom_data?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/sessions/{source}/{type}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_18_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5339_XYZ_\", \"checksum\":\"rucOUd\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"7b51375c86b2bec3ccdacd95\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"UUM_U340_PYUU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_781_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"0df71b10f0e7cafd6aea4abc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"group\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDj\", \"checksum\":\"NSljG\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE7sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c3dba4cffe79f7bde1106ed8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_5341_XQZ\", \"checksum\":\"Mzzd5txLCn0\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6882_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQxx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAl\", \"checksum\":\"23mLkd6ygRp\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"D8owYPHaOesdK\", \"type\":\"settings\", \"_id\":{\"$oid\":\"5610aff8486b489dbdc0fa5b\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Z\", \"checksum\":\"_EM_6321_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"D8owYPHaOesdK\", \"type\":\"settings\", \"_id\":{\"$oid\":\"77215ae93dc19d713caccd46\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2Y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGM^8aNk6FrYNEWwZ\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"a3d3cc91c2ff73ac8c008e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_8629_XYZ_\", \"checksum\":\"aknZMUk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnUUlCkR\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"eae2619bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"7OGjJ0cZNc0\", \"checksum\":\"2XXqKArW1fVqf4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hiD1lxtRpYE8_6g\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22b9d5b6eaebf4eb62c9bc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9\", \"checksum\":\"_EM_8630_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mNK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/group/group")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_19_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"BkSxdgQRrhGuxY81\", \"checksum\":\"I3zv1bhz\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"RfW_Ak6aCWdNfxb\", \"type\":\"group\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_4840_XYZ_\", \"checksum\":\"_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"e0zodXH\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fef7fb10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"settings\", \"_id\":{\"$oid\":\"cbd92981cb50d97be8f2c0cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"qDqpv2Am_m5\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"yxas3tUac0\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"c4dca6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"u\", \"checksum\":\"7RILZgWOgG\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"jSVO7Xm5d5v\", \"type\":\"settings\", \"_id\":{\"$oid\":\"6fb23ddc48808deae3c1ac94\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"FXhooLhcKxoKZ2H\", \"checksum\":\"2ztM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"nTVdOSGfDKSWEs\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"f7ac16ed33cff6febe9d4b3a\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/_EM_783_XYZ_/custom_gene_list/query/fetch?EMextraParam123=_EM_663_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/sessions/{source}/{type}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_20_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5339_XYZ_\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddacda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"_EM_5340_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_781_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_6347_XYZ_\", \"checksum\":\"_EM_5208_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c4dab5cefd7906bdd0105fc8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_5341_XYZ_\", \"checksum\":\"_EM_5342_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"j\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Z\", \"checksum\":\"_EM_5343_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"OAYGR\", \"type\":\"settings\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2Y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWwZ\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"a2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zSOS3my\", \"checksum\":\"aknZMUk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"eae2609bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"7OGjJ0cZNc0\", \"checksum\":\"2XXqKArW1fVqf4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6348_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22b8d5c6eaebf5fc72b9cc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mNK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/main_session/main_session")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/sessions/{source}/{type}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_21_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"_EM_5268_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3Z\", \"type\":\"settings\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"U=McUUU8UXYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"WbFedC2\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBp4bH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5309_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"ba0e4916eaa764a86bd45467\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"5811bf07495b29cdbeade85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\", \"checksum\":\"_EM_5269_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5270_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zTOS3myk\", \"checksum\":\"UknZU9k\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"settings\", \"_id\":{\"$oid\":\"ead371acdb7ccdbdadb76c22\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"IVjxP8\", \"checksum\":\"_EM_5310_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"q9\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"569e0c97bcd5aa3b5d269d7e\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"elEBW\", \"checksum\":\"bZqmvekr2dEDZW\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"uDdPqJ0zHR5q0a7\", \"type\":\"settings\", \"_id\":{\"$oid\":\"40d20bebd7c1cc64d94f6545\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/genomic_chart/genomic_chart")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/sessions/{source}/{type}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_22_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"6LxQqwI_9ht\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_Y\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6b51376c86b2bed3cddacda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"_EM_5629_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"Dw3NCL\", \"type\":\"settings\", \"_id\":{\"$oid\":\"0ee70a10e1e8c9ec6bda58cd\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"_EM_5208_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c4dab5cefd7906bdd0105fc8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"EH\", \"checksum\":\"_EM_5342_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5630_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"abff4b05d9b786a86bd37478\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_5631_XYZ_\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_4434_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_5632_XYZ_\", \"checksum\":\"_EM_5343_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"OAYGR\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2Y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWwZ\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"a2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zSOS3my\", \"checksum\":\"aknZMUk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"eae2609bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"7OGjJ0cZNc0\", \"checksum\":\"_EM_5633_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hiD1lxtRpYE8o6g\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22bad6b6e9ebe5fa52c9cc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9\", \"checksum\":\"o\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mNK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"f8ccfdc4dbd7d03fba0d0d2e\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/QFNZAi5F5/settings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/sessions/{source}/{type}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_23_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5339_XYZ_\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddacda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"UUM_U340_PYUU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_781_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"NSljK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c3dba4cffe79f7bde1106ed8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_5341_XYZ\", \"checksum\":\"_EM_6319_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"jw\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQxx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6320_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"5611af07496a49adbdbfe95c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Z\", \"checksum\":\"_EM_6321_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6322_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"77215ae93dc19d713caccd46\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2Y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8aNk6FrYNEWwZ\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"a2e3cc81c20f72ad8cff9f2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zSOS3my\", \"checksum\":\"aknZMUk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"eae2609bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"7OGjJ0cZNc0\", \"checksum\":\"2XXqKArW1fVqf4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hiD1lxtRpYE8_6g\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22b9d5b6eaebf4eb62c9bc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mNK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/QFNZAi5F5/custom_gene_list")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/sessions/{source}/{type}/query
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_24_getOnQueryReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_78_XYZ_")
                .get(baseUrlOfSut + "/api/sessions/W8FHayvpT/comparison_session/query?" + 
                    "field=PjFI0KuuF_w&" + 
                    "value=8L0NSFHMUG&" + 
                    "EMextraParam123=_EM_77_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/sessions/{source}/{type}/query
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_25_getOnQueryReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/l_au7U5tpSPJ/custom_gene_list/query?" + 
                    "field=hIOm&" + 
                    "value=6Hda5Ezl5vCc7j&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_26_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"T6\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"custom_gene_list\", \"type\":\"settings\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufxz\", \"checksum\":\"UQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3b1bb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5711_XYZ_\", \"checksum\":\"_EM_5712_XYZ_R\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"8SBE\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd2205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86bd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQ\", \"checksum\":\"_EM_5713_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"settings\", \"_id\":{\"$oid\":\"b90383dc3a1fe2d4fdce29ce\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_5212_XYZ_\", \"checksum\":\"oP82qlV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xsl\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"5722cf07487949bdbecee85d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"x\", \"checksum\":\"YSeyh\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"OAYGR\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"7a1359d83db17d723c9bbd48\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e1d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UUUsRzwUzUOS3Uy\", \"checksum\":\"eknZU9kJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5714_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"ebe2609bea7cbdbcbeb66c33\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"2A2YVm\", \"checksum\":\"w\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"XLZYFm21\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"a7c2cb9ecaa15eb0c9445db6\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"L6joKvdbQt3\", \"checksum\":\"Ax1A3q\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hTNrfUBhSI\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ecf0d90bea4e7b6cfbb7c7a7\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/AXZre0AnZtlGk/comparison_session/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_27_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"BkSxdgQRrhGuxY81\", \"checksum\":\"I3zv1bhz\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"RfW_Ak6aCWdNfxb\", \"type\":\"group\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3UfxK\", \"checksum\":\"_EM_4432_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_781_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fdf7fb1000e9caec5bea49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJD\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_4969_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"cbd92982cb50d97be8f2c0cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"qDqpv2Am_m5\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"yxas3tUac0\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"c4dca6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4970_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"13wl_jkodSu_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_4434_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/_EM_783_XYZ_/genomic_chart/query/fetch?EMextraParam123=_EM_663_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_28_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"settings\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3b1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"_EM_5208_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"8SB\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_5212_XYZ_\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"w\", \"checksum\":\"_EM_5213_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"OAYGR\", \"type\":\"settings\", \"_id\":{\"$oid\":\"791259d83db18d713d9cbe48\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zSOS3my\", \"checksum\":\"eknZU9k\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"eae2609bea7cbebcbeb66c33\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/_EM_5211_XYZ_/main_session/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_29_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"T6\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"custom_gene_listw\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5b62386b86c3cfe4ccdbbda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufxz\", \"checksum\":\"UQK7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXg8ppF3\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"ebc82983cb41c97ad8f4b1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5711_XYZ_\", \"checksum\":\"_EM_5712_XYZ_R\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"8SBE\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd2205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5716_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"bafe4a05dab775a86bd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQ\", \"checksum\":\"_EM_5713_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"settings\", \"_id\":{\"$oid\":\"b90383dc3a1fe2d4fdce29ce\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_5717_XYZ_\", \"checksum\":\"oP82qlV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xsl\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"5722cf07487949bdbecee85d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"x\", \"checksum\":\"YSeyh\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"OAYGR\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"7a1359d83db17d723c9bbd48\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_5718_XYZ_\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kHKUUiNkUUrUPEWU\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"b2f3bb90d2ff729d8def9e1d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UUUsRzwUzUOS3Uy\", \"checksum\":\"eknZU9kJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5714_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"ebe2609bea7cbdbcbeb66c33\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"2A2YVm\", \"checksum\":\"w\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"XLZYFm31\", \"type\":\"group\", \"_id\":{\"$oid\":\"a6c3db9dd9a04eb1ca546db6\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"L6joKvdbQt3\", \"checksum\":\"Ax1A3q\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hTNrfUBhSI\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ecf0d90bea4e7b6cfbb7c7a7\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/kGMf8iNk6FrYNEWw/custom_data/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/sessions/{source}/{type}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_30_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"Qj\", \"checksum\":\"gUUU]U\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_9318_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"6a41476c96c2bef2bdeabeb6\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_9319_XYZ_\", \"checksum\":\"_EM_9310_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7090_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"1cf71b10f0e7bbfc69ea4abc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_UMU9U53_UYU_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"dae82982cb50c87cc9f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_9323_XYZ_\", \"checksum\":\"NSljK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE:sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c3dba4cffe79f7bde1106ed8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"UEUUUU41_U[Z\", \"checksum\":\"QWTtUt0y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"fxdY\", \"type\":\"settings\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"lUYr_cH\", \"checksum\":\"_EM_9324_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b91295d93b1ef1d5debe29be\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAl\", \"checksum\":\"_EM_9313_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7085_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5610aff8486b489dbcc0fa5b\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_9314_XYZ_e\", \"checksum\":\"A83ozDDKXwEK7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6322_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"77205ad94dc29c713bbccd37\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o9\", \"checksum\":\"c0ulTIv2YQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7091_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"a3d4dca1c1f063ac8d0f8d2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YUUSRUU^yUUS5mYU\", \"checksum\":\"_EM_9325_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_9315_XYZ_N\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"d9e2619bea7cbebcbeb76c23\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\";OGjJ0cZNc0\", \"checksum\":\"3a95E2jGdLtQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"D8owYPHaOesdK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"22c9d4b6faebf4da62cacd59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"_EM_9321_XYZ_\", \"checksum\":\"_EM_7093_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"UNK\", \"type\":\"settings\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"tpciD\", \"checksum\":\"DCWZ04R_HJh3\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_9326_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bcc99b10d719e6614ec68f0f\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"9H85NRK8tiq2\", \"checksum\":\"YkxeDrw\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"2J\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"c69d55b2f73ed6e8663fcabf\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_9327_XYZ_/comparison_session")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_31_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"_EM_5268_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"U=McUUU8UXYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"WbFedC2\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\", \"checksum\":\"_EM_5269_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5270_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zTOS3my\", \"checksum\":\"UknZU9k\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"fad371acdb7ccdbdadb76c22\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"ylX\", \"checksum\":\"vMq3PUHRPE\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"EsB8Cqkoygq76\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"dd11bd5b91d002e403552ef0\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"yup\", \"checksum\":\"yj9Yk9MbM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"qJjQp3DIBoOR\", \"type\":\"group\", \"_id\":{\"$oid\":\"cb43b7a6e7bffcfdbdcdb2e5\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/_EM_5211_XYZ_/settings/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/sessions/{source}/{type}/query
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_32_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"BkSxdgQRrhGuxY81\", \"checksum\":\"I3zv1bhz\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"RfW_Ak6aCWdNfxb\", \"type\":\"group\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_4840_XYZ_\", \"checksum\":\"_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"e0zodXH\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fef7fb10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"settings\", \"_id\":{\"$oid\":\"cbd92981cb50d97be8f2c0cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"qDqpv2Am_m5\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"yxas3tUac0\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"c4dca6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"u\", \"checksum\":\"7RILZgWOgG\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"jSVO7Xm5d5v\", \"type\":\"settings\", \"_id\":{\"$oid\":\"6fb23ddc48808deae3c1ac94\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"FXhooLhcKxoKZ2H\", \"checksum\":\"2ztM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"nTVdOSGfDKSWEs\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"f7ac16ed33cff6febe9d4b3a\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/Y8Ldu5xZBECvB/group/query?" + 
                    "field=_EM_4841_XYZ_&" + 
                    "value=wKdIj&" + 
                    "EMextraParam123=_EM_660_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/sessions/{source}/{type}/query
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_33_getOnQueryReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_76_XYZ_")
                .get(baseUrlOfSut + "/api/sessions/_EM_73_XYZ_/custom_data/query?" + 
                    "field=723o&" + 
                    "value=_EM_74_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/sessions/{source}/{type}/query
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_34_getOnQueryReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/IJILewJpF_/genomic_chart/query?" + 
                    "field=_EM_184_XYZ_&" + 
                    "value=arvQim5ZS&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_35_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5339_XYZ_\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddacda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"UUM_U340_PYUU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_781_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"NSljK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c3dba4cffe79f7bde1106ed8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_5341_XYZ\", \"checksum\":\"_EM_6319_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"jw\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQxx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6320_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"5611af07496a49adbdbfe95c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Z\", \"checksum\":\"_EM_6321_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6322_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"77215ae93dc19d713caccd46\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2Y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8aNk6FrYNEWwZ\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"a2e3cc81c20f72ad8cff9f2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zSOS3my\", \"checksum\":\"aknZMUk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"eae2609bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"7OGjJ0cZNc0\", \"checksum\":\"2XXqKArW1fVqf4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hiD1lxtRpYE8_6g\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22b9d5b6eaebf4eb62c9bc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mNK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/_EM_5211_XYZ_/group/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_36_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"_EM_5268_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3Z\", \"type\":\"settings\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"U=McUUU8UXYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"WbFedC2\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBp4bH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5309_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"ba0e4916eaa764a86bd45467\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"5811bf07495b29cdbeade85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\", \"checksum\":\"_EM_5269_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5270_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zTOS3myk\", \"checksum\":\"UknZU9k\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"settings\", \"_id\":{\"$oid\":\"ead371acdb7ccdbdadb76c22\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"IVjxP8\", \"checksum\":\"_EM_5310_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"q9\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"569e0c97bcd5aa3b5d269d7e\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"elEBW\", \"checksum\":\"bZqmvekr2dEDZW\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"uDdPqJ0zHR5q0a7\", \"type\":\"settings\", \"_id\":{\"$oid\":\"40d20bebd7c1cc64d94f6545\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/_EM_5211_XYZ_/virtual_study/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_37_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UlSxdUURzhUqUQ@0\", \"checksum\":\"_EM_5207_XYZ_z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c87b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"5\", \"checksum\":\"_EM_5268_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjLM\", \"checksum\":\"U=McUUU8UXYU_1\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"WbFedC2\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUWdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"settings\", \"_id\":{\"$oid\":\"baf283db492e03c50dce39be\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7539_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_7540_XYZ_\", \"checksum\":\"_EM_5269_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5270_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_7541_XYZ_\", \"checksum\":\"UknZU9k\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7542_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"fad371acdb7ccdbdadb76c22\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"YjqtFetSNjN1bVf\", \"checksum\":\"wvJr4N\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"FYx8\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"41ebe0b4ec79c4bf8396d2fb\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"crH\", \"checksum\":\"OYYKVgRsmFP\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"RJYZ7mZfFH\", \"type\":\"group\", \"_id\":{\"$oid\":\"2dcbccfbc4f1ed1f0e0acde0\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/_EM_5211_XYZ_/settings/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_38_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"_EM_5268_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"U=McUUU8UXYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"WbFedC2\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\", \"checksum\":\"_EM_5269_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5270_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zTOS3my\", \"checksum\":\"UknZU9k\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"fad371acdb7ccdbdadb76c22\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"Q\", \"checksum\":\"k7Wym_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"C41gQ\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"4a475c6f6224cedfb01d9ca4\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"HHveaUx\", \"checksum\":\"du6b\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d9ac5aa4cef33a70dd66af0a\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/_EM_5211_XYZ_/settings/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_39_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"_EM_5268_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"U=McUUU8UXYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"WbFedC2\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\", \"checksum\":\"_EM_5269_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5270_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zTOS3my\", \"checksum\":\"UknZU9k\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"fad371acdb7ccdbdadb76c22\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"llOG3\", \"checksum\":\"GpjJVORl\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"Ysm7e0\", \"type\":\"settings\", \"_id\":{\"$oid\":\"dc624044777d1f0d7dc9c6ae\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"mMQZy4lmtU\", \"checksum\":\"zGJxXGThUOB\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"Yn\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"f21ab19bbae6cdcc7db07e9b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/_EM_5211_XYZ_/settings/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/sessions/{source}/{type}/query
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_40_getOnQueryReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_0_XYZ_/settings/query?" + 
                    "field=_EM_1_XYZ_&" + 
                    "value=_EM_2_XYZ_&" + 
                    "EMextraParam123=_EM_3_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_41_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"aCsk_YLr2\", \"checksum\":\"C3QBWEK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_4kunuFD\", \"type\":\"settings\", \"_id\":{\"$oid\":\"7961386c85a2bed4bdcacca4\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUxG\", \"checksum\":\"xdlrJ1a2m6zddFyQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_781_XYZ_r\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"fef71b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"_EM_5761_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"e9c81870cb51b97be904a1ba\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"_EM_5208_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c4dab5cefd7906bdd0105fc8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_6278_XYZ_\", \"checksum\":\"_EM_5342[XYZ_I\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"l\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xsY\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_6375_XYZ_\", \"checksum\":\"_EM_5343_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"OAYGJ\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"59014aca3dd1ad603cbbbd57\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"_EM_5762_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWwZ\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"b2f2bba0e1fe719d9dfe9e2e\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zSOS3my\", \"checksum\":\"_EM_6279_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"eae2609bea7cbebcbeb76c32\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"_EM_6280_XYZ_\", \"checksum\":\"2XXqKArW1fVqf4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6281_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"22b9d5b6eaebf4eb62c9cc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9\", \"checksum\":\"J\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5763_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_6376_XYZ_\", \"checksum\":\"tV73tudT\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6377_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"530b6100d8c0544bd0fe1db9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"0Js0K\", \"checksum\":\"_EM_6378_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6379_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"86567a8a6b193fb271ba89cb\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/_EM_5211_XYZ_/custom_gene_list/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_42_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"6LxQqwI_9ht\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_Y\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6b51376c86b2bed3cddacda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"_EM_5629_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"Dw3NCL\", \"type\":\"settings\", \"_id\":{\"$oid\":\"0ee70a10e1e8c9ec6bda58cd\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"_EM_5208_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c4dab5cefd7906bdd0105fc8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"EH\", \"checksum\":\"_EM_5342_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5630_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"abff4b05d9b786a86bd37478\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_5631_XYZ_\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_4434_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_5632_XYZ_\", \"checksum\":\"_EM_5343_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"OAYGR\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2Y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWwZ\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"a2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zSOS3my\", \"checksum\":\"aknZMUk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"eae2609bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"7OGjJ0cZNc0\", \"checksum\":\"_EM_5633_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hiD1lxtRpYE8o6g\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22bad6b6e9ebe5fa52c9cc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9\", \"checksum\":\"o\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mNK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"f8ccfdc4dbd7d03fba0d0d2e\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/_EM_5634_XYZ_/virtual_study/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_43_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5339_XYZ_\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddacda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"_EM_5340_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_781_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"_EM_5208_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c4dab5cefd7906bdd0105fc8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_5595_XYZ_\", \"checksum\":\"_EM_5342_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"j\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_P\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_4434_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef3d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Z\", \"checksum\":\"_EM_5343_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"OAYGR\", \"type\":\"settings\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2Y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWwZ\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"a2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zSOS3my\", \"checksum\":\"aknZMUkM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZrlGk\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"eae2609bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"7OGjJ0cZNc0\", \"checksum\":\"2XXqKArW1fVqf4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hiD1lxtRpYE8_6g\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22b9d5b6eaebf4eb62c9cc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mNK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"GbbDvbdCpNN\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"9PR4DIKyHbu\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"f27c1b1affbc92e5d15d6b15\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"3EwLsfCvA\", \"checksum\":\"XakJwd041Y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"B5wuL8fjP\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"51e4cebdac1aa8897a820869\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/_EM_5211_XYZ_/custom_data/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/sessions/{source}/{type}/query
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_44_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "settings")
                .d("{\"id\":\"5qi87K_cYLpVbfJS\", \"checksum\":\"2F9bY_cv\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AitLtllW0tYBi\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"3eed7bfce2da5a4634ed1345\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"uMj4MKR\", \"checksum\":\"MuoHC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r_YKWlpdU\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"c1155fd67cceb2b7454b43ce\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_31_XYZ_/virtual_study/query?" + 
                    "field=_EM_1_XYZ_&" + 
                    "value=_EM_2_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/sessions/{source}/{type}/query
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_45_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSwdgQRrhGqxY81\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"5b51376c86b1ced3cedabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_8022_XYZ_\", \"checksum\":\"_EM_8023_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"cad82982bb50c97bd8f3c1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDj\", \"checksum\":\"U=McUUU8UXYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"WbFedC2l\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_8030_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"rL\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"bafe4a05dab774a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_8024_XYZ_\", \"checksum\":\"1UwlUiUUdSU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90285cb3b2ef3c5eeaf39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAl\", \"checksum\":\"KMlmQBpN8\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"L?_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bff7396a4aacbcbfe95c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\", \"checksum\":\"_EM_8025_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"UBTr0J4LMbW\", \"type\":\"group\", \"_id\":{\"$oid\":\"571349d93dd2ad523cbbbd57\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_8032_XYZ_\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8dff9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UCfUUzw_zTWS3Uy\", \"checksum\":\"UknZU9ki\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"fad371bcdb7ccdbdadb76c12\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"_EM_8026_XYZ_\", \"checksum\":\"_EM_8027_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_8028_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"1d7d814e9f8f2bf75476de36\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"D]sk5YXvV2n9\", \"checksum\":\"Qstg90cjmqO8\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QCe6sjP_uWNcPDg\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ac05de08cb42de1b42e7dabc\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_8034_XYZ_/main_session/query?" + 
                    "field=lJiZ&" + 
                    "value=_EM_8035_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_46_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5339_XYZ_\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddacda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"_EM_5340_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_781_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_6347_XYZ_\", \"checksum\":\"_EM_5208_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c4dab5cefd7906bdd0105fc8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_5341_XYZ_\", \"checksum\":\"_EM_5342_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"j\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Z\", \"checksum\":\"_EM_5343_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"OAYGR\", \"type\":\"settings\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2Y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWwZ\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"a2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zSOS3my\", \"checksum\":\"aknZMUk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"eae2609bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"7OGjJ0cZNc0\", \"checksum\":\"2XXqKArW1fVqf4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6348_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22b8d5c6eaebf5fc72b9cc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mNK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/_EM_5211_XYZ_/virtual_study/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_47_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5339_XYZ_\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddacda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"_EM_5340_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_781_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"_EM_5208_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c4dab5cefd7906bdd0105fc8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_5595_XYZ_\", \"checksum\":\"_EM_5342_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"j\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_P\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_4434_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef3d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Z\", \"checksum\":\"_EM_5343_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"OAYGR\", \"type\":\"settings\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2Y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWwZ\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"a2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zSOS3my\", \"checksum\":\"aknZMUkM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZrlGk\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"eae2609bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"7OGjJ0cZNc0\", \"checksum\":\"2XXqKArW1fVqf4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hiD1lxtRpYE8_6g\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22b9d5b6eaebf4eb62c9cc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mNK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"ejkb0yjdcBR\", \"checksum\":\"I7xAo1I\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"ku9NQW6eAAd\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b5aa4143aae7f7fdcfc76373\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"3JBr9hH1M7BZgzH\", \"checksum\":\"UhAzWniqoDMlSXr\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"Db2WU7\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"cbf0bd8cfcd9dc3afc183f5c\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/_EM_5211_XYZ_/custom_data/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_48_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5339_XYZ_\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddacda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"_EM_5340_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_781_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"_EM_5208_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c4dab5cefd7906bdd0105fc8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_5595_XYZ_\", \"checksum\":\"_EM_5342_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"j\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_P\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_4434_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef3d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Z\", \"checksum\":\"_EM_5343_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"OAYGR\", \"type\":\"settings\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2Y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWwZ\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"a2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zSOS3my\", \"checksum\":\"aknZMUkM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZrlGk\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"eae2609bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"7OGjJ0cZNc0\", \"checksum\":\"2XXqKArW1fVqf4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hiD1lxtRpYE8_6g\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22b9d5b6eaebf4eb62c9cc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mNK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"OcUG5yrXk3\", \"checksum\":\"e7A0Jx\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"FGjfz7aXj8n2C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"96767e8fd524ba97a1eadd2a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"mkhndulzk1\", \"checksum\":\"1KvTBpLNuMB\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"EXwjsu\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"cb4c641a18d3f3d13574def1\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/_EM_5211_XYZ_/custom_data/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_49_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5339_XYZ_\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"YblfE8xxEqIJuF\", \"type\":\"settings\", \"_id\":{\"$oid\":\"6b41366c96b1bee4bddabca4\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"_EM_5340_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_781_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"_EM_5208_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c4dab5cefd7906bdd0105fc8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_5595_XYZ_\", \"checksum\":\"gfYwAK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"j\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_P\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_4434_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef3d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\\\\\", \"checksum\":\"bvP0kqd9\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"OAYGRn\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv*Y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWwZ\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"93f3bca1d1ff829e8def9f2c\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zSOS3my\", \"checksum\":\"aknZMUkM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7216_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"eae2609bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"7OGjJ0cZNc0\", \"checksum\":\"2XXqKArW1fVqf4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hiD1lxtRpYE8_6g\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22b9d5b6eaebf4eb62c9cc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9\", \"checksum\":\"_EM_7217_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mLK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"e8bb1ee4ebc5ef3e9a0e0e2d\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"mhD\", \"checksum\":\"Q3OgFheDnGFw\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kSxH6YOBYj\", \"type\":\"group\", \"_id\":{\"$oid\":\"65115eeb8d8a34e389be758e\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"9yHgAdvw\", \"checksum\":\"WU9_44\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"Z8gQPmftC52a\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"acbd1fdbb2fc5e9789c1cc27\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/_EM_5211_XYZ_/custom_data/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/sessions/{source}/{type}/query
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_50_getOnSessionQueryWithQueryParamsEmptyValueReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"T6\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"custom_gene_listw\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5b62386b86c3cfe4ccdbbda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufxz\", \"checksum\":\"UQK7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXg8ppF3\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"ebc82983cb41c97ad8f4b1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5711_XYZ_\", \"checksum\":\"_EM_5712_XYZ_R\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"8SBE\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd2205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5716_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"bafe4a05dab775a86bd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQ\", \"checksum\":\"_EM_5713_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"settings\", \"_id\":{\"$oid\":\"b90383dc3a1fe2d4fdce29ce\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_5717_XYZ_\", \"checksum\":\"oP82qlV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xsl\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"5722cf07487949bdbecee85d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"x\", \"checksum\":\"YSeyh\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"OAYGR\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"7a1359d83db17d723c9bbd48\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_5718_XYZ_\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kHKUUiNkUUrUPEWU\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"b2f3bb90d2ff729d8def9e1d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UUUsRzwUzUOS3Uy\", \"checksum\":\"eknZU9kJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5714_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"ebe2609bea7cbdbcbeb66c33\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"2A2YVm\", \"checksum\":\"w\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"XLZYFm31\", \"type\":\"group\", \"_id\":{\"$oid\":\"a6c3db9dd9a04eb1ca546db6\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"L6joKvdbQt3\", \"checksum\":\"Ax1A3q\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hTNrfUBhSI\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ecf0d90bea4e7b6cfbb7c7a7\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/NA_d%7Cue3uGB_xsl/group/query?" + 
                    "field=lJiZ9&" + 
                    "value=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_51_deleteOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/_EM_181_XYZ_/EVOMASTER/Pk7WXDljx5sM5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/_EM_181_XYZ_/EVOMASTER/Pk7WXDljx5sM5C"));
    }
    
    
    /**
    * Calls:
    * (400) DELETE:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_52_deleteOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/_EM_623_XYZ_/virtual_study/Zk%5COjmT2")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_53_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5339_XYZ_\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ__\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddacdb5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_6271_XYZ_\", \"checksum\":\"3r2kW8h2ShJpZF\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"fef70b10f0e8c9dc6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"_EM_5761_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"dac92871bb51b97be903b0bb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"_EM_5208_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c4dab5cefd7906bdd0105fc8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_5341_XYZ_\", \"checksum\":\"_EM_6272_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"j\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"settings\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xsY\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Za\", \"checksum\":\"_EM_6273_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"OAYG\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"78124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"_EM_5762_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWwZ\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"b2f2bba0e1fe719d9dfe9e2e\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zSOS3my\", \"checksum\":\"aknZMUk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"eae2609bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"7OGjJ0cZNc0\", \"checksum\":\"2XXqKArW1fVqf4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hiD1lxtRpYE8_6g\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22b9d5b6eaebf4eb62c9cc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9\", \"checksum\":\"J\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5763_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_6274_XYZ_\", \"checksum\":\"i8xRDgRa3\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6275_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"beb6fb55c3f83a58d5ac00ab\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"x\", \"checksum\":\"oc7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"oJzPE\", \"type\":\"settings\", \"_id\":{\"$oid\":\"adcc4ca0705707d4414695d1\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/D8owYPHaOesdO/genomic_chart/Ui%5CHSOFSy0gBghjD")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_54_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "virtual_study")
                .d("{\"id\":\"WWUUURTsUOUUUa\", \"checksum\":\"s9BLhUMUZpEUNU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"DUtUusUVyAUSeM2\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ebcca189aabc003750896863\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_39_XYZ_\", \"checksum\":\"_EM_40_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_33_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"ad3e0e44a3d3cc1eb14e4fdd\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_6_XYZ_")
                .get(baseUrlOfSut + "/api/sessions/_EM_5_XYZ_/EVOMASTER/_EM_34_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/_EM_5_XYZ_/EVOMASTER/_EM_34_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_55_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "virtual_study")
                .d("{\"id\":\"WWw6VRTszOOrXa\", \"checksum\":\"s9BLhfMRRxEHNf\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"DCx1usLVyAYTeM3\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ebcda189aabc003750896863\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"\", \"checksum\":\"_EM_32_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_33_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"ad3e0e44a3d3cc1eb15e4fdd\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_5_XYZ_/comparison_session/query")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/_EM_5_XYZ_/comparison_session/query"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_56_postOnQueryFetchWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query/fetch'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_15_XYZ_")
                .contentType("application/json")
                .body(" \"_EM_520_XYZ_\" ")
                .post(baseUrlOfSut + "/api/sessions/_EM_519_XYZ_n/EVOMASTER/query/fetch?EMextraParam123=_EM_14_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/_EM_519_XYZ_n/EVOMASTER/query/fetch"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_57_postOnQueryFetchReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query/fetch'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_3364_XYZ_\" ")
                .post(baseUrlOfSut + "/api/sessions/b%5CdtBeW_VmQZEWUc/virtual_study/query/fetch")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/sessions/{source}/{type}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_58_postOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5339_XYZ_\", \"checksum\":\"pucOUd\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddacda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"UUM_U340_PYUU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_781_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"0df71b10f0e7cafd6aea4abc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"group\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"NSljK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c3dba4cffe79f7bde1106ed8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_5341_XYZ\", \"checksum\":\"_EM_6319_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6882_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQxx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAm\", \"checksum\":\"9kqox78EIEtJZn\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"i\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"5610aff8486b489dbdc0fa5b\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Z\", \"checksum\":\"_EM_6321_XYZ_e\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"D8owYPHaOesdK\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"77215ae93dc19d713caccd46\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2Y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGM^8aNk6FrYNEWwZ\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"a3d3cc91c2ff73ac8c008e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCUURUv^zSOS3mU\", \"checksum\":\"aknZMUkT\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGkR\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"eae2619bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"7OGjJ0cZNc0\", \"checksum\":\"2XXqKArW1fVqf4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hiD1lxtRpYE8_6g\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22b9d5b6eaebf4eb62c9bc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"_EM_9942_XYZ_\", \"checksum\":\"_EM_9943_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mNK3\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"cUsrqmc\\\\atU\" ")
                .post(baseUrlOfSut + "/api/sessions/cUsrqmc%5CatU/custom_gene_list")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/sessions/{source}/{type}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_59_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_7556_XYZ_\", \"checksum\":\"_EM_5268_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_7557_XYZ_\", \"checksum\":\"U=McUUU8UXYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"WbFedC2\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"d5dba7deed6ae6cee1304fb9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UUUUiUUdSUU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbd39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"settings\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\", \"checksum\":\"_EM_5269_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5270_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCUoRUw_zPWS3mU\", \"checksum\":\"UknZU9k\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7558_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"fad371acdb7ccdbdbdb76c22\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"_p\", \"checksum\":\"_EM_7559_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7560_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ba6f7b5bebddb5c44fcad0fe\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"r_lf7vK56u\", \"checksum\":\"014\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"vrtsomS6NB8Khu\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"192e2f5dd14c483cf7e0228f\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/EVOMASTER/EVOMASTER")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/EVOMASTER/EVOMASTER"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/sessions/{source}/{type}/query
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_60_getOnQueryReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/L45SVdpg/EVOMASTER/query?" + 
                    "field=j4QhJpE0rJowMB&" + 
                    "value=_EM_494_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/L45SVdpg/EVOMASTER/query"));
    }
    
    
    /**
    * Calls:
    * (400) PUT:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_61_putOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQKX\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"_EM_5208_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5116_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a16d9c775a96bd46657\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\", \"checksum\":\"dh9noylQiLDcs\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"OAYGR\", \"type\":\"settings\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zSOS3my\", \"checksum\":\"_EM_6084_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk8\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"eae2609bea7cbebcbeb66c33\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" __pWW18r5zzSih ")
                .put(baseUrlOfSut + "/api/sessions/PjBxlBCP1gw_F/group/_%5CpW4A805xzSUh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) PUT:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_62_putOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UlSxdUURzhUqUQ@0\", \"checksum\":\"_EM_5207_XYZ_z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c87b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"5\", \"checksum\":\"_EM_5268_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjLM\", \"checksum\":\"U=McUUU8UXYU_1\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"WbFedC2\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUWdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"settings\", \"_id\":{\"$oid\":\"baf283db492e03c50dce39be\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7539_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_7540_XYZ_\", \"checksum\":\"_EM_5269_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5270_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_7541_XYZ_\", \"checksum\":\"UknZU9k\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7542_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"fad371acdb7ccdbdadb76c22\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"YjqtFetSNjN1bVf\", \"checksum\":\"wvJr4N\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"FYx8\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"41ebe0b4ec79c4bf8396d2fb\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"crH\", \"checksum\":\"OYYKVgRsmFP\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"RJYZ7mZfFH\", \"type\":\"group\", \"_id\":{\"$oid\":\"2dcbccfbc4f1ed1f0e0acde0\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" __pWW18r5zzSih ")
                .put(baseUrlOfSut + "/api/sessions/_EM_5210_XYZ_/EVOMASTER/_EM_7543_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/_EM_5210_XYZ_/EVOMASTER/_EM_7543_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/sessions/{source}/{type}/query
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_63_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"_EM_5268_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"U=McUUU8UXYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"WbFedC2\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\", \"checksum\":\"_EM_5269_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5270_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zTOS3my\", \"checksum\":\"UknZU9k\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"fad371acdb7ccdbdadb76c22\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"llOG3\", \"checksum\":\"GpjJVORl\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"Ysm7e0\", \"type\":\"settings\", \"_id\":{\"$oid\":\"dc624044777d1f0d7dc9c6ae\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"mMQZy4lmtU\", \"checksum\":\"zGJxXGThUOB\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"Yn\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"f21ab19bbae6cdcc7db07e9b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/Y8Ldu5x%5CBICvB/group/query?" + 
                    "field=lJiZ9&" + 
                    "value=wKdIj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/sessions/{source}/{type}/query/fetch
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_64_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"Qk\", \"checksum\":\"gUUU]U\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"custom_gene_listw\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"6a50376c86c1bfe2bdeabdb5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"_EM_9310_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7090_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"1cf71b10f0e7bbfc69ea4abc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJoL\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_UMU9U53_UYU_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"dae82a82cb50c87cc9f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"NSljK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c3dba4cffe79f7bde1106ed8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"UEUUUU41_U[Z\", \"checksum\":\"QWTtUt0y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"fxdY\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_9311_XYZ_K\", \"checksum\":\"1UwlUiUUdQU_r\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"group\", \"_id\":{\"$oid\":\"b91295d93b1ef1d5debe29be\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAl\", \"checksum\":\"_EM_9313_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7085_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5610aff8486b489dbcc0fa5b\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_9314_XYZ_\", \"checksum\":\"A83ozDDKXwEK7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"eNd4rIi_PS8g\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"87215ad94dc19c713bbccd37\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o9\", \"checksum\":\"c0ulTIv2YQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7091_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"a3d4dca1c1f063ac8d0f8d2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCUSRUU^zUUS5mYA\", \"checksum\":\"aknZMUks\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_9315_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"d9e2619bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\";OGjJ0cZNc0\", \"checksum\":\"3a95E2jGfLtQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7092_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"22b9d5c6ebdbf4eb53cabc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9r\", \"checksum\":\"_EM_7093_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"UNK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"tpciL\", \"checksum\":\"DKWZ04R_HJh2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"vSqszfnzkenc\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"cdb99b11c719d7604db58f0f\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"9H85NRK8tiq2\", \"checksum\":\"YkxeDrw\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"2J\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"c69d55b2f73ed6e8663fcabf\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query/fetch'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" null ")
                .post(baseUrlOfSut + "/api/sessions/mNK/virtual_study/query/fetch")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/mNK/virtual_study/query/fetch"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/sessions/{source}/{type}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_65_postOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSwdgQRrhGqxY81\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"5b51376c86b1ced3cedabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_8022_XYZ_\", \"checksum\":\"_EM_8023_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"cad82982bb50c97bd8f3c1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDj\", \"checksum\":\"U=McUUU8UXYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"WbFedC2l\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_8030_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"rL\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"bafe4a05dab774a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_8024_XYZ_\", \"checksum\":\"1UwlUiUUdSU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90285cb3b2ef3c5eeaf39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAl\", \"checksum\":\"KMlmQBpN8\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"L?_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bff7396a4aacbcbfe95c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\", \"checksum\":\"_EM_8025_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"UBTr0J4LMbW\", \"type\":\"group\", \"_id\":{\"$oid\":\"571349d93dd2ad523cbbbd57\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_8032_XYZ_\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8dff9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UCfUUzw_zTWS3Uy\", \"checksum\":\"UknZU9ki\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"fad371bcdb7ccdbdadb76c12\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"_EM_8026_XYZ_\", \"checksum\":\"_EM_8027_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_8028_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"1d7d814e9f8f2bf75476de36\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"D]sk5YXvV2n9\", \"checksum\":\"Qstg90cjmqO8\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QCe6sjP_uWNcPDg\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ac05de08cb42de1b42e7dabc\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" genomic_chart ")
                .post(baseUrlOfSut + "/api/sessions/genomic_chart/EVOMASTER")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/genomic_chart/EVOMASTER"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/sessions/{source}/{type}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_66_postOnWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"_EM_5268_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3Z\", \"type\":\"settings\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"U=McUUU8UXYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"WbFedC2\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBp4bH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5309_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"ba0e4916eaa764a86bd45467\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"5811bf07495b29cdbeade85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\", \"checksum\":\"_EM_5269_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5270_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zTOS3myk\", \"checksum\":\"UknZU9k\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"settings\", \"_id\":{\"$oid\":\"ead371acdb7ccdbdadb76c22\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"IVjxP8\", \"checksum\":\"_EM_5310_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"q9\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"569e0c97bcd5aa3b5d269d7e\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"elEBW\", \"checksum\":\"bZqmvekr2dEDZW\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"uDdPqJ0zHR5q0a7\", \"type\":\"settings\", \"_id\":{\"$oid\":\"40d20bebd7c1cc64d94f6545\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" genomic_chart ")
                .post(baseUrlOfSut + "/api/sessions/genomic_chart/main_session?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/genomic_chart/main_session"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/sessions/{source}/{type}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_67_postOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UlSxdUURzhUqUQ@0\", \"checksum\":\"_EM_5207_XYZ_z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c87b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"5\", \"checksum\":\"_EM_5268_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjLM\", \"checksum\":\"U=McUUU8UXYU_1\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"WbFedC2\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUWdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"settings\", \"_id\":{\"$oid\":\"baf283db492e03c50dce39be\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7539_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_7540_XYZ_\", \"checksum\":\"_EM_5269_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5270_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_7541_XYZ_\", \"checksum\":\"UknZU9k\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7542_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"fad371acdb7ccdbdadb76c22\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"YjqtFetSNjN1bVf\", \"checksum\":\"wvJr4N\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"FYx8\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"41ebe0b4ec79c4bf8396d2fb\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"crH\", \"checksum\":\"OYYKVgRsmFP\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"RJYZ7mZfFH\", \"type\":\"group\", \"_id\":{\"$oid\":\"2dcbccfbc4f1ed1f0e0acde0\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" NumberDecimal ")
                .post(baseUrlOfSut + "/api/sessions/NumberDecimal/group")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/NumberDecimal/group"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/sessions/{source}/{type}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_68_postOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_7556_XYZ_\", \"checksum\":\"_EM_5268_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_7557_XYZ_\", \"checksum\":\"U=McUUU8UXYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"WbFedC2\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"d5dba7deed6ae6cee1304fb9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UUUUiUUdSUU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbd39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"settings\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\", \"checksum\":\"_EM_5269_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5270_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCUoRUw_zPWS3mU\", \"checksum\":\"UknZU9k\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7558_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"fad371acdb7ccdbdbdb76c22\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"_p\", \"checksum\":\"_EM_7559_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7560_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ba6f7b5bebddb5c44fcad0fe\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"r_lf7vK56u\", \"checksum\":\"014\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"vrtsomS6NB8Khu\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"192e2f5dd14c483cf7e0228f\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" EVOMASTER ")
                .post(baseUrlOfSut + "/api/sessions/EVOMASTER/main_session")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/EVOMASTER/main_session"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/sessions/{source}/{type}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_69_postOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"_EM_5268_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"U=McUUU8UXYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7609_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQxE\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"settings\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\", \"checksum\":\"_EM_5269_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5270_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zTOS3my\", \"checksum\":\"UknZU9k\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"fad371acdb7ccdbdadb76c22\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"nxQT9s5env\", \"checksum\":\"NKSxtQxhX5TdV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"ueqOpK6hvBf4\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"8a47c5bb816dad47ada766cb\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"HFUR8rXSD\", \"checksum\":\"zR3agf6xsav9tYD\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"EPogGSL4dnj5_\", \"type\":\"group\", \"_id\":{\"$oid\":\"5dec37f7f3963209ebc19e1b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" QFNZAi5F5 ")
                .post(baseUrlOfSut + "/api/sessions/QFNZAi5F5/group")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/QFNZAi5F5/group"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/sessions/{source}/{type}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_70_postOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_7827_XYZ_\", \"checksum\":\"_EM_5268_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"dad82982bb51c97bd8f3c1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"U=UcUUT8UXYYU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"WbFedC2\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"bafe4a05dab775a86ce36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"sUj\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6713bff6376b29bdcdaef86c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_7828_XYZ_\", \"checksum\":\"UEM_506U[UYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7829_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"68124ad93dc19d613bacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zTOS3m\", \"checksum\":\"UknZU9k\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7830_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"fbd471acdb7ccdbebcb67c12\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"nxQT9s5env\", \"checksum\":\"NKWxtQxhX5TdV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"ueqOpK6hvBf4\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"9a36c6ab725cbd47ada657cb\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"HFUR8rXSD\", \"checksum\":\"zR3agf6xsav9tYD\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"EPogGSL4dnj5_\", \"type\":\"group\", \"_id\":{\"$oid\":\"5dec37f7f3963209ebc19e1b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" comparison_session ")
                .post(baseUrlOfSut + "/api/sessions/NumberInt/virtual_study")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/NumberInt/virtual_study"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/sessions/{source}/{type}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_71_postOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"_EM_5268_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ead82871ab60b87bd8f3b1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_8006_XYZ_\", \"checksum\":\"U=McUUU8UXUU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_8007_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"c4eba5ee0e5af6bcd13f5fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"UEM_4433_UYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dac775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"b90284cb2a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\", \"checksum\":\"_EM_5269_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5270_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_8008_XYZ_\", \"checksum\":\"_EM_8009_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_8010_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"fad371acdb7ccdbdadb76c22\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"KkK9XsDXM7VdtgB\", \"checksum\":\"xMIKuClF\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"s5xz9ml\", \"type\":\"settings\", \"_id\":{\"$oid\":\"1d7d814e908f2bf75476de36\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"D_sk5YXvV2n9\", \"checksum\":\"Qstg70cjmqO8\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QCe6sjP_uWNcPD\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"bc05ee18bb42de0a42e7eabc\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" custom_gene_list ")
                .post(baseUrlOfSut + "/api/sessions/custom_gene_list/custom_data")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/custom_gene_list/custom_data"));
    }
    
    
    /**
    * Calls:
    * (400) POST:/api/sessions/{source}/{type}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_72_postOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"Qj\", \"checksum\":\"gUUU]U\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_9318_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"6a41476c96c2bef2bdeabeb6\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_9319_XYZ_\", \"checksum\":\"_EM_9310_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7090_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"1cf71b10f0e7bbfc69ea4abc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_UMU9U53_UYU_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"dae82982cb50c87cc9f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_9323_XYZ_\", \"checksum\":\"NSljK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE:sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c3dba4cffe79f7bde1106ed8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"UEUUUU41_U[Z\", \"checksum\":\"QWTtUt0y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"fxdY\", \"type\":\"settings\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"lUYr_cH\", \"checksum\":\"_EM_9324_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b91295d93b1ef1d5debe29be\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAl\", \"checksum\":\"_EM_9313_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7085_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5610aff8486b489dbcc0fa5b\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_9314_XYZ_e\", \"checksum\":\"A83ozDDKXwEK7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6322_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"77205ad94dc29c713bbccd37\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o9\", \"checksum\":\"c0ulTIv2YQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7091_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"a3d4dca1c1f063ac8d0f8d2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YUUSRUU^yUUS5mYU\", \"checksum\":\"_EM_9325_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_9315_XYZ_N\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"d9e2619bea7cbebcbeb76c23\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\";OGjJ0cZNc0\", \"checksum\":\"3a95E2jGdLtQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"D8owYPHaOesdK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"22c9d4b6faebf4da62cacd59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"_EM_9321_XYZ_\", \"checksum\":\"_EM_7093_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"UNK\", \"type\":\"settings\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"tpciD\", \"checksum\":\"DCWZ04R_HJh3\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_9326_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bcc99b10d719e6614ec68f0f\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"9H85NRK8tiq2\", \"checksum\":\"YkxeDrw\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"2J\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"c69d55b2f73ed6e8663fcabf\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" _EM_9327_XYZ_ ")
                .post(baseUrlOfSut + "/api/sessions/_EM_9327_XYZ_/custom_data")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/_EM_9327_XYZ_/custom_data"));
    }
    
    
    /**
    * Calls:
    * (404) DELETE:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_73_deleteOnWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 404 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/_EM_7_XYZ_/comparison_session/Qw6mq2ap2?EMextraParam123=_EM_8_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_7_XYZ_/comparison_session/Qw6mq2ap2"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_74_getOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/jh6hMR/custom_gene_list/cGZQI3P0oolU?EMextraParam123=_EM_87_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/jh6hMR/custom_gene_list/cGZQI3P0oolU"));
    }
    
    
    /**
    * Calls:
    * (404) PUT:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_75_putOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"x1Bh8pI\" ")
                .put(baseUrlOfSut + "/api/sessions/4dvo_zDqEb_Rm/comparison_session/_EM_24_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/4dvo_zDqEb_Rm/comparison_session/_EM_24_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) PUT:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_76_putOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_19_XYZ_\" ")
                .put(baseUrlOfSut + "/api/sessions/1UTVYCe/custom_data/_EM_18_XYZ_?EMextraParam123=_EM_20_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/1UTVYCe/custom_data/_EM_18_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_77_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "virtual_study")
                .d("{\"id\":\"WWUUURTsUOUUUa\", \"checksum\":\"s9BLhUMUZpEUNU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_48_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ebcca189aabc003760896863\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_39_XYZ_\", \"checksum\":\"_EM_40_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_33_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"ad3e0e44a3d3cc1eb14e4fdd\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/V/comparison_session/_EM_34_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/V/comparison_session/_EM_34_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_78_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"O0JY1Y\", \"checksum\":\"ZTD2oWVdf_D6oDWM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"biAX26TnzDi2\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"f0b44adce1d68dd13e90a29a\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_94_XYZ_\", \"checksum\":\"_EM_95_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_5cXNfkf1lc\", \"type\":\"group\", \"_id\":{\"$oid\":\"4dfcece2db9ee26af4c1af4e\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_96_XYZ_/settings/_EM_97_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_96_XYZ_/settings/_EM_97_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) PUT:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_79_putOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"4Jz\" ")
                .put(baseUrlOfSut + "/api/sessions/_EM_159_XYZ_/custom_gene_list/_EM_160_XYZ_?EMextraParam123=_EM_161_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_159_XYZ_/custom_gene_list/_EM_160_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_80_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"6\", \"checksum\":\"tehTLeqtxMQYa\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"7NC\", \"type\":\"settings\", \"_id\":{\"$oid\":\"11fbfda68014c594b8efb0fc\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"BH3QkCZtuNB\", \"checksum\":\"Z0FbA5qv9toHMavY\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"q6lpsQZB0j\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"6fba689cff087bd0ec46202b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_257_XYZ_")
                .get(baseUrlOfSut + "/api/sessions/MN/genomic_chart/_EM_256_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/MN/genomic_chart/_EM_256_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_81_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "comparison_session")
                .d("{\"id\":\"4eZEf\", \"checksum\":\"H\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"JND0v\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"59abca4529ed2fdcbafb65f7\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"jIqCuwT\", \"checksum\":\"4AQBnIENh9Q\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mQDM4XDChHwm\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"ebbc3b6ae3fe1bf1ddd2cdc4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_244_XYZ_/custom_data/_EM_237_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_244_XYZ_/custom_data/_EM_237_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) PUT:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_82_putOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_450_XYZ_")
                .contentType("application/json")
                .body(" \"_EM_448_XYZ_\" ")
                .put(baseUrlOfSut + "/api/sessions/6aOvI3zVo/settings/j7uhZmbX")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/6aOvI3zVo/settings/j7uhZmbX"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_83_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"aCsk_YLr2\", \"checksum\":\"C3QBWEK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_4kunuFD\", \"type\":\"settings\", \"_id\":{\"$oid\":\"7961386c85a2bed4bdcacca4\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUxG\", \"checksum\":\"xdlrJ1a2m6zddFyQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_781_XYZ_r\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"fef71b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"_EM_5761_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"e9c81870cb51b97be904a1ba\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"_EM_5208_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c4dab5cefd7906bdd0105fc8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_6278_XYZ_\", \"checksum\":\"_EM_5342[XYZ_I\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"l\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xsY\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_6375_XYZ_\", \"checksum\":\"_EM_5343_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"OAYGJ\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"59014aca3dd1ad603cbbbd57\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"_EM_5762_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWwZ\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"b2f2bba0e1fe719d9dfe9e2e\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCfoRzw_zSOS3my\", \"checksum\":\"_EM_6279_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"eae2609bea7cbebcbeb76c32\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"_EM_6280_XYZ_\", \"checksum\":\"2XXqKArW1fVqf4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6281_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"22b9d5b6eaebf4eb62c9cc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9\", \"checksum\":\"J\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5763_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_6376_XYZ_\", \"checksum\":\"tV73tudT\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6377_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"530b6100d8c0544bd0fe1db9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"0Js0K\", \"checksum\":\"_EM_6378_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6379_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"86567a8a6b193fb271ba89cb\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/D8ovYPHaOesdOp/genomic_chart/_EM_6380_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/D8ovYPHaOesdOp/genomic_chart/_EM_6380_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) PUT:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_84_putOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"X{\", \"checksum\":\"pucOUd\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUTUe3UUx\", \"checksum\":\"UUM_U340_PYUU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_781_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"0df71b10f0e7cafd6aea4abc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"{s7n8\", \"checksum\":\"4_EtD5ns244IGmJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3b\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"dad82982cb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"NSlkK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_9587_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"c3dba4cffe79f7bde1106ed8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_5341_XYZ\", \"checksum\":\"_EM_6319_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6882_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQxx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAl\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"i\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"5610aff8486b489dbdc0fa5b\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Z\", \"checksum\":\"M]t\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"D8owYPHaOesdK\", \"type\":\"settings\", \"_id\":{\"$oid\":\"68225ad93dc19d813dcccd46\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0mlTIU2Z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGM^8aNk6FrYNEWwZb\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"a3d3cc91c2ff73ac8c008e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCUURUv^zSOS3mU\", \"checksum\":\"aknZMU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_9588_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"eae2619bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"7OGjJ0cZNc0\", \"checksum\":\"2XXqKArW1fVqf4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hiD1lxtRpYE8_6g\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22b9d5b6eaebf4eb62c9bc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"_EM_9585_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mNK\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" t_ ")
                .put(baseUrlOfSut + "/api/sessions/gD/virtual_study/t_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/gD/virtual_study/t_"));
    }
    
    
    /**
    * Calls:
    * (404) PUT:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_85_putOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"BkSxdgQRrhGuxY81\", \"checksum\":\"I3zv1bhz\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"RfW_Ak6aCWdNfxb\", \"type\":\"group\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3UfxK\", \"checksum\":\"_EM_4432_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_781_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fdf7fb1000e9caec5bea49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJD\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_4969_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"cbd92982cb50d97be8f2c0cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"qDqpv2Am_m5\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"yxas3tUac0\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"c4dca6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4970_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"13wl_jkodSu_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_4434_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" _EM_5039_XYZ_ ")
                .put(baseUrlOfSut + "/api/sessions/14O70LvDPKwG_C/genomic_chart/_EM_4971_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/14O70LvDPKwG_C/genomic_chart/_EM_4971_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) PUT:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_86_putOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"T6\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"custom_gene_listw\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5b62386b86c3cfe4ccdbbda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufxz\", \"checksum\":\"UQK7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXg8ppF3\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"ebc82983cb41c97ad8f4b1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5711_XYZ_\", \"checksum\":\"_EM_5712_XYZ_R\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"8SBE\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd2205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5716_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"bafe4a05dab775a86bd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQ\", \"checksum\":\"_EM_5713_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"settings\", \"_id\":{\"$oid\":\"b90383dc3a1fe2d4fdce29ce\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_5717_XYZ_\", \"checksum\":\"oP82qlV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xsl\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"5722cf07487949bdbecee85d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"x\", \"checksum\":\"YSeyh\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"OAYGR\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"7a1359d83db17d723c9bbd48\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_5718_XYZ_\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kHKUUiNkUUrUPEWU\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"b2f3bb90d2ff729d8def9e1d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UUUsRzwUzUOS3Uy\", \"checksum\":\"eknZU9kJ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5714_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"ebe2609bea7cbdbcbeb66c33\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"2A2YVm\", \"checksum\":\"w\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"XLZYFm31\", \"type\":\"group\", \"_id\":{\"$oid\":\"a6c3db9dd9a04eb1ca546db6\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"L6joKvdbQt3\", \"checksum\":\"Ax1A3q\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hTNrfUBhSI\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ecf0d90bea4e7b6cfbb7c7a7\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" BmCj ")
                .put(baseUrlOfSut + "/api/sessions/NA_d%7Cue3uGB_xs/main_session/_TpW4A805xzSUk")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/NA_d%7Cue3uGB_xs/main_session/_TpW4A805xzSUk"));
    }
    
    
    /**
    * Calls:
    * (404) PUT:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_87_putOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSxdgQRrhGqxY81\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_7556_XYZ_\", \"checksum\":\"_EM_5268_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_7557_XYZ_\", \"checksum\":\"U=McUUU8UXYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"WbFedC2\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"d5dba7deed6ae6cee1304fb9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_4433_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"r\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQx\", \"checksum\":\"1UUUUiUUdSUU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbd39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlo\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"NA_d|ue3uGB_xs\", \"type\":\"settings\", \"_id\":{\"$oid\":\"5712bf07486a39bdcdbee85c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\", \"checksum\":\"_EM_5269_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5270_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"68124ad93dc19d613cacbd47\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"group\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8def9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCUoRUw_zPWS3mU\", \"checksum\":\"UknZU9k\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7558_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"fad371acdb7ccdbdbdb76c22\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"_p\", \"checksum\":\"_EM_7559_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7560_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ba6f7b5bebddb5c44fcad0fe\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"r_lf7vK56u\", \"checksum\":\"014\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"vrtsomS6NB8Khu\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"192e2f5dd14c483cf7e0228f\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" __pWW16r5zzSih ")
                .put(baseUrlOfSut + "/api/sessions/_EM_5210_XYZ_/main_session/_TpWDA805xzSUh")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_5210_XYZ_/main_session/_TpWDA805xzSUh"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_88_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5339_XYZ_\", \"checksum\":\"pucOUd\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddacda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_9544_XYZ_\", \"checksum\":\"UUM_U340_P]UU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_781_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"0df71b10f0e7cafd6aea4abc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"l4HCC\", \"checksum\":\"4_EtD5ns244IGmJo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"NSljK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c3dba4cffe79f7bde1106ed8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_5341_XYZ\", \"checksum\":\"_EM_6319_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6882_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQxx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAl\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"i\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"5610aff8486b489dbdc0fa5b\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\\\\\", \"checksum\":\"6qhU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"D8owYPHaOesdK\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"76315ae92dc1ae714cabcd36\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_9545_XYZ_\", \"checksum\":\"_EM_9546_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGM^8aNk6FrYNEWwZh\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"a3d3cc91c2ff73ac8c008e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCUURUv^zSOS3mU\", \"checksum\":\"aknZMUk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGkR\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"eae2619bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"7OGjJ0cZNc0\", \"checksum\":\"2XXqKArW1fVqf4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hiD1lxtRpYF8_6g\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"23c9c5b6eaeaf4db53c9bc5a\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9\", \"checksum\":\"C\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mNK\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/D8owYPHaOesd/group/_EM_6323_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/D8owYPHaOesd/group/_EM_6323_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_89_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5339_XYZ_\", \"checksum\":\"pucOUd\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2bed3cddacda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7UQUYe3SSx\", \"checksum\":\"UUM_U340_PYUU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"urF7w\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"0df71b10f0e7cafd6aea4abc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"_EM_10049_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"group\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"NSljK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c3dba4cffe79f7bde1106ed8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM[5341_XYZ\", \"checksum\":\"qa0WRg2Fk8f65\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_10050_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQxx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlf\", \"checksum\":\"UUM_5209UUZZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"i\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"5610aff8486b489dbdc0fa5b\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Z\", \"checksum\":\"_EM_6321_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"D8owYPHaOesdK\", \"type\":\"settings\", \"_id\":{\"$oid\":\"77215ae93dc19d713caccd46\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"EM_tainted_map\", \"checksum\":\"c0ulTIv2Y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGM^8aNk6FrYNEWwZ\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"a3d3cc91c2ff73bc8c008e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCUURUv^zSOS3mU\", \"checksum\":\"aknZMUk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGkR\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"eae2619bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"7OGjJ0cZNc0\", \"checksum\":\"2XXqKArW1fVqf4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hiD1lxtRpYE8_6g\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22b9d5b6eaebf4eb62c9bc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9\", \"checksum\":\"n\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mNK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_10051_XYZ_/group/40thb")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_10051_XYZ_/group/40thb"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_90_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5339_XYZ_\", \"checksum\":\"pucOUdj\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6a51376c86b2aed3cddacda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"UUM_U340_PYUU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_781_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"0df71b10f0e7cafd6aea4abc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"group\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"NSljK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c3dba4cffe79f7bde1106ed8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_5341_XYZ\", \"checksum\":\"_EM_6319_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6882_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQxx\", \"checksum\":\"1UwlUiUUdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_9400_XYZ_\", \"checksum\":\"37UHj5qF7aqrVD\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"D8owYPHaOesdK\", \"type\":\"settings\", \"_id\":{\"$oid\":\"5610aff8486b489dbdc0fa5b\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Z\", \"checksum\":\"_EM_6321_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"D8owYPHaOesdK\", \"type\":\"settings\", \"_id\":{\"$oid\":\"77215ae93dc19d713caccd46\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2Y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGM^8aNk6FrYNEWwZ\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"a3d3cc91c2ff73ac8c008e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCUURUv^zSOS3mU\", \"checksum\":\"aknZMUk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"eae2619bea7cbebbbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"7OGjJ0cZNc0\", \"checksum\":\"2XXqKArW1fVqf4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hiD1lxtRpYE8_6g\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22b9d5b6eaebf4eb62c9bc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mNK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_9401_XYZ_/main_session/_EM_6323_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_9401_XYZ_/main_session/_EM_6323_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_91_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5339_XYZ_\", \"checksum\":\"pucOU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"6a51375c86b2bed3cddacda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_10303_XYZ_\", \"checksum\":\"UUM_U340_PYUU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_781_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"0df71b10f0e7cafd6aea4abc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"group\", \"_id\":{\"$oid\":\"dad82982bb50c97bd8f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjLx\", \"checksum\":\"NSljK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8uHQ\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"c2cba4df0d8807bde1206dd9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_5341_XYZ\", \"checksum\":\"_EM_6319_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"8uNe9;DUUUodXVK7\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bafe4a05daa775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"pJ0zQxx\", \"checksum\":\"1UUlUiUQdSU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90284cb3a2ef2d5fdbe39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAlb\", \"checksum\":\"_EM_5209_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"i\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"5610aff8486b489dbdc0fa5b\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Z\", \"checksum\":\"_EM_6321_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"D8owYPHaOesdK\", \"type\":\"settings\", \"_id\":{\"$oid\":\"77215ae93dc19d713caccd46\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o\", \"checksum\":\"c0ulTIv2Y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGM^4aNk6FrYNEWwZ\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"a3d3cb91d2f073ab8c007e2c\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCUURUv^zSOS3mU\", \"checksum\":\"aknZMUk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGkR\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"e9d3618ae97caebdbfb77c32\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\";OGjJUcZUc0\", \"checksum\":\"2XXqKArY1fVqf4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"hiLUUxtRpYE7]Ug\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"23b9d4b6ebfbf4eb51c9bd6b\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"mNK\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6f03eaa0e0e2e\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/D8nwYPHaOesdKu/main_session/5610aff8486b489dbdc0fa5b")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/D8nwYPHaOesdKu/main_session/5610aff8486b489dbdc0fa5b"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_92_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"Qk\", \"checksum\":\"gUUU]U\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"custom_gene_list\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"6a50376c96b1bfe2cdebbdb5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bmUA7iUUUe3UUx\", \"checksum\":\"_EM_9310_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7090_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"1cf71b10f0e7bbfc69ea4abc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJoL\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_UMU9U53_UYU_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"dae82a82cb50c87cc9f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDjL\", \"checksum\":\"NSljK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE8sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c3dba4cffe79f7bde1106ed8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"UEUUUU41_U[Z\", \"checksum\":\"QWTtUt0y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"fxdY\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_9311_XYZ_K3\", \"checksum\":\"1UwlUiUUdQU_r\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"group\", \"_id\":{\"$oid\":\"b91295d93b1ef1d5debe29be\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAl\", \"checksum\":\"_EM_9313_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7085_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5610aff8486b489dbcc0fa5b\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_9314_XYZ_\", \"checksum\":\"A83ozDDKXwEK7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"eNd4rIi_PS8g\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"87215ad94dc19c713bbccd37\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o9\", \"checksum\":\"c0ulTIv2YQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7091_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"a3d4dca1c1f063ac8d0f8d2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YCUSRUU^zUUS5mYA\", \"checksum\":\"aknZMUks\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_9315_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"d9e2619bea7cbebcbeb76c33\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\";OGjJ0cZNc0\", \"checksum\":\"_EM_11782_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7092_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"22b9d5c6ebdbf4eb53dabc59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"zfInD45YQf9r\", \"checksum\":\"_EM_7093_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"UNK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"tpciL\", \"checksum\":\"DKWZ04R_HJh2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"vSqszfnzkenc\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"cdb99b11c719d7604db58f0f\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"9H85NRK8tiq2\", \"checksum\":\"YkxeDrw\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"2J\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"c69d55b2f73ed6e8663fcabf\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/D8owYPHaOesdK/virtual_study/bafe4a05dab775a86cd36567")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/D8owYPHaOesdK/virtual_study/bafe4a05dab775a86cd36567"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_93_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"Qj\", \"checksum\":\"gUUU]U\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_9318_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"6a41476c96c2bef2bdeabeb6\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_9319_XYZ_\", \"checksum\":\"_EM_9310_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7090_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"1cf71b10f0e7bbfc69ea4abc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_782_XYZ_\", \"checksum\":\"4_EtD5ns244IGmJo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_UMU9U53_UYU_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"dae82982cb50c87cc9f3c1cb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_9323_XYZ_\", \"checksum\":\"NSljK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"bWOaWaJtE:sHQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c3dba4cffe79f7bde1106ed8\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"UEUUUU41_U[Z\", \"checksum\":\"QWTtUt0y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"fxdY\", \"type\":\"settings\", \"_id\":{\"$oid\":\"bafe4a05dab775a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"lUYr_cH\", \"checksum\":\"_EM_9324_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b91295d93b1ef1d5debe29be\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAl\", \"checksum\":\"_EM_9313_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7085_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5610aff8486b489dbcc0fa5b\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_9314_XYZ_e\", \"checksum\":\"A83ozDDKXwEK7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_6322_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"77205ad94dc29c713bbccd37\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UOOyYpxLtJI7o9\", \"checksum\":\"c0ulTIv2YQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_7091_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"a3d4dca1c1f063ac8d0f8d2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"YUUSRUU^yUUS5mYU\", \"checksum\":\"_EM_9325_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_9315_XYZ_N\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"d9e2619bea7cbebcbeb76c23\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\";OGjJ0cZNc0\", \"checksum\":\"3a95E2jGdLtQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"D8owYPHaOesdK\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"22c9d4b6faebf4da62cacd59\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"_EM_9321_XYZ_\", \"checksum\":\"_EM_7093_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"UNK\", \"type\":\"settings\", \"_id\":{\"$oid\":\"e8cb0ed4ecc6e03eaa0e0e2e\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"tpciD\", \"checksum\":\"DCWZ04R_HJh3\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_9326_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bcc99b10d719e6614ec68f0f\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"9H85NRK8tiq2\", \"checksum\":\"YkxeDrw\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"2J\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"c69d55b2f73ed6e8663fcabf\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_9322_XYZ_/virtual_study/bafe4a05dab775a86cd36567")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_9322_XYZ_/virtual_study/bafe4a05dab775a86cd36567"));
    }
    
    
    /**
    * Calls:
    * (404) PUT:/api/sessions/{source}/{type}/{id}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_94_putOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"@kSwdgQRrhGqxY81\", \"checksum\":\"_EM_5207_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_5115_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"5b51376c86b1ced3cedabda5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bm_A7irrqf3Ufx\", \"checksum\":\"vQK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QFNZAi5F5\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"fef70b10f0e8c9ec6ada49cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_8022_XYZ_\", \"checksum\":\"_EM_8023_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"I0ckMImLXgHppF3\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"cad82982bb50c97bd8f3c1cc\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SoDj\", \"checksum\":\"U=McUUU8UXYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"WbFedC2l\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"c4dba6defd6af6bdd1205fc9\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"8whBpDbH\", \"checksum\":\"_EM_8030_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"rL\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"bafe4a05dab774a86cd36567\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_8024_XYZ_\", \"checksum\":\"1UwlUiUUdSU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"14O70LvDPKwG_C\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b90285cb3b2ef3c5eeaf39bf\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"H4v[5sgMgnaAl\", \"checksum\":\"KMlmQBpN8\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"L?_d|ue3uGB_xs\", \"type\":\"group\", \"_id\":{\"$oid\":\"5712bff7396a4aacbcbfe95c\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\", \"checksum\":\"_EM_8025_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"UBTr0J4LMbW\", \"type\":\"group\", \"_id\":{\"$oid\":\"571349d93dd2ad523cbbbd57\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_8032_XYZ_\", \"checksum\":\"c0ulTIv2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"kGMf8iNk6FrYNEWw\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"b2f3bc90d2ff729d8dff9e2d\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"UCfUUzw_zTWS3Uy\", \"checksum\":\"UknZU9ki\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"AXZre0AnZtlGk\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"fad371bcdb7ccdbdadb76c12\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"_EM_8026_XYZ_\", \"checksum\":\"_EM_8027_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"_EM_8028_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"1d7d814e9f8f2bf75476de36\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"D]sk5YXvV2n9\", \"checksum\":\"Qstg90cjmqO8\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_29_XYZ_\"\n                    }, \"source\":\"QCe6sjP_uWNcPDg\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ac05de08cb42de1b42e7dabc\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" E_pOY18r5UUUUU ")
                .put(baseUrlOfSut + "/api/sessions/hPEF1KJ/group/_EM_8033_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/hPEF1KJ/group/_EM_8033_XYZ_"));
    }


}
