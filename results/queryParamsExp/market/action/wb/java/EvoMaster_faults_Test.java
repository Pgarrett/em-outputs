import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-12-26T21:27:32.795-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 48 tests
 * <br>
*  Covered targets: 212
 * <br>
*  Used time: 0h 15m 35s
 * <br>
*  Needed budget for current results: 97%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.market.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CART","CONTACTS","CUSTOMER_ORDER","DISTILLERY","PRODUCT","USER_ACCOUNT","USER_ROLE","cart","cart_item"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) GET:/products
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_0_getOnProductsShowsFaults_100_200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 205L)
                .d("USER_ID", "1048719")
                .d("ROLE_ID", "22")
            .and().insertInto("CART", 206L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "17053")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CONTACTS", 207L)
                .d("PHONE", "\"_EM_1391_XYZ_\"")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "\"UASeFvEUZ4D\"")
            .and().insertInto("CUSTOMER_ORDER", 208L)
                .d("ID", "131479")
                .d("USER_ACCOUNT_ID", "936")
                .d("DATE_CREATED", "\"1921-10-31\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "342255657")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "-67092355")
            .and().insertInto("PRODUCT", 501L)
                .d("NAME", "NULL")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "176")
                .d("ALCOHOL", "0.5812654888800594")
                .d("VOLUME", "680")
                .d("PRICE", "0.44437416344248903")
                .d("DESCRIPTION", "\"fwE1bKYGV0\"")
                .d("AVAILABLE", "false")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. market/service/impl/ProductServiceImpl_37_findAll GET:/products
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> Response status 500 not defined for path '/products'.
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(500)// market/service/impl/ProductServiceImpl_37_findAll
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/products"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/products
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_1_getOnProductsShowsFaults_100_200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 555L)
                .d("NAME", "NULL")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.14655921000746908")
                .d("VOLUME", "358")
                .d("PRICE", "0.6297966013877471")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "true")
            .and().insertInto("CART", 556L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CONTACTS", 557L)
                .d("PHONE", "\"uvQZoVeRy0ZY\"")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "NULL")
            .and().insertInto("CUSTOMER_ORDER", 558L)
                .d("ID", "745")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "NULL")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "243")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "713")
            .and().insertInto("DISTILLERY", 559L)
                .d("TITLE", "NULL")
                .d("REGION_ID", "526")
                .d("DESCRIPTION", "\"8yekqrYi1z9NQRZ1\"")
            .and().insertInto("PRODUCT", 441L)
                .d("NAME", "NULL")
                .d("DISTILLERY_ID", "692")
                .d("AGE", "591")
                .d("ALCOHOL", "0.32317117799110795")
                .d("VOLUME", "185")
                .d("PRICE", "0.5150560088661089")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "false")
            .and().insertInto("CUSTOMER_ORDER", 442L)
                .d("ID", "557")
                .d("USER_ACCOUNT_ID", "560")
                .d("DATE_CREATED", "\"1924-05-18\"")
                .d("EXECUTED", "NULL")
                .d("PRODUCTS_COST", "249")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "793")
            .and().insertInto("CART", 443L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. market/service/impl/ProductServiceImpl_35_findAll GET:/products
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> Response status 500 not defined for path '/products'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(500)// market/service/impl/ProductServiceImpl_35_findAll
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Unable to find market.domain.Distillery with id 692; nested exception is javax.persistence.EntityNotFoundException: Unable to find market.domain.Distillery with id 692"))
                .body("'description'", containsString("uri=/products"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/customer/contacts
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_2_getOnContactsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. market/dto/assembler/ContactsDtoAssembler_12_toModel GET:/customer/contacts
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/contacts -> Response status 500 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(500)// market/dto/assembler/ContactsDtoAssembler_12_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/customer
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_3_getOnCustomerShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. market/dto/assembler/UserAccountDtoAssembler_16_toModel GET:/customer
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> Response status 500 not defined for path '/customer'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "_EM_145_XYZ_")
                .get(baseUrlOfSut + "/customer?EMextraParam123=42")
                .then()
                .statusCode(500)// market/dto/assembler/UserAccountDtoAssembler_16_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/customer/orders/{orderId}
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_4_getOnOrderShowsFaults_100_200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 437L)
                .d("USER_ID", "588")
                .d("ROLE_ID", "682")
            .and().insertInto("CUSTOMER_ORDER", 439L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"2077-06-13\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "96")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "53")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. market/dto/assembler/OrderDtoAssembler_17_toModel GET:/customer/orders/{orderId}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/orders/{orderId} -> Response status 500 not defined for path '/customer/orders/{orderId}'.
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/0?name=86j")
                .then()
                .statusCode(500)// market/dto/assembler/OrderDtoAssembler_17_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/orders/0"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/register
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_5_postOnRegisterWithQueryParamShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. market/rest/exception/RestErrorResponse_50_getFieldErrors POST:/register
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/register -> Response status 500 not defined for path '/register'.
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"deprecation\": \"_EM_3133_XYZ_\", " + 
                    " \"href\": \"_EM_3134_XYZ_\", " + 
                    " \"name\": \"zLbex4I4kz2iMR\", " + 
                    " \"title\": \"_EM_3135_XYZ_\", " + 
                    " \"type\": \"3ZWbt_Cilx\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"mhZtNSPm\", " + 
                    " \"name\": \"_EM_3138_XYZ_\", " + 
                    " \"title\": \"2_I\", " + 
                    " \"type\": \"cpacQXY9nVle\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"_EM_3140_XYZ_\", " + 
                    " \"hreflang\": \"http://localhost:54358/products/11\", " + 
                    " \"profile\": \"_EM_3143_XYZ_\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_2_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"F6hEXS64PCrfRm\" " + 
                    " }, " + 
                    " { " + 
                    " \"hreflang\": \"SZwKI\", " + 
                    " \"media\": \"wYs6C3cKSMTWk\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_2_XYZ_\" " + 
                    " } " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/register?included=ii")
                .then()
                .statusCode(500)// market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.UserDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/customer/cart
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_6_putOnCartShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. market/rest/exception/RestErrorResponse_50_getFieldErrors PUT:/customer/cart
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart -> Response status 500 not defined for path '/customer/cart'.
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"name\": \"_EM_412_XYZ_\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"36734BTl3foEt1HF\", " + 
                    " \"type\": \"D\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"ZYFd2DrD6qZL4QgI\", " + 
                    " \"href\": \"zddOmVUwT6N\", " + 
                    " \"hreflang\": \"http://localhost:54358/products/8\", " + 
                    " \"media\": \"_EM_414_XYZ_\", " + 
                    " \"profile\": \"ytqjhDGd\", " + 
                    " \"title\": \"_EM_416_XYZ_\", " + 
                    " \"type\": \"_EM_417_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(500)// market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.CartItemDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/customer/contacts
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_7_putOnContactsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. market/rest/exception/RestErrorResponse_50_getFieldErrors PUT:/customer/contacts
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/contacts -> Response status 500 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [] " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(500)// market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.ContactsDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/register
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_8_postOnRegisterShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. market/rest/exception/RestErrorResponse_50_getFieldErrors POST:/register
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/register -> Response status 500 not defined for path '/register'.
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"deprecation\": \"\", " + 
                    " \"href\": \"http://localhost:54358/products/8\", " + 
                    " \"hreflang\": \"\", " + 
                    " \"name\": \"HXFvY4\", " + 
                    " \"profile\": \"yu\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_2_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"t7SpUtkD\" " + 
                    " }, " + 
                    " { " + 
                    " \"hreflang\": \"http://localhost:54358/products/5\", " + 
                    " \"profile\": \"_EM_2456_XYZ_\", " + 
                    " \"title\": \"nRgSfUBNfK\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"http://localhost:54358/products/6\", " + 
                    " \"hreflang\": \"http://localhost:54358/products/7\", " + 
                    " \"media\": \"iM7IwPlCmn9hy\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_2_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"ZUZFA\", " + 
                    " \"type\": \"_EM_2458_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"email\": \"dfIZJQ\", " + 
                    " \"name\": \"\u0027\", " + 
                    " \"password\": \"B3T\", " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(500)// market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.UserDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/customer/cart
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_9_putOnCartShowsFaults_100_200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CUSTOMER_ORDER", 287L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "582")
                .d("DATE_CREATED", "\"2043-05-07\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "77")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "381")
            .and().insertInto("CART", 288L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CONTACTS", 289L)
                .d("PHONE", "\"sBTW55rzIzt7l\"")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "NULL")
            .and().insertInto("USER_ACCOUNT", 619L)
                .d("EMAIL", "NULL")
                .d("PASSWORD", "\"Sa\"")
                .d("NAME", "\"4gneKTAVEYfAQ\"")
                .d("ACTIVE", "false")
            .and().insertInto("PRODUCT", 622L)
                .d("NAME", "\"wb\"")
                .d("DISTILLERY_ID", "212")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.5570744282618698")
                .d("VOLUME", "792")
                .d("PRICE", "0.7754160429427267")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. market/rest/exception/RestErrorResponse_50_getFieldErrors PUT:/customer/cart
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart -> Response status 500 not defined for path '/customer/cart'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"deprecation\": \"3xmAtqdSPX94SDs\", " + 
                    " \"href\": \"zYFOi\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"4iN5oAnwEGzRH\", " + 
                    " \"href\": \"0aGhc\", " + 
                    " \"name\": \"bLqEQpJDoO2\", " + 
                    " \"type\": \"8y9T\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"Po\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"type\": \"\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"b2pyX\", " + 
                    " \"name\": \"rI8vMUIyj1GP9\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"hVc3XyjRWXeUU05\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"zvPT\", " + 
                    " \"media\": \"VRA0GolI924yQcD\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"fcsALp39Xv\" " + 
                    " } " + 
                    " ], " + 
                    " \"productId\": 509 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?" + 
                    "name=T83VFExMEV1&" + 
                    "included=i8yxdnBGjvS")
                .then()
                .statusCode(500)// market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.CartItemDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/customer/contacts
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_10_putOnContactsShowsFaults_100_200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 647L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. market/rest/exception/RestErrorResponse_50_getFieldErrors PUT:/customer/contacts
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/contacts -> Response status 500 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [], " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts?name=vI73ed6Ztq")
                .then()
                .statusCode(500)// market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.ContactsDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * 1 - (200) GET:/customer/orders
    * 2 - (406) POST:/register
    * 3 - (404) GET:/customer/orders/{orderId}
    * 4 - (406) POST:/register
    * 5 - (406) POST:/customer/cart/pay
    * 6 - (406) POST:/customer/cart/pay
    * 7 - (200) GET:/customer
    * 8 - (500) PUT:/customer/contacts
    * Found 12 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_11_putOnContactsShowsFaults_100_200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 205L)
                .d("USER_ID", "0")
                .d("ROLE_ID", "54")
            .and().insertInto("CART", 206L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "669")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CONTACTS", 207L)
                .d("PHONE", "\"_EM_1391_XYZ\"")
                .d("ADDRESS", "\"65laQVJGpg2CPbZ\"")
                .d("CITY_REGION", "\"ZASeFvMfZ4\"")
            .and().insertInto("CUSTOMER_ORDER", 208L)
                .d("ID", "131479")
                .d("USER_ACCOUNT_ID", "680")
                .d("DATE_CREATED", "\"1921-10-16\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "342255529")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "-67108739")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/orders -> [Path '/0'] Object instance has properties which are not allowed by the schema: ["links"]
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders?name=a0GU_Rxfop")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'userAccount'", containsString("ivan.petrov@yandex.ru"))
                .body("[0].'billNumber'", numberMatches(2.7132054E8))
                .body("[0].'dateCreated'", containsString("2019-12-27T03:00:00.000+00:00"))
                .body("[0].'productsCost'", numberMatches(8127.0))
                .body("[0].'deliveryCost'", numberMatches(400.0))
                .body("[0].'deliveryIncluded'", equalTo(true))
                .body("[0].'totalCost'", numberMatches(8527.0))
                .body("[0].'payed'", equalTo(true))
                .body("[0].'executed'", equalTo(false))
                .body("[0].'links'.size()", equalTo(0));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/register -> Response status 406 not defined for path '/register'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"password\": \"4a\", " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", containsString("userDTO"))
                .body("'fieldErrors'.size()", equalTo(5))
                .body("'fieldErrors'[0].'field'", containsString("address"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"))
                .body("'fieldErrors'[1].'field'", containsString("phone"))
                .body("'fieldErrors'[1].'message'", containsString("Shall consist of a + sign, a country code, a region code (1-4 digits), and a number (6-7 digits)"))
                .body("'fieldErrors'[2].'field'", containsString("email"))
                .body("'fieldErrors'[2].'message'", containsString("The value shall not be empty"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/orders/{orderId} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/65550?name=yGqgGex33gp")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/orders/65550"))
                .body("'entityName'", containsString("OrderDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/register -> Response status 406 not defined for path '/register'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"_EM_1292_XYZ_\", " + 
                    " \"email\": \"1jSk13BDq\", " + 
                    " \"name\": \" -\", " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", containsString("userDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("phone"))
                .body("'fieldErrors'[0].'message'", containsString("Shall consist of a + sign, a country code, a region code (1-4 digits), and a number (6-7 digits)"))
                .body("'fieldErrors'[1].'field'", containsString("email"))
                .body("'fieldErrors'[1].'message'", containsString("The value shall be in the format of an email address"));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/customer/cart/pay -> Response status 406 not defined for path '/customer/cart/pay'.
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/customer/cart/pay")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/customer/cart/pay -> Response status 406 not defined for path '/customer/cart/pay'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"ccNumber\": \"prefix_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/customer/cart/pay?name=us2UTeJ2T")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("Card number shall consist of 13-16 digits"))
                .body("'fieldErrors'[1].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[1].'message'", containsString("Not a valid credit card number"));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Manage contacts","Shopping cart"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/email'] ECMA 262 regex "^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]+$" does not match input string "admin"
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/name'] ECMA 262 regex "^[\pL '-]+$" does not match input string "Admin"
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/phone'] ECMA 262 regex "^\+[1-9][0-9]?[\s]*\(?\d{3}\)?[-\s]?\d{3}[-\s]?\d{2}[-\s]?\d{2}$" does not match input string "_EM_1391_XYZ"
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "sf6")
                .get(baseUrlOfSut + "/customer?name=35z0S2wn1vnJzN")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'email'", containsString("admin"))
                .body("'password'", containsString("hidden"))
                .body("'name'", containsString("Admin"))
                .body("'phone'", containsString("_EM_1391_XYZ"))
                .body("'address'", containsString("65laQVJGpg2CPbZ"));
        
        // Fault100. HTTP Status 500. market/rest/exception/RestErrorResponse_50_getFieldErrors PUT:/customer/contacts
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/contacts -> Response status 500 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [], " + 
                    " \"address\": \"_EM_1296_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts?name=-")
                .then()
                .statusCode(500)// market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.ContactsDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * 1 - (200) PUT:/customer/cart/delivery
    * 2 - (200) GET:/customer
    * 3 - (200) GET:/customer/cart
    * 4 - (200) GET:/products
    * 5 - (500) POST:/register
    * Found 21 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_12_postOnRegisterShowsFaults_100_200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 58L)
                .d("USER_ID", "1244")
                .d("ROLE_ID", "254")
            .and().insertInto("CART", 59L)
                .d("TOTAL_ITEMS", "638")
                .d("PRODUCTS_COST", "489")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CONTACTS", 60L)
                .d("PHONE", "\"\"")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart/delivery -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Customer contacts","Proceed to payment"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart/delivery -> [Path '/cartItems/0/_links'] Object instance has properties which are not allowed by the schema: ["View product"]
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "_EM_420_XYZ_")
                .put(baseUrlOfSut + "/customer/cart/delivery?" + 
                    "included=true&" + 
                    "EMextraParam123=_EM_419_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("ivan.petrov@yandex.ru"))
                .body("'totalItems'", numberMatches(1.0))
                .body("'productsCost'", numberMatches(6517.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(6917.0))
                .body("'cartItems'.size()", equalTo(1))
                .body("'cartItems'[0].'productId'", numberMatches(5.0))
                .body("'cartItems'[0].'quantity'", numberMatches(1.0))
                .body("'empty'", equalTo(false));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Manage contacts","Shopping cart"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/address'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/email'] ECMA 262 regex "^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]+$" does not match input string "admin"
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/name'] ECMA 262 regex "^[\pL '-]+$" does not match input string "Admin"
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/phone'] ECMA 262 regex "^\+[1-9][0-9]?[\s]*\(?\d{3}\)?[-\s]?\d{3}[-\s]?\d{2}[-\s]?\d{2}$" does not match input string ""
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer?" + 
                    "name=Quarter+Cask&" + 
                    "EMextraParam123=_EM_421_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'email'", containsString("admin"))
                .body("'password'", containsString("hidden"))
                .body("'name'", containsString("Admin"))
                .body("'phone'", containsString(""))
                .body("'address'", nullValue());
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/cart -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Customer contacts","Proceed to payment"]
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "_EM_423_XYZ_")
                .get(baseUrlOfSut + "/customer/cart?" + 
                    "name=_EM_422_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("admin"))
                .body("'totalItems'", numberMatches(0.0))
                .body("'productsCost'", numberMatches(0.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(400.0))
                .body("'cartItems'.size()", equalTo(0))
                .body("'empty'", equalTo(true));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/0'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/1'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/2'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/3'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/4'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/5'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/6'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/7'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/8'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/9'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/10'] Object instance has properties which are not allowed by the schema: ["links"]
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/products?EMextraParam123=_EM_424_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(11))
                .body("[0].'productId'", numberMatches(1.0))
                .body("[0].'distillery'", containsString("Ardbeg"))
                .body("[0].'name'", containsString("Ten"))
                .body("[0].'price'", numberMatches(4420.0))
                .body("[0].'age'", numberMatches(10.0))
                .body("[0].'volume'", numberMatches(700.0))
                .body("[0].'alcohol'", numberMatches(46.0))
                .body("[0].'description'", containsString("Ten Years Old is the basis of the Ardbeg range. After 10 years of maturation in ex-bourbon casks, the whiskey bottled at 46% ABV without cold filtering. The characteristic peat, although clearly present but in perfect balance with the natural sweetness and not predominant in the taste."))
                .body("[0].'available'", equalTo(false))
                .body("[0].'links'.size()", equalTo(1))
                .body("[0].'links'[0].'rel'", containsString("self"))
                .body("[1].'productId'", numberMatches(2.0))
                .body("[1].'distillery'", containsString("Ardbeg"))
                .body("[1].'name'", containsString("Uigeadail"))
                .body("[1].'price'", numberMatches(7020.0))
                .body("[1].'age'", numberMatches(0.0))
                .body("[1].'volume'", numberMatches(700.0))
                .body("[1].'alcohol'", numberMatches(54.2))
                .body("[1].'description'", containsString("Ardbeg Uigedael is named after Loch Uigedael, the lake in the grounds of the distillery Ardbeg which are the water is an important factor in the distilling process. The Uigedael a vatted malt, bottled at 54.2% ABV without cold filtering. Ardbeg Uigedael has no age indication for the expression consists of various malts of different ages. Malts are used partly matured in ex-bourbon and partly on ex-sherry casks."))
                .body("[1].'available'", equalTo(true))
                .body("[1].'links'.size()", equalTo(1))
                .body("[1].'links'[0].'rel'", containsString("self"))
                .body("[2].'productId'", numberMatches(3.0))
                .body("[2].'distillery'", containsString("Balvenie"))
                .body("[2].'name'", containsString("12 y.o. Doublewood"))
                .body("[2].'price'", numberMatches(5403.0))
                .body("[2].'age'", numberMatches(12.0))
                .body("[2].'volume'", numberMatches(700.0))
                .body("[2].'alcohol'", numberMatches(40.0))
                .body("[2].'description'", containsString("Has clear influences from both bourbon and sherry wood. This malt has only 12 years aged in bourbon casks and then 3 months in young Oloroso casks. The peppery character from the bourbon barrels, penetrates, as it were by the rich and full aroma of Oloroso casks it. The Balvenie Double Wood is therefore a very complex malt."))
                .body("[2].'available'", equalTo(true))
                .body("[2].'links'.size()", equalTo(1))
                .body("[2].'links'[0].'rel'", containsString("self"))
                ; // Skipping assertions on the remaining 8 elements. This limit of 3 elements can be increased in the configurations
        
        // Fault100. HTTP Status 500. market/rest/exception/RestErrorResponse_50_getFieldErrors POST:/register
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/register -> Response status 500 not defined for path '/register'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"deprecation\": \"V\", " + 
                    " \"href\": \"Dv2Wq5en_Mr\" " + 
                    " }, " + 
                    " { " + 
                    " \"hreflang\": \"NdG_q6iASSZ6vWKZ\", " + 
                    " \"title\": \"8Z\", " + 
                    " \"type\": \"_EM_428_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"_EM_429_XYZ_\", " + 
                    " \"href\": \"GYkCjkKCgZLa\", " + 
                    " \"hreflang\": \"GAX7foPeaESVWI\", " + 
                    " \"media\": \"_EM_430_XYZ_\", " + 
                    " \"name\": \"_EM_431_XYZ_\", " + 
                    " \"profile\": \"_EM_432_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"SNtqYt5nJXJ6ok\", " + 
                    " \"hreflang\": \"http://localhost:54358/products/7\", " + 
                    " \"media\": \"_EM_433_XYZ_\", " + 
                    " \"rel\": { " + 
                    " \"EM_tainted_map\": \"_EM_2_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"LvaH\", " + 
                    " \"type\": \"_EM_435_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"name\": \"\\\\\\\\-\", " + 
                    " \"password\": \"Z5\", " + 
                    " \"phone\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register?EMextraParam123=42")
                .then()
                .statusCode(500)// market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.UserDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * 1 - (200) GET:/customer/orders
    * 2 - (500) POST:/register
    * 3 - (500) PUT:/customer/cart
    * 4 - (200) DELETE:/customer/cart
    * 5 - (404) GET:/customer/orders/{orderId}
    * 6 - (406) POST:/register
    * 7 - (406) POST:/customer/cart/pay
    * 8 - (406) POST:/customer/cart/pay
    * 9 - (200) GET:/customer
    * 10 - (200) GET:/customer/contacts
    * Found 16 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_13_getOnContactsShowsFaults_100_200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 205L)
                .d("USER_ID", "0")
                .d("ROLE_ID", "52")
            .and().insertInto("CART", 206L)
                .d("TOTAL_ITEMS", "354")
                .d("PRODUCTS_COST", "131741")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CONTACTS", 207L)
                .d("PHONE", "\"ewREfoJM_H2YQ\"")
                .d("ADDRESS", "\"65laQVJGpg2CPbZ\"")
                .d("CITY_REGION", "\"ZASeFvMfZ4L\"")
            .and().insertInto("CUSTOMER_ORDER", 208L)
                .d("ID", "8389271")
                .d("USER_ACCOUNT_ID", "936")
                .d("DATE_CREATED", "\"1922-10-22\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "342255529")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "0")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/orders -> [Path '/0'] Object instance has properties which are not allowed by the schema: ["links"]
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders?name=_EM_1270_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'userAccount'", containsString("ivan.petrov@yandex.ru"))
                .body("[0].'billNumber'", numberMatches(2.7132054E8))
                .body("[0].'dateCreated'", containsString("2019-12-27T03:00:00.000+00:00"))
                .body("[0].'productsCost'", numberMatches(8127.0))
                .body("[0].'deliveryCost'", numberMatches(400.0))
                .body("[0].'deliveryIncluded'", equalTo(true))
                .body("[0].'totalCost'", numberMatches(8527.0))
                .body("[0].'payed'", equalTo(true))
                .body("[0].'executed'", equalTo(false))
                .body("[0].'links'.size()", equalTo(0));
        
        // Fault100. HTTP Status 500. market/rest/exception/RestErrorResponse_50_getFieldErrors POST:/register
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/register -> Response status 500 not defined for path '/register'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"hreflang\": \"\", " + 
                    " \"media\": \"_EM_1272_XYZ_\", " + 
                    " \"title\": \"_EM_1273_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"4plP_JO_\", " + 
                    " \"href\": \"yZQ9irnq4OXdU\", " + 
                    " \"hreflang\": \"F\", " + 
                    " \"media\": \"_EM_1275_XYZ_\", " + 
                    " \"name\": \"p9L\", " + 
                    " \"profile\": \"CjH1\" " + 
                    " } " + 
                    " ], " + 
                    " \"address\": \"F4T\", " + 
                    " \"password\": \"4a\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(500)// market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.UserDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        // Fault100. HTTP Status 500. market/rest/exception/RestErrorResponse_50_getFieldErrors PUT:/customer/cart
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart -> Response status 500 not defined for path '/customer/cart'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"deprecation\": \"vP\", " + 
                    " \"href\": \"ncvG\", " + 
                    " \"hreflang\": \"c82r_uBZmPYednX4\", " + 
                    " \"media\": \"DRrRxYXdSiaL\", " + 
                    " \"name\": \"L8JPCXEea2o\", " + 
                    " \"title\": \"sN5zhNBxT\", " + 
                    " \"type\": \"iY_\" " + 
                    " } " + 
                    " ], " + 
                    " \"productId\": 229 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?name=")
                .then()
                .statusCode(500)// market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.CartItemDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/customer/cart -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Customer contacts","Proceed to payment"]
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/customer/cart?name=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("admin"))
                .body("'totalItems'", numberMatches(0.0))
                .body("'productsCost'", numberMatches(0.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(400.0))
                .body("'cartItems'.size()", equalTo(0))
                .body("'empty'", equalTo(true));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/orders/{orderId} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/78?name=")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/orders/78"))
                .body("'entityName'", containsString("OrderDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/register -> Response status 406 not defined for path '/register'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"_EM_1292_XYZ_\", " + 
                    " \"email\": \"1jSk13BDq\", " + 
                    " \"name\": \" -\", " + 
                    " \"password\": \"13n\", " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", containsString("userDTO"))
                .body("'fieldErrors'.size()", equalTo(3))
                .body("'fieldErrors'[0].'field'", containsString("email"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall be in the format of an email address"))
                .body("'fieldErrors'[1].'field'", containsString("password"))
                .body("'fieldErrors'[1].'message'", containsString("Length shall be between 6 and 50 characters"))
                .body("'fieldErrors'[2].'field'", containsString("phone"))
                .body("'fieldErrors'[2].'message'", containsString("Shall consist of a + sign, a country code, a region code (1-4 digits), and a number (6-7 digits)"));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/customer/cart/pay -> Response status 406 not defined for path '/customer/cart/pay'.
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"ccNumber\": \"_postfix\" " + 
                    " } ")
                .post(baseUrlOfSut + "/customer/cart/pay?name=us2UTeJ2T")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("Not a valid credit card number"))
                .body("'fieldErrors'[1].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[1].'message'", containsString("Card number shall consist of 13-16 digits"));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/customer/cart/pay -> Response status 406 not defined for path '/customer/cart/pay'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/customer/cart/pay?name=us2UTeJ2T")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Manage contacts","Shopping cart"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/email'] ECMA 262 regex "^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]+$" does not match input string "admin"
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/name'] ECMA 262 regex "^[\pL '-]+$" does not match input string "Admin"
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/phone'] ECMA 262 regex "^\+[1-9][0-9]?[\s]*\(?\d{3}\)?[-\s]?\d{3}[-\s]?\d{2}[-\s]?\d{2}$" does not match input string "ewREfoJM_H2YQ"
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .header("X-Requested-With", "{f7")
                .get(baseUrlOfSut + "/customer?name=35z0S2wn1vpJzN")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'email'", containsString("admin"))
                .body("'password'", containsString("hidden"))
                .body("'name'", containsString("Admin"))
                .body("'phone'", containsString("ewREfoJM_H2YQ"))
                .body("'address'", containsString("65laQVJGpg2CPbZ"));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/contacts -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Shopping cart"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/contacts -> [Path '/phone'] ECMA 262 regex "^\+[1-9][0-9]?[\s]*\(?\d{3}\)?[-\s]?\d{3}[-\s]?\d{2}[-\s]?\d{2}$" does not match input string "ewREfoJM_H2YQ"
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/contacts?name=Bl1Pz")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'phone'", containsString("ewREfoJM_H2YQ"))
                .body("'address'", containsString("65laQVJGpg2CPbZ"));
    }
    
    
    /**
    * Calls:
    * 1 - (404) PUT:/customer/cart
    * 2 - (200) GET:/customer/cart
    * 3 - (404) GET:/customer/orders/{orderId}
    * 4 - (200) GET:/products
    * 5 - (406) PUT:/customer/contacts
    * 6 - (200) GET:/customer/contacts
    * 7 - (500) POST:/register
    * 8 - (406) POST:/register
    * 9 - (200) GET:/customer/orders
    * 10 - (200) GET:/customer
    * Found 26 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_14_getOnCustomerShowsFaults_100_200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CART", 556L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CONTACTS", 557L)
                .d("PHONE", "\"uvQZoVeRy0ZY\"")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "NULL")
            .and().insertInto("CUSTOMER_ORDER", 558L)
                .d("ID", "745")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "NULL")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "243")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "713")
            .and().insertInto("CUSTOMER_ORDER", 442L)
                .d("ID", "557")
                .d("USER_ACCOUNT_ID", "560")
                .d("DATE_CREATED", "\"1924-05-18\"")
                .d("EXECUTED", "NULL")
                .d("PRODUCTS_COST", "249")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "793")
            .and().insertInto("CART", 443L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart -> No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 73, " + 
                    " \"quantity\": 96 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?name=D_p")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", containsString("Product"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/cart -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Customer contacts","Proceed to payment"]
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/cart?name=D_p")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("admin"))
                .body("'totalItems'", numberMatches(0.0))
                .body("'productsCost'", numberMatches(0.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(400.0))
                .body("'cartItems'.size()", equalTo(0))
                .body("'empty'", equalTo(true));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/orders/{orderId} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/438?name=D_p")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/orders/438"))
                .body("'entityName'", containsString("OrderDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/0'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/1'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/2'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/3'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/4'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/5'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/6'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/7'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/8'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/9'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/10'] Object instance has properties which are not allowed by the schema: ["links"]
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(11))
                .body("[0].'productId'", numberMatches(1.0))
                .body("[0].'distillery'", containsString("Ardbeg"))
                .body("[0].'name'", containsString("Ten"))
                .body("[0].'price'", numberMatches(4420.0))
                .body("[0].'age'", numberMatches(10.0))
                .body("[0].'volume'", numberMatches(700.0))
                .body("[0].'alcohol'", numberMatches(46.0))
                .body("[0].'description'", containsString("Ten Years Old is the basis of the Ardbeg range. After 10 years of maturation in ex-bourbon casks, the whiskey bottled at 46% ABV without cold filtering. The characteristic peat, although clearly present but in perfect balance with the natural sweetness and not predominant in the taste."))
                .body("[0].'available'", equalTo(false))
                .body("[0].'links'.size()", equalTo(1))
                .body("[0].'links'[0].'rel'", containsString("self"))
                .body("[1].'productId'", numberMatches(2.0))
                .body("[1].'distillery'", containsString("Ardbeg"))
                .body("[1].'name'", containsString("Uigeadail"))
                .body("[1].'price'", numberMatches(7020.0))
                .body("[1].'age'", numberMatches(0.0))
                .body("[1].'volume'", numberMatches(700.0))
                .body("[1].'alcohol'", numberMatches(54.2))
                .body("[1].'description'", containsString("Ardbeg Uigedael is named after Loch Uigedael, the lake in the grounds of the distillery Ardbeg which are the water is an important factor in the distilling process. The Uigedael a vatted malt, bottled at 54.2% ABV without cold filtering. Ardbeg Uigedael has no age indication for the expression consists of various malts of different ages. Malts are used partly matured in ex-bourbon and partly on ex-sherry casks."))
                .body("[1].'available'", equalTo(true))
                .body("[1].'links'.size()", equalTo(1))
                .body("[1].'links'[0].'rel'", containsString("self"))
                .body("[2].'productId'", numberMatches(3.0))
                .body("[2].'distillery'", containsString("Balvenie"))
                .body("[2].'name'", containsString("12 y.o. Doublewood"))
                .body("[2].'price'", numberMatches(5403.0))
                .body("[2].'age'", numberMatches(12.0))
                .body("[2].'volume'", numberMatches(700.0))
                .body("[2].'alcohol'", numberMatches(40.0))
                .body("[2].'description'", containsString("Has clear influences from both bourbon and sherry wood. This malt has only 12 years aged in bourbon casks and then 3 months in young Oloroso casks. The peppery character from the bourbon barrels, penetrates, as it were by the rich and full aroma of Oloroso casks it. The Balvenie Double Wood is therefore a very complex malt."))
                .body("[2].'available'", equalTo(true))
                .body("[2].'links'.size()", equalTo(1))
                .body("[2].'links'[0].'rel'", containsString("self"))
                ; // Skipping assertions on the remaining 8 elements. This limit of 3 elements can be increased in the configurations
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/contacts -> Response status 406 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"nWbQluDvZNw\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", containsString("contactsDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("phone"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/contacts -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Shopping cart"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/contacts -> [Path '/address'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/contacts -> [Path '/phone'] ECMA 262 regex "^\+[1-9][0-9]?[\s]*\(?\d{3}\)?[-\s]?\d{3}[-\s]?\d{2}[-\s]?\d{2}$" does not match input string "uvQZoVeRy0ZY"
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'phone'", containsString("uvQZoVeRy0ZY"))
                .body("'address'", nullValue());
        
        // Fault100. HTTP Status 500. market/rest/exception/RestErrorResponse_50_getFieldErrors POST:/register
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/register -> Response status 500 not defined for path '/register'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [], " + 
                    " \"email\": \"xLHamvfho\", " + 
                    " \"name\": \"LLL\", " + 
                    " \"password\": \"9\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(500)// market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.UserDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/register -> Response status 406 not defined for path '/register'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"9iAzAlbSUkTXj\", " + 
                    " \"email\": \"_EM_2714_XYZ_\", " + 
                    " \"name\": \"pL \" " + 
                    " } ")
                .post(baseUrlOfSut + "/register?included=nnRDuXBUAG0NWMFR")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", containsString("userDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("email"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall be in the format of an email address"))
                .body("'fieldErrors'[1].'field'", containsString("phone"))
                .body("'fieldErrors'[1].'message'", containsString("The value shall not be empty"));
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders?included=nnRDuXBUAG0NWMFR")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Manage contacts","Shopping cart"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/address'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/email'] ECMA 262 regex "^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]+$" does not match input string "admin"
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/name'] ECMA 262 regex "^[\pL '-]+$" does not match input string "Admin"
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/phone'] ECMA 262 regex "^\+[1-9][0-9]?[\s]*\(?\d{3}\)?[-\s]?\d{3}[-\s]?\d{2}[-\s]?\d{2}$" does not match input string "uvQZoVeRy0ZY"
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "42")
                .header("X-Requested-With", "1PsSMQg_zzrwkA0")
                .get(baseUrlOfSut + "/customer?name=FDoA645cJjfsxZ9y")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'email'", containsString("admin"))
                .body("'password'", containsString("hidden"))
                .body("'name'", containsString("Admin"))
                .body("'phone'", containsString("uvQZoVeRy0ZY"))
                .body("'address'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer/contacts
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_15_getOnCustomerContactsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/contacts -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Shopping cart"]
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/contacts?" + 
                    "name=12+y.o.+Doublewood&" + 
                    "EMextraParam123=_EM_321_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'phone'", containsString("+7 123 456 78 90"))
                .body("'address'", containsString("Riesstrasse 18"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer/contacts
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_16_getOnContactsReturnsSchemaInvalidResponseUsingSql() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/contacts -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Shopping cart"]
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "_EM_809_XYZ_")
                .get(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'phone'", containsString("+7 123 456 78 90"))
                .body("'address'", containsString("Riesstrasse 18"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/products/{productId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_17_getOnProductReturnsSchemaInvalidResponseUsingSql() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products/{productId} -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["All products"]
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'productId'", numberMatches(2.0))
                .body("'distillery'", containsString("Ardbeg"))
                .body("'name'", containsString("Uigeadail"))
                .body("'price'", numberMatches(7020.0))
                .body("'age'", numberMatches(0.0))
                .body("'volume'", numberMatches(700.0))
                .body("'alcohol'", numberMatches(54.2))
                .body("'description'", containsString("Ardbeg Uigedael is named after Loch Uigedael, the lake in the grounds of the distillery Ardbeg which are the water is an important factor in the distilling process. The Uigedael a vatted malt, bottled at 54.2% ABV without cold filtering. Ardbeg Uigedael has no age indication for the expression consists of various malts of different ages. Malts are used partly matured in ex-bourbon and partly on ex-sherry casks."))
                .body("'available'", equalTo(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer
    * Found 2 potential faults of type-code 200
    */
    @Test(timeout = 60000)
    public void test_18_getOnCustomerReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Manage contacts","Shopping cart"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/name'] ECMA 262 regex "^[\pL '-]+$" does not match input string "Ivan Petrov"
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/customer?" + 
                    "name=10+y.o.&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'email'", containsString("ivan.petrov@yandex.ru"))
                .body("'password'", containsString("hidden"))
                .body("'name'", containsString("Ivan Petrov"))
                .body("'phone'", containsString("+7 123 456 78 90"))
                .body("'address'", containsString("Riesstrasse 18"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer
    * Found 2 potential faults of type-code 200
    */
    @Test(timeout = 60000)
    public void test_19_getOnCustomerReturnsSchemaInvalidResponseUsingSql() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Manage contacts","Shopping cart"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> [Path '/name'] ECMA 262 regex "^[\pL '-]+$" does not match input string "Ivan Petrov"
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/customer?EMextraParam123=uRZiKertfT")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'email'", containsString("ivan.petrov@yandex.ru"))
                .body("'password'", containsString("hidden"))
                .body("'name'", containsString("Ivan Petrov"))
                .body("'phone'", containsString("+7 123 456 78 90"))
                .body("'address'", containsString("Riesstrasse 18"));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/customer/cart
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_20_deleteOnCustomerCartReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/customer/cart -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Customer contacts","Proceed to payment"]
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("ivan.petrov@yandex.ru"))
                .body("'totalItems'", numberMatches(0.0))
                .body("'productsCost'", numberMatches(0.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(400.0))
                .body("'cartItems'.size()", equalTo(0))
                .body("'empty'", equalTo(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer/orders
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_21_getOnOrdersReturnsSchemaInvalidResponseUsingSql() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/orders -> [Path '/0'] Object instance has properties which are not allowed by the schema: ["links"]
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders?" + 
                    "name=12+y.o.+Cask+Strength+Batch+6&" + 
                    "included=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'userAccount'", containsString("ivan.petrov@yandex.ru"))
                .body("[0].'billNumber'", numberMatches(2.7132054E8))
                .body("[0].'dateCreated'", containsString("2019-12-27T03:00:00.000+00:00"))
                .body("[0].'productsCost'", numberMatches(8127.0))
                .body("[0].'deliveryCost'", numberMatches(400.0))
                .body("[0].'deliveryIncluded'", equalTo(true))
                .body("[0].'totalCost'", numberMatches(8527.0))
                .body("[0].'payed'", equalTo(true))
                .body("[0].'executed'", equalTo(false))
                .body("[0].'links'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) DELETE:/customer/cart
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_22_deleteOnCartReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 67L)
                .d("PHONE", "\"yOCE7LmEdlK\"")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "\"wtYRfOtCgshIaJIe\"")
            .and().insertInto("CUSTOMER_ORDER", 122L)
                .d("ID", "92")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "NULL")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "85")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "846")
            .and().insertInto("CART", 123L)
                .d("TOTAL_ITEMS", "697")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "false")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/customer/cart -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Customer contacts","Proceed to payment"]
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/customer/cart?" + 
                    "name=qsGBHS1Tua97fO&" + 
                    "included=h")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("admin"))
                .body("'totalItems'", numberMatches(0.0))
                .body("'productsCost'", numberMatches(0.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(400.0))
                .body("'cartItems'.size()", equalTo(0))
                .body("'empty'", equalTo(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer/cart
    * Found 2 potential faults of type-code 200
    */
    @Test(timeout = 60000)
    public void test_23_getOnCustomerCartWithQueryParamsEmptyNameAndEmptyIncludedReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 437L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "682")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/cart -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Customer contacts","Proceed to payment"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/cart -> [Path '/cartItems/0/_links'] Object instance has properties which are not allowed by the schema: ["View product"]
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/cart?" + 
                    "name=&" + 
                    "included=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("ivan.petrov@yandex.ru"))
                .body("'totalItems'", numberMatches(1.0))
                .body("'productsCost'", numberMatches(6517.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(6917.0))
                .body("'cartItems'.size()", equalTo(1))
                .body("'cartItems'[0].'productId'", numberMatches(5.0))
                .body("'cartItems'[0].'quantity'", numberMatches(1.0))
                .body("'empty'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) GET:/customer/cart
    * Found 2 potential faults of type-code 200
    */
    @Test(timeout = 60000)
    public void test_24_getOnCustomerCartReturnsSchemaInvalidResponseUsingSql() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/cart -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Customer contacts","Proceed to payment"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/cart -> [Path '/cartItems/0/_links'] Object instance has properties which are not allowed by the schema: ["View product"]
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("ivan.petrov@yandex.ru"))
                .body("'totalItems'", numberMatches(1.0))
                .body("'productsCost'", numberMatches(6517.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(6917.0))
                .body("'cartItems'.size()", equalTo(1))
                .body("'cartItems'[0].'productId'", numberMatches(5.0))
                .body("'cartItems'[0].'quantity'", numberMatches(1.0))
                .body("'empty'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/customer/cart/delivery
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_25_putOnDeliveryReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart/delivery -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Customer contacts","Proceed to payment"]
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "42")
                .put(baseUrlOfSut + "/customer/cart/delivery?" + 
                    "included=false&" + 
                    "name=_EM_153_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("admin"))
                .body("'totalItems'", numberMatches(0.0))
                .body("'productsCost'", numberMatches(0.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(false))
                .body("'totalCost'", numberMatches(400.0))
                .body("'cartItems'.size()", equalTo(0))
                .body("'empty'", equalTo(true));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/customer/cart/delivery
    * Found 2 potential faults of type-code 200
    */
    @Test(timeout = 60000)
    public void test_26_putOnCartDeliveryWithQueryParamsIncludedReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart/delivery -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Customer contacts","Proceed to payment"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart/delivery -> [Path '/cartItems/0/_links'] Object instance has properties which are not allowed by the schema: ["View product"]
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/customer/cart/delivery?" + 
                    "included=true&" + 
                    "EMextraParam123=_EM_633_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("ivan.petrov@yandex.ru"))
                .body("'totalItems'", numberMatches(1.0))
                .body("'productsCost'", numberMatches(6517.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(6917.0))
                .body("'cartItems'.size()", equalTo(1))
                .body("'cartItems'[0].'productId'", numberMatches(5.0))
                .body("'cartItems'[0].'quantity'", numberMatches(1.0))
                .body("'empty'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) PUT:/customer/cart/delivery
    * Found 2 potential faults of type-code 200
    */
    @Test(timeout = 60000)
    public void test_27_putOnCartDeliveryWithQueryParamsIncludedEmptyNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart/delivery -> [Path '/_links'] Object instance has properties which are not allowed by the schema: ["Customer contacts","Proceed to payment"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart/delivery -> [Path '/cartItems/0/_links'] Object instance has properties which are not allowed by the schema: ["View product"]
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "_EM_330_XYZ_")
                .put(baseUrlOfSut + "/customer/cart/delivery?" + 
                    "included=true&" + 
                    "name=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("ivan.petrov@yandex.ru"))
                .body("'totalItems'", numberMatches(1.0))
                .body("'productsCost'", numberMatches(6517.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(6917.0))
                .body("'cartItems'.size()", equalTo(1))
                .body("'cartItems'[0].'productId'", numberMatches(5.0))
                .body("'cartItems'[0].'quantity'", numberMatches(1.0))
                .body("'empty'", equalTo(false));
    }
    
    
    /**
    * Calls:
    * (200) GET:/products
    * Found 15 potential faults of type-code 200
    */
    @Test(timeout = 60000)
    public void test_28_getOnProductsReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 418L)
                .d("NAME", "\"YUKL\"")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "858")
                .d("ALCOHOL", "0.739209980752177")
                .d("VOLUME", "750")
                .d("PRICE", "0.033135255260567265")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "true")
            .and().insertInto("CART", 419L)
                .d("TOTAL_ITEMS", "998")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "false")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/0'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/1'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/2'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/3'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/4'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/5'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/6'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/7'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/8'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/9'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/10'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/11'] Object instance has properties which are not allowed by the schema: ["links"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/11/alcohol'] Numeric instance is lower than the required minimum (minimum: 1, found: 0.73921)
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/11/description'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products -> [Path '/11/distillery'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(12))
                .body("[0].'productId'", numberMatches(1.0))
                .body("[0].'distillery'", containsString("Ardbeg"))
                .body("[0].'name'", containsString("Ten"))
                .body("[0].'price'", numberMatches(4420.0))
                .body("[0].'age'", numberMatches(10.0))
                .body("[0].'volume'", numberMatches(700.0))
                .body("[0].'alcohol'", numberMatches(46.0))
                .body("[0].'description'", containsString("Ten Years Old is the basis of the Ardbeg range. After 10 years of maturation in ex-bourbon casks, the whiskey bottled at 46% ABV without cold filtering. The characteristic peat, although clearly present but in perfect balance with the natural sweetness and not predominant in the taste."))
                .body("[0].'available'", equalTo(false))
                .body("[0].'links'.size()", equalTo(1))
                .body("[0].'links'[0].'rel'", containsString("self"))
                .body("[1].'productId'", numberMatches(2.0))
                .body("[1].'distillery'", containsString("Ardbeg"))
                .body("[1].'name'", containsString("Uigeadail"))
                .body("[1].'price'", numberMatches(7020.0))
                .body("[1].'age'", numberMatches(0.0))
                .body("[1].'volume'", numberMatches(700.0))
                .body("[1].'alcohol'", numberMatches(54.2))
                .body("[1].'description'", containsString("Ardbeg Uigedael is named after Loch Uigedael, the lake in the grounds of the distillery Ardbeg which are the water is an important factor in the distilling process. The Uigedael a vatted malt, bottled at 54.2% ABV without cold filtering. Ardbeg Uigedael has no age indication for the expression consists of various malts of different ages. Malts are used partly matured in ex-bourbon and partly on ex-sherry casks."))
                .body("[1].'available'", equalTo(true))
                .body("[1].'links'.size()", equalTo(1))
                .body("[1].'links'[0].'rel'", containsString("self"))
                .body("[2].'productId'", numberMatches(3.0))
                .body("[2].'distillery'", containsString("Balvenie"))
                .body("[2].'name'", containsString("12 y.o. Doublewood"))
                .body("[2].'price'", numberMatches(5403.0))
                .body("[2].'age'", numberMatches(12.0))
                .body("[2].'volume'", numberMatches(700.0))
                .body("[2].'alcohol'", numberMatches(40.0))
                .body("[2].'description'", containsString("Has clear influences from both bourbon and sherry wood. This malt has only 12 years aged in bourbon casks and then 3 months in young Oloroso casks. The peppery character from the bourbon barrels, penetrates, as it were by the rich and full aroma of Oloroso casks it. The Balvenie Double Wood is therefore a very complex malt."))
                .body("[2].'available'", equalTo(true))
                .body("[2].'links'.size()", equalTo(1))
                .body("[2].'links'[0].'rel'", containsString("self"))
                ; // Skipping assertions on the remaining 9 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/cart
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_29_getOnCartReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/cart -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/cart?" + 
                    "name=upe&" + 
                    "EMextraParam123=_EM_4_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) DELETE:/customer/cart
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_30_deleteOnCustomerCartWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/customer/cart -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/customer/cart?EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/contacts
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_31_getOnCustomerContactsWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/contacts -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/customer/contacts?name=aki8XD7E9qIA4")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_32_getOnCustomerReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer?" + 
                    "name=GjeQZ&" + 
                    "EMextraParam123=_EM_9_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/customer"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/customer/orders/{orderId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_33_getOnCustomerOrderWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/orders/{orderId} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/980?" + 
                    "name=mZWrjaiwUvHg&" + 
                    "EMextraParam123=_EM_3_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/orders/980"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (401) PUT:/customer/cart/delivery
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_34_putOnDeliveryReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart/delivery -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/customer/cart/delivery?" + 
                    "included=false&" + 
                    "EMextraParam123=_EM_18_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Access is denied"))
                .body("'description'", containsString("uri=/customer/cart/delivery"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (404) GET:/products/{productId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_35_getOnProductReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products/{productId} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/products/88636574")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/products/88636574"))
                .body("'entityName'", containsString("ProductDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/products/{productId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_36_getOnProductWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/products/{productId} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/-2916496281619111725?EMextraParam123=_EM_324_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/products/-2916496281619111725"))
                .body("'entityName'", containsString("ProductDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/customer/orders/{orderId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_37_getOnCustomerOrderReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/orders/{orderId} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "_EM_138_XYZ_")
                .get(baseUrlOfSut + "/customer/orders/51")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/orders/51"))
                .body("'entityName'", containsString("OrderDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/customer/orders/{orderId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_38_getOnOrderReturnsSchemaInvalidResponseUsingSql() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/orders/{orderId} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/-1550672094031017268?" + 
                    "name=10+y.o.&" + 
                    "EMextraParam123=_EM_456_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/orders/-1550672094031017268"))
                .body("'entityName'", containsString("OrderDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/customer/orders/{orderId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_39_getOnOrderReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CART", 183L)
                .d("TOTAL_ITEMS", "605")
                .d("PRODUCTS_COST", "230")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CONTACTS", 184L)
                .d("PHONE", "\"tVnPoZB9gbKRj\"")
                .d("ADDRESS", "\"rlDC\"")
                .d("CITY_REGION", "\"sYhzS5WSaeYIUa\"")
            .and().insertInto("CUSTOMER_ORDER", 749L)
                .d("ID", "607")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"1999-11-18\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "97")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "898")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/orders/{orderId} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/151?" + 
                    "name=FW&" + 
                    "included=KxY4R")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/orders/151"))
                .body("'entityName'", containsString("OrderDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
    }
    
    
    /**
    * Calls:
    * (404) PUT:/customer/cart
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_40_putOnCartReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 437L)
                .d("USER_ID", "588")
                .d("ROLE_ID", "682")
            .and().insertInto("CUSTOMER_ORDER", 439L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"2077-06-13\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "96")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "53")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart -> No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 277, " + 
                    " \"quantity\": 264 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", containsString("Product"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/customer/orders/{orderId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_41_getOnCustomerOrderWithQueryParamReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 297L)
                .d("USER_ID", "142")
                .d("ROLE_ID", "NULL")
            .and().insertInto("CART", 298L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CONTACTS", 299L)
                .d("PHONE", "\"_FrOSUhRcdS\"")
                .d("ADDRESS", "\"gxKXVsnOWzxROCr\"")
                .d("CITY_REGION", "\"wcZ\"")
            .and().insertInto("CUSTOMER_ORDER", 300L)
                .d("ID", "336")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"2041-01-24\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "536")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "977")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/customer/orders/{orderId} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/354?name=L4WjswCfqqT_A")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/orders/354"))
                .body("'entityName'", containsString("OrderDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
    }
    
    
    /**
    * Calls:
    * (406) POST:/customer/cart/pay
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_42_postOnPayReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/customer/cart/pay -> Response status 406 not defined for path '/customer/cart/pay'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_13_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"ccNumber\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/customer/cart/pay?name=_EM_11_XYZ_")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(3))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("Card number shall consist of 13-16 digits"))
                .body("'fieldErrors'[1].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[1].'message'", containsString("Not a valid credit card number"))
                .body("'fieldErrors'[2].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[2].'message'", containsString("The value shall not be empty"));
    }
    
    
    /**
    * Calls:
    * (406) POST:/register
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_43_postOnRegisterReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 555L)
                .d("NAME", "NULL")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.14655921000746908")
                .d("VOLUME", "358")
                .d("PRICE", "0.6297966013877471")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "true")
            .and().insertInto("CART", 556L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CONTACTS", 557L)
                .d("PHONE", "\"uvQZoVeRy0ZY\"")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "NULL")
            .and().insertInto("CUSTOMER_ORDER", 558L)
                .d("ID", "745")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "NULL")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "243")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "713")
            .and().insertInto("DISTILLERY", 559L)
                .d("TITLE", "NULL")
                .d("REGION_ID", "526")
                .d("DESCRIPTION", "\"8yekqrYi1z9NQRZ1\"")
            .and().insertInto("PRODUCT", 441L)
                .d("NAME", "NULL")
                .d("DISTILLERY_ID", "692")
                .d("AGE", "591")
                .d("ALCOHOL", "0.32317117799110795")
                .d("VOLUME", "185")
                .d("PRICE", "0.5150560088661089")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "false")
            .and().insertInto("CUSTOMER_ORDER", 442L)
                .d("ID", "557")
                .d("USER_ACCOUNT_ID", "560")
                .d("DATE_CREATED", "\"1924-05-18\"")
                .d("EXECUTED", "NULL")
                .d("PRODUCTS_COST", "249")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "793")
            .and().insertInto("CART", 443L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/register -> Response status 406 not defined for path '/register'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"9iAzAlbSUkTXj\", " + 
                    " \"email\": \"_EM_2714_XYZ_\", " + 
                    " \"name\": \"pL \" " + 
                    " } ")
                .post(baseUrlOfSut + "/register?included=nnRDuXBUAG0NWMFR")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", containsString("userDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("email"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall be in the format of an email address"))
                .body("'fieldErrors'[1].'field'", containsString("phone"))
                .body("'fieldErrors'[1].'message'", containsString("The value shall not be empty"));
    }
    
    
    /**
    * Calls:
    * (406) PUT:/customer/cart
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_44_putOnCartReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/cart -> Response status 406 not defined for path '/customer/cart'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 1152596616 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?" + 
                    "name=_EM_20_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", containsString("cartItemDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("quantity"))
                .body("'fieldErrors'[0].'message'", containsString("Value shall be a positive number"));
    }
    
    
    /**
    * Calls:
    * (406) POST:/customer/cart/pay
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_45_postOnPayReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/customer/cart/pay -> Response status 406 not defined for path '/customer/cart/pay'.
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/customer/cart/pay?included=Z1qUn2i")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"));
    }
    
    
    /**
    * Calls:
    * (406) PUT:/customer/contacts
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_46_putOnContactsReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 745L)
                .d("USER_ID", "715")
                .d("ROLE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/customer/contacts -> Response status 406 not defined for path '/customer/contacts'.
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"H\", " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts?" + 
                    "name=okJwT7eRO296&" + 
                    "included=")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", containsString("contactsDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("phone"))
                .body("'fieldErrors'[0].'message'", containsString("Shall consist of a + sign, a country code, a region code (1-4 digits), and a number (6-7 digits)"));
    }
    
    
    /**
    * Calls:
    * (406) POST:/customer/cart/pay
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_47_postOnCartPayReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/customer/cart/pay -> Response status 406 not defined for path '/customer/cart/pay'.
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"ccNumber\": \"_postfix\" " + 
                    " } ")
                .post(baseUrlOfSut + "/customer/cart/pay")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("Card number shall consist of 13-16 digits"))
                .body("'fieldErrors'[1].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[1].'message'", containsString("Not a valid credit card number"));
    }


}
