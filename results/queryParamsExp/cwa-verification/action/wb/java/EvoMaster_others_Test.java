import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-12-26T21:09:29.916-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 12 tests
 * <br>
*  Covered targets: 34
 * <br>
*  Used time: 0h 15m 7s
 * <br>
*  Needed budget for current results: 95%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.app.coronawarn.verification.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("APP_SESSION","TAN"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/testresult
    */
    @Test(timeout = 60000)
    public void test_0_postOnTestresultReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 5L)
                .d("VERSION", "943")
                .d("CREATED_AT", "\"2079-06-17 22:38:03\"")
                .d("UPDATED_AT", "\"1945-02-28 09:54:36\"")
                .d("HASHED_GUID", "\"LRnOmLAiuN\"")
                .d("REGISTRATION_TOKEN_HASH", "NULL")
                .d("TELE_TAN_HASH", "\"_EM_92_XYZ_\"")
                .d("TAN_COUNTER", "666")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"JAtUo7hv\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "el")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "foo")
                .header("b3", "foo")
                .header("X-B3-Sampled", "fo")
                .header("X-B3-TraceId", "fooU")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"3974be5a-adfa-4000-9b4f-17bf30bda01b\", " + 
                    " \"responsePadding\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/tan
    */
    @Test(timeout = 60000)
    public void test_1_postOnV1TanWithQueryParamReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 19L)
                .d("VERSION", "262819")
                .d("CREATED_AT", "\"2059-06-08 02:02:26\"")
                .d("UPDATED_AT", "\"1964-01-09 13:01:08\"")
                .d("HASHED_GUID", "\"YIF6_BB\"")
                .d("REGISTRATION_TOKEN_HASH", "NULL")
                .d("TELE_TAN_HASH", "\"gY\"")
                .d("TAN_COUNTER", "NULL")
                .d("SOT", "NULL")
                .d("HASHED_GUID_DOB", "\"CdcwMzRV\"")
                .d("TELETAN_TYPE", "\"jM65Y@eg7j\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "B_01Ip1BAN_")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "foo")
                .header("b3", "foo")
                .header("X-B3-Sampled", "fo")
                .header("X-B3-TraceId", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"40fefcaa-1b34-4db7-8d9e-86d8de95a8ed\", " + 
                    " \"responsePadding\": \"_EM_100_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan?EMextraParam123=_EM_3_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/tan/verify
    */
    @Test(timeout = 60000)
    public void test_2_postOnVerifyReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("TAN", 60L)
                .d("VERSION", "-388")
                .d("CREATED_AT", "\"2092-11-03 17:50:36\"")
                .d("UPDATED_AT", "\"2074-05-23 11:23:15\"")
                .d("VALID_FROM", "\"1988-06-28 18:56:29\"")
                .d("VALID_UNTIL", "\"2015-11-15 22:41:26\"")
                .d("TAN_HASH", "\"BwAK2Lw1Y\"")
                .d("SOT", "NULL")
                .d("TYPE", "\"wu2E4BeHvttZ\"")
                .d("REDEEMED", "NULL")
                .d("TELETAN_TYPE", "\"nM2e0SK0H\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "fo")
                .header("b3", "boo")
                .header("X-B3-Sampled", "foo")
                .header("X-B3-TraceId", "foq")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"bce4fe59-f6bf-40a6-ac4c-55a04adaec6b\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/tan/teletan
    */
    @Test(timeout = 60000)
    public void test_3_postOnTeletanReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 55L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1908-12-13 01:29:19\"")
                .d("UPDATED_AT", "\"2000-06-16 00:59:38\"")
                .d("HASHED_GUID", "\"_EM_1982_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_4240_XYZ_\"")
                .d("TELE_TAN_HASH", "\"vhRxiDwvDzp9\"")
                .d("TAN_COUNTER", "-9960831")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"c9fHgL8vDOFni40y\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 56L)
                .d("VERSION", "16")
                .d("CREATED_AT", "\"2000-05-09 11:29:17\"")
                .d("UPDATED_AT", "\"1935-07-01 00:29:59\"")
                .d("VALID_FROM", "\"2022-10-31 00:29:29\"")
                .d("VALID_UNTIL", "\"2000-06-19 14:49:25\"")
                .d("TAN_HASH", "\"3262c1229572eaa347083d261edcf81bca199804f1c4297ee10958ed322c61fa\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "{\"token\":\"W;M_303@_VYZm\"}")
                .header("x-EMextraHeader123", "")
                .header("b3", "_EM_3904_XYZ_")
                .header("X-B3-Sampled", "foo")
                .header("X-B3-TraceId", "fs")
                .header("x-b3-flags", "_EM_1980_XYZ_")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test(timeout = 60000)
    public void test_4_postOnV1RegistrationTokenWithQueryParamReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 121L)
                .d("VERSION", "311")
                .d("CREATED_AT", "\"2090-09-22 16:55:26\"")
                .d("UPDATED_AT", "\"1968-01-07 11:01:02\"")
                .d("HASHED_GUID", "\"_EM_3736_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"q_KZi\"")
                .d("TELE_TAN_HASH", "NULL")
                .d("TAN_COUNTER", "995")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"hwHnr2LSi\"")
                .d("TELETAN_TYPE", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "fFBW")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "fo")
                .header("b3", "foo")
                .header("X-B3-Sampled", "foo")
                .header("X-B3-TraceId", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"keyDob\": \"_EM_649_XYZ_\", " + 
                    " \"keyType\": \"EVOMASTER\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test(timeout = 60000)
    public void test_5_postOnRegistrationTokenReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 55L)
                .d("VERSION", "-262080")
                .d("CREATED_AT", "\"2028-10-16 02:29:29\"")
                .d("UPDATED_AT", "\"2001-08-20 11:29:29\"")
                .d("HASHED_GUID", "\"95e97eaf44ea476bc54d1f41a5f61459ef1e331681d105f74b5177051a9a8f2a\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_2599_XYZ_\"")
                .d("TELE_TAN_HASH", "\"_EM_U7QU_UUZ_\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"T6G\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 56L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1967-05-08 19:29:51\"")
                .d("UPDATED_AT", "\"2000-06-24 11:12:29\"")
                .d("VALID_FROM", "\"2100-06-30 20:29:29\"")
                .d("VALID_UNTIL", "\"1940-12-08 11:47:33\"")
                .d("TAN_HASH", "\"5b5a1f0a3b8784d567341b78327ffe8f2ea74611adf9dc4a8eb2d944ea989d2a\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "_EM_7854_XYZ_")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "epo")
                .header("b3", "_EM_6730_XYZ_")
                .header("X-CWA-TELETAN-TYPE", "gor")
                .contentType("application/json")
                .body(" {\"key\":\"73d3BC7f1fAEc2bfFD6Cd9763d406FcaDDc9be0bADee3FDE8fEdE7Ee1cE3cAfd\", \"keyDob\":\"CREATE SEQUENCE \"PUBLIC\".\"SYSTEM_SEQUENCE_F9BB71C3_D377_4EC3_B667_8BBF2F51F960\" START WITH 1 BELONGS_TO_TABLE\", \"keyType\":\"GUID\"} ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test(timeout = 60000)
    public void test_6_postOnRegistrationTokenReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 55L)
                .d("VERSION", "138408553")
                .d("CREATED_AT", "\"2044-06-16 11:05:29\"")
                .d("UPDATED_AT", "\"1928-11-09 16:37:52\"")
                .d("HASHED_GUID", "\"_EM_2877_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"db3382f6b1883f772bb7e53172ecd1ff3f638c5ea6f361aef78fbd207f3eb7d3\"")
                .d("TELE_TAN_HASH", "\"9143c47924a361e042ab209cd67b477bdcd12eb973f744270c3ae56c7a67369e\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_8268_XYZ_S\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 56L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2039-05-16 10:34:41\"")
                .d("UPDATED_AT", "\"2008-05-12 14:41:29\"")
                .d("VALID_FROM", "\"1900-01-29 00:22:47\"")
                .d("VALID_UNTIL", "\"2034-11-19 02:37:00\"")
                .d("TAN_HASH", "\"6951b805c59e970a8692c1ce63297568fe9eac5adec6f3449eb1f6baa5ba3ffd\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("b3", "_EM_9310_XYZ_")
                .header("X-B3-Flags", "1")
                .header("X-B3-Sampled", "fAlse")
                .header("X-B3-TraceId", "17FAVz0")
                .header("X-CWA-TELETAN-TYPE", "_EM_9495_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"ES7TTy\", " + 
                    " \"keyDob\": \"J7HJI^i4ynCF\", " + 
                    " \"keyType\": \"TELETAN\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/registrationToken
    */
    @Test(timeout = 60000)
    public void test_7_postOnRegistrationTokenReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 55L)
                .d("VERSION", "-262144")
                .d("CREATED_AT", "\"2028-10-16 02:13:31\"")
                .d("UPDATED_AT", "\"2000-08-20 11:29:29\"")
                .d("HASHED_GUID", "\"95e97eaf44ea476bc54d1f41a5f61459ef1e331681d105f74b5177051a9a8f2a\"")
                .d("REGISTRATION_TOKEN_HASH", "\"21544ce872eb94bdd7df4c42a4898a34fabc3776647b397f52125a2bbd57351a\"")
                .d("TELE_TAN_HASH", "\"018966e997d851bb8883d3a4b2650113e02af71676a0138e7d5c0ace4888dadb\"")
                .d("TAN_COUNTER", "-2048")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"T6G\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 56L)
                .d("VERSION", "7931094")
                .d("CREATED_AT", "\"1967-05-01 15:34:18\"")
                .d("UPDATED_AT", "\"2000-07-20 03:29:45\"")
                .d("VALID_FROM", "\"2007-07-16 11:29:29\"")
                .d("VALID_UNTIL", "\"2000-06-18 04:47:33\"")
                .d("TAN_HASH", "\"6d28ea5c9f1e4b9d0195bfbf5cca16fa88e4c07c3b226abf10c72a746d0edaeb\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "epo")
                .header("b3", "xCdoBVPhc2rWurxS")
                .header("X-B3-Sampled", "_EM_10339_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"63d3BB8f1eAEc2beFD6CcA774d407EcaEDc9bdfbADee3FDE8fEeE8De0cE3c9fc\", " + 
                    " \"keyDob\": \"AfF5c25bdFBBd3225bb6adb26B8dF2df517DeBEFCeaF49CAdAAA66dD0e590ead\", " + 
                    " \"keyType\": \"TELETAN\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/testresult
    */
    @Test(timeout = 60000)
    public void test_8_postOnTestresultReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 55L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2044-10-12 00:05:43\"")
                .d("UPDATED_AT", "\"2000-08-26 06:33:13\"")
                .d("HASHED_GUID", "\"95e97eaf44ea476bc54d1f41a5f61459ef1e331681d105f74b5177051a9a8f2a\"")
                .d("REGISTRATION_TOKEN_HASH", "\"7e6f1104a2765736e5fb0bc521f9574616ba240f56f3743ad6efa3d587c8b93c\"")
                .d("TELE_TAN_HASH", "\"018966e997d851bb8883d3a4b2650113e02af71676a0138e7d5c0ace4888dadb\"")
                .d("TAN_COUNTER", "-18176")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"_UU]13145_XYZ]\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 56L)
                .d("VERSION", "64")
                .d("CREATED_AT", "\"1959-09-08 05:36:03\"")
                .d("UPDATED_AT", "\"1900-05-16 22:17:31\"")
                .d("VALID_FROM", "\"1932-08-16 16:46:29\"")
                .d("VALID_UNTIL", "\"2006-06-19 02:29:08\"")
                .d("TAN_HASH", "\"n7DaZXgpCT\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "3A")
                .header("x-EMextraHeader123", "")
                .header("x-b3-flags", "_EM_13617_XYZ_")
                .header("X-B3-TraceId", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"59fc9790-0bf7-42e9-b51b-d055d7f491da\", " + 
                    " \"responsePadding\": \"q2VyZgQFuKfyPkG1\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/tan
    */
    @Test(timeout = 60000)
    public void test_9_postOnV1TanReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 55L)
                .d("VERSION", "-262144")
                .d("CREATED_AT", "\"2028-10-16 02:29:29\"")
                .d("UPDATED_AT", "\"2000-06-21 11:29:29\"")
                .d("HASHED_GUID", "\"95e97eaf44ea476bc54d1f41a5f61459ef1e331681d105f74b5177051a9a8f2a\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_2599_XYZ_\"")
                .d("TELE_TAN_HASH", "\"_EM_U7QU_UUZ_\"")
                .d("TAN_COUNTER", "-2048")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"8cddf6a8664a84d7db0afa7481c7da5ee056e216c186b256fd8830ae1a9559c5\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 56L)
                .d("VERSION", "7898326")
                .d("CREATED_AT", "\"1967-05-08 11:34:18\"")
                .d("UPDATED_AT", "\"1900-04-20 11:29:29\"")
                .d("VALID_FROM", "\"2008-07-16 16:29:15\"")
                .d("VALID_UNTIL", "\"1900-06-12 06:29:29\"")
                .d("TAN_HASH", "\"_EM_9919_XYZ_\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "a6oa[PQP")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "_EM_10162_XYZ_")
                .header("b3", "Eh]Syc")
                .header("X-B3-Sampled", "fAlsE")
                .header("X-B3-TraceId", "17yOF3g")
                .header("X-CWA-TELETAN-TYPE", "4\"")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"a0c7afed-5a48-4f55-90d2-c04997588eef\", " + 
                    " \"responsePadding\": \"_EM_5287_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/version/v1/testresult
    */
    @Test(timeout = 60000)
    public void test_10_postOnTestresultReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 55L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1908-12-13 01:29:19\"")
                .d("UPDATED_AT", "\"2000-06-16 00:59:38\"")
                .d("HASHED_GUID", "\"_EM_1982_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_4240_XYZ_\"")
                .d("TELE_TAN_HASH", "\"vhRxiDwvDzp9\"")
                .d("TAN_COUNTER", "-9960831")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"c9fHgL8vDOFni40y\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 56L)
                .d("VERSION", "16")
                .d("CREATED_AT", "\"2000-05-09 11:29:17\"")
                .d("UPDATED_AT", "\"1935-07-01 00:29:59\"")
                .d("VALID_FROM", "\"2022-10-31 00:29:29\"")
                .d("VALID_UNTIL", "\"2000-06-19 14:49:25\"")
                .d("TAN_HASH", "\"3262c1229572eaa347083d261edcf81bca199804f1c4297ee10958ed322c61fa\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("cwa-fake", "DgRv3NGqc")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "8mkntuIVyUCT5xe")
                .header("b3", "_EM_325_XYZ_")
                .header("X-B3-Sampled", "_EM_3108_XYZ_")
                .header("X-B3-TraceId", "")
                .header("X-CWA-TELETAN-TYPE", "e_QQ")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"3cc6da33-8dd2-495b-Aad0-85baf8b7fcea\", " + 
                    " \"responsePadding\": \"h\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) POST:/version/v1/tan/verify
    */
    @Test(timeout = 60000)
    public void test_11_postOnVerifyReturns404UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 55L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1906-01-16 01:21:21\"")
                .d("UPDATED_AT", "\"2000-06-16 00:59:22\"")
                .d("HASHED_GUID", "\"btXtRg1\\3PId\"")
                .d("REGISTRATION_TOKEN_HASH", "\"e5c0eca8ac279904c9418717a66133bf7a82c4b4f50d811fef582d23ad343ef2\"")
                .d("TELE_TAN_HASH", "\"UUUUiBofUUpUh\"")
                .d("TAN_COUNTER", "-9962751")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"cUU]gLQUBLFnQU0U\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 56L)
                .d("VERSION", "-15")
                .d("CREATED_AT", "\"2000-01-09 11:34:17\"")
                .d("UPDATED_AT", "\"2031-01-02 04:29:15\"")
                .d("VALID_FROM", "\"2000-10-18 00:29:29\"")
                .d("VALID_UNTIL", "\"2000-06-19 23:51:25\"")
                .d("TAN_HASH", "\"_EM_3110_XYZ_\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "_EM_4038_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"90b9e600-de3c-46ac-Aadb-6761349eecad\", " + 
                    " \"responsePadding\": \"9I88vApwa9PHgHf0\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
