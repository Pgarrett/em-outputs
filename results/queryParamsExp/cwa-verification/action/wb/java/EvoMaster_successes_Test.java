import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-12-26T21:09:29.905-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 11 tests
 * <br>
*  Covered targets: 61
 * <br>
*  Used time: 0h 15m 7s
 * <br>
*  Needed budget for current results: 95%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.app.coronawarn.verification.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("APP_SESSION","TAN","app_session","tan"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (200) POST:/version/v1/tan/verify
    */
    @Test(timeout = 60000)
    public void test_0_postOnVerifyReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 55L)
                .d("VERSION", "134283865")
                .d("CREATED_AT", "\"2044-12-12 02:05:29\"")
                .d("UPDATED_AT", "\"2000-06-07 11:29:52\"")
                .d("HASHED_GUID", "\"_EM_2877_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"db3382f6b1883f772bb7e53172ecd1ff3f638c5ea6f361aef78fbd207f3eb7d3\"")
                .d("TELE_TAN_HASH", "\"_EM_6371_XYZ_\"")
                .d("TAN_COUNTER", "-524288")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"4\\\"P\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 56L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2047-05-08 11:34:29\"")
                .d("UPDATED_AT", "\"2000-06-16 14:45:29\"")
                .d("VALID_FROM", "\"1984-05-29 00:22:47\"")
                .d("VALID_UNTIL", "\"2034-11-19 02:37:00\"")
                .d("TAN_HASH", "\"6951b805c59e970a8692c1ce63297568fe9eac5adec6f3449eb1f6baa5ba3ffd\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "z7mm_CNKzLawW")
                .header("b3", "_EM_5118_XYZ_")
                .header("X-B3-Sampled", "GaC5")
                .header("X-B3-TraceId", "Beo")
                .contentType("application/json")
                .body(" { " + 
                    " \"tan\": \"9faaf7f0-e03c-47bc-9cda-7750258ffcac\", " + 
                    " \"responsePadding\": \"pMIZF7\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan/verify")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) POST:/version/v1/testresult
    */
    @Test(timeout = 60000)
    public void test_1_postOnTestresultReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 55L)
                .d("VERSION", "134283865")
                .d("CREATED_AT", "\"2044-12-12 02:05:29\"")
                .d("UPDATED_AT", "\"2000-06-07 11:29:52\"")
                .d("HASHED_GUID", "\"_EM_2877_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"db3382f6b1883f772bb7e53172ecd1ff3f638c5ea6f361aef78fbd207f3eb7d3\"")
                .d("TELE_TAN_HASH", "\"_EM_6371_XYZ_\"")
                .d("TAN_COUNTER", "-524288")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"4\\\"P\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 56L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2047-05-08 11:34:29\"")
                .d("UPDATED_AT", "\"2000-06-16 14:45:29\"")
                .d("VALID_FROM", "\"1984-05-29 00:22:47\"")
                .d("VALID_UNTIL", "\"2034-11-19 02:37:00\"")
                .d("TAN_HASH", "\"6951b805c59e970a8692c1ce63297568fe9eac5adec6f3449eb1f6baa5ba3ffd\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("cwa-fake", "1")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "_EM_324_XYZ_")
                .header("X-B3-TraceId", "")
                .header("X-CWA-TELETAN-TYPE", "fooy")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"4cd6ea32-8ed3-4c4d-9acf-84b8f8b7ead8\", " + 
                    " \"responsePadding\": \"_EM_321_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'testResult'", numberMatches(2.0))
                .body("'sc'", numberMatches(1.735247366E9))
                .body("'responsePadding'", containsString("vhLsrx7azql11QbO2sdDVWEUyjlPcqCNHkBsGl4A29AUN"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/version/v1/testresult
    */
    @Test(timeout = 60000)
    public void test_2_postOnTestresultReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 55L)
                .d("VERSION", "-262080")
                .d("CREATED_AT", "\"2028-10-16 02:29:29\"")
                .d("UPDATED_AT", "\"2001-08-20 11:29:29\"")
                .d("HASHED_GUID", "\"95e97eaf44ea476bc54d1f41a5f61459ef1e331681d105f74b5177051a9a8f2a\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_2599_XYZ_\"")
                .d("TELE_TAN_HASH", "\"_EM_U7QU_UUZ_\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"T6G\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 56L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1967-05-08 19:29:51\"")
                .d("UPDATED_AT", "\"2000-06-24 11:12:29\"")
                .d("VALID_FROM", "\"2100-06-30 20:29:29\"")
                .d("VALID_UNTIL", "\"1940-12-08 11:47:33\"")
                .d("TAN_HASH", "\"5b5a1f0a3b8784d567341b78327ffe8f2ea74611adf9dc4a8eb2d944ea989d2a\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("cwa-fake", "1")
                .header("x-EMextraHeader123", "")
                .header("b3", "IvYLEW3lD4DVM1")
                .header("X-B3-Sampled", "Eu4=z3wqIG7TLI")
                .header("X-CWA-TELETAN-TYPE", "_6M_]12_3_XYU_")
                .header("X-B3-Flags", "1")
                .header("X-B3-TraceId", "_EM_7853_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"f30cf511-ac08-4e4b-af08-d1b42500978d\", " + 
                    " \"responsePadding\": \"_EM_10784_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/testresult")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'testResult'", numberMatches(2.0))
                .body("'sc'", numberMatches(1.735247367E9))
                .body("'responsePadding'", containsString("Y0bTboamw6vd0t6itc2Pu3aLb8x47aWJJY6SICJbQQ7ez"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test(timeout = 60000)
    public void test_3_postOnTeletanReturns201UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 55L)
                .d("VERSION", "134217305")
                .d("CREATED_AT", "\"2042-10-11 18:05:35\"")
                .d("UPDATED_AT", "\"2000-11-16 22:33:29\"")
                .d("HASHED_GUID", "\"95e97eaf44ea476bc54d1f41a5f61459ef1e331681d105f74b5177051a9a8f2a\"")
                .d("REGISTRATION_TOKEN_HASH", "\"7e6f1104a2765736e5fb0bc521f9574616ba240f56f3743ad6efa3d587c8b93c\"")
                .d("TELE_TAN_HASH", "\"018966e997d851bb8883d3a4b2650113e02af71676a0138e7d5c0ace4888dadb\"")
                .d("TAN_COUNTER", "-2048")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_EM_12968_XYZ_\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 56L)
                .d("VERSION", "-327680")
                .d("CREATED_AT", "\"1967-05-08 08:38:03\"")
                .d("UPDATED_AT", "\"1900-05-16 22:17:29\"")
                .d("VALID_FROM", "\"1900-09-16 00:22:28\"")
                .d("VALID_UNTIL", "\"2004-06-19 02:29:00\"")
                .d("TAN_HASH", "\"5b5a1f0a3b8784d567341b78327ffe8f2ea74611adf9dc4a8eb2d944ea989d2a\"")
                .d("SOT", "NULL")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"7kjxE\"}")
                .header("x-EMextraHeader123", "")
                .header("b3", "nQa8Jy85h0qvItPk")
                .header("X-B3-Sampled", "faLsE")
                .header("X-CWA-TELETAN-TYPE", "TEST")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("DT4GTSJXV3"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test(timeout = 60000)
    public void test_4_postOnTeletanReturns201UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 55L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1906-01-16 01:21:21\"")
                .d("UPDATED_AT", "\"2000-06-16 00:59:22\"")
                .d("HASHED_GUID", "\"btXtRg1\\3PId\"")
                .d("REGISTRATION_TOKEN_HASH", "\"e5c0eca8ac279904c9418717a66133bf7a82c4b4f50d811fef582d23ad343ef2\"")
                .d("TELE_TAN_HASH", "\"UUUUiBofUUpUh\"")
                .d("TAN_COUNTER", "-9962751")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"cUU]gLQUBLFnQU0U\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 56L)
                .d("VERSION", "-15")
                .d("CREATED_AT", "\"2000-01-09 11:34:17\"")
                .d("UPDATED_AT", "\"2031-01-02 04:29:15\"")
                .d("VALID_FROM", "\"2000-10-18 00:29:29\"")
                .d("VALID_UNTIL", "\"2000-06-19 23:51:25\"")
                .d("TAN_HASH", "\"_EM_3110_XYZ_\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"CDUUHUUE[N6<r\"}")
                .header("x-EMextraHeader123", "")
                .header("b3", "uR6EsNMiaY")
                .header("X-B3-Flags", "-IBsmjo")
                .header("X-B3-TraceId", "jiHt")
                .header("X-CWA-TELETAN-TYPE", "EVENT")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("88HMSWHZMC"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test(timeout = 60000)
    public void test_5_postOnTeletanReturns201UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 154L)
                .d("VERSION", "-1828")
                .d("CREATED_AT", "\"2071-11-09 11:26:01\"")
                .d("UPDATED_AT", "\"2063-03-08 20:19:23\"")
                .d("HASHED_GUID", "\"khA2WJ5B\"")
                .d("REGISTRATION_TOKEN_HASH", "\"FJuqQp6D\"")
                .d("TELE_TAN_HASH", "NULL")
                .d("TAN_COUNTER", "823")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"_YneGZuj\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 155L)
                .d("VERSION", "906")
                .d("CREATED_AT", "\"2013-12-21 15:18:05\"")
                .d("UPDATED_AT", "\"2066-09-27 14:07:25\"")
                .d("VALID_FROM", "\"1912-10-11 12:23:32\"")
                .d("VALID_UNTIL", "\"2064-12-23 08:12:35\"")
                .d("TAN_HASH", "NULL")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EM_5804_XYZ_\"}")
                .header("x-EMextraHeader123", "")
                .header("x-b3-sampled", "_i2SWh9AAAr")
                .header("b3", "jV647jnrKC1MyNw")
                .header("X-B3-Sampled", "mp")
                .header("cwa-fake", "l0azO")
                .header("X-B3-Flags", "sVnNvLytf01")
                .header("x-cwa-teletan-type", "")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("W5HN6WNGF9"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test(timeout = 60000)
    public void test_6_postOnTeletanReturns201UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 121L)
                .d("VERSION", "311")
                .d("CREATED_AT", "\"2090-09-22 16:55:26\"")
                .d("UPDATED_AT", "\"1968-01-07 11:01:02\"")
                .d("HASHED_GUID", "\"_EM_3736_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"q_KZi\"")
                .d("TELE_TAN_HASH", "NULL")
                .d("TAN_COUNTER", "995")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"hwHnr2LSi\"")
                .d("TELETAN_TYPE", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"_EU_37U4_HUUU\"}")
                .header("x-EMextraHeader123", "")
                .header("b3", "_EM_632_XYZ_")
                .header("X-B3-Flags", "1")
                .header("X-B3-Sampled", "")
                .header("X-B3-TraceId", "cx9vQz0I7GS")
                .header("X-CWA-TELETAN-TYPE", "")
                .header("cwa-fake", "F")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("2H58K5UPDH"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/registrationToken
    */
    @Test(timeout = 60000)
    public void test_7_postOnRegistrationTokenReturns201UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 55L)
                .d("VERSION", "-262144")
                .d("CREATED_AT", "\"2028-10-16 02:29:29\"")
                .d("UPDATED_AT", "\"2000-06-21 11:29:29\"")
                .d("HASHED_GUID", "\"95e97eaf44ea476bc54d1f41a5f61459ef1e331681d105f74b5177051a9a8f2a\"")
                .d("REGISTRATION_TOKEN_HASH", "\"_EM_2599_XYZ_\"")
                .d("TELE_TAN_HASH", "\"_EM_U7QU_UUZ_\"")
                .d("TAN_COUNTER", "-2048")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"8cddf6a8664a84d7db0afa7481c7da5ee056e216c186b256fd8830ae1a9559c5\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 56L)
                .d("VERSION", "7898326")
                .d("CREATED_AT", "\"1967-05-08 11:34:18\"")
                .d("UPDATED_AT", "\"1900-04-20 11:29:29\"")
                .d("VALID_FROM", "\"2008-07-16 16:29:15\"")
                .d("VALID_UNTIL", "\"1900-06-12 06:29:29\"")
                .d("TAN_HASH", "\"_EM_9919_XYZ_\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"TEST\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("cwa-fake", "1")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "elo")
                .header("b3", "_EM_6730_XYZ_")
                .header("X-B3-Sampled", "foq")
                .header("X-B3-TraceId", "dook")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"63d3BB8f1eAEc2beFD6CcA774d407EcaEDc9bdfbADee3FDE8fEeE8De0cE3c9fc\", " + 
                    " \"keyDob\": \"xfF5b26bdFBBd3314bb6adc16B8dF1df516DeBDFCfaF4ACAcABA56dD0f690dbd\", " + 
                    " \"keyType\": \"GUID\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/registrationToken")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'registrationToken'", containsString("ee176284-9953-4709-902b-2a61b3b513bb"))
                .body("'responsePadding'", containsString("C"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan/teletan
    */
    @Test(timeout = 60000)
    public void test_8_postOnTeletanReturns201UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 55L)
                .d("VERSION", "133694041")
                .d("CREATED_AT", "\"2044-12-12 02:05:37\"")
                .d("UPDATED_AT", "\"2057-09-07 06:29:52\"")
                .d("HASHED_GUID", "\"95e97eaf44ea476bc54d1f41a5f61459ef1e331681d105f74b5177051a9a8f2a\"")
                .d("REGISTRATION_TOKEN_HASH", "\"db3382f6b1883f772bb7e53172ecd1ff3f638c5ea6f361aef78fbd207f3eb7d3\"")
                .d("TELE_TAN_HASH", "\"fkpKi2f2Vmcz\"")
                .d("TAN_COUNTER", "0")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"4\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 56L)
                .d("VERSION", "7900374")
                .d("CREATED_AT", "\"1967-05-08 04:34:17\"")
                .d("UPDATED_AT", "\"1900-05-16 22:13:29\"")
                .d("VALID_FROM", "\"1986-01-29 00:22:47\"")
                .d("VALID_UNTIL", "\"2000-06-19 02:39:00\"")
                .d("TAN_HASH", "\"2014-08-31 05:00:35\"")
                .d("SOT", "\"TELETAN\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "{\"token\":\"Sylp\"}")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "foo")
                .header("b3", "eoo")
                .header("X-B3-Sampled", "True")
                .header("X-B3-TraceId", "nw_")
                .header("x-b3-flags", "_EM_2596_XYZ_")
                .header("x-cwa-teletan-type", "EVENT")
                .header("cwa-fake", "fon")
                .post(baseUrlOfSut + "/version/v1/tan/teletan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'value'", containsString("N28RHEJGD3"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan
    */
    @Test(timeout = 60000)
    public void test_9_postOnTanReturns201UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 55L)
                .d("VERSION", "134217305")
                .d("CREATED_AT", "\"1980-10-12 02:05:35\"")
                .d("UPDATED_AT", "\"2000-11-27 22:33:29\"")
                .d("HASHED_GUID", "\"_EM_2877_XYZ_\"")
                .d("REGISTRATION_TOKEN_HASH", "\"7e6f1104a2765736e5fb0bc521f9574616ba240f56f3743ad6efa3d587c8b93c\"")
                .d("TELE_TAN_HASH", "\"018966e997d851bb8883d3a4b2650113e02af71676a0138e7d5c0ace4888dadb\"")
                .d("TAN_COUNTER", "-18432")
                .d("SOT", "\"TELETAN\"")
                .d("HASHED_GUID_DOB", "\"6d8acf44cc01d50fb6a6a288a4b0d60c9b91d14fc96922b782f846b0c6de149c\"")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .and().insertInto("TAN", 56L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"2055-12-31 11:54:00\"")
                .d("UPDATED_AT", "\"1900-05-15 22:17:31\"")
                .d("VALID_FROM", "\"1932-12-16 16:14:31\"")
                .d("VALID_UNTIL", "\"2006-06-19 02:29:00\"")
                .d("TAN_HASH", "\"6951b805c59e970a8692c1ce63297568fe9eac5adec6f3449eb1f6baa5ba3ffd\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TAN\"")
                .d("REDEEMED", "true")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("cwa-fake", "U6oaUPQP")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "_EM_5113_XYZ_")
                .header("b3", "Egf")
                .header("X-B3-Sampled", "FALsE")
                .header("X-B3-TraceId", "_EM_15521_XYZ_")
                .header("X-CWA-TELETAN-TYPE", "4\"")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"a1c7aede-4b68-4f66-9fd2-c15996588ee0\", " + 
                    " \"responsePadding\": \"U90O1cHA0UtNc\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("4783aa19-0a87-4d33-8465-56feaac98e7c"))
                .body("'responsePadding'", containsString("AJ97IqTyQbmi5TV"));
    }
    
    
    /**
    * Calls:
    * (201) POST:/version/v1/tan
    */
    @Test(timeout = 60000)
    public void test_10_postOnTanReturns201UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("APP_SESSION", 55L)
                .d("VERSION", "0")
                .d("CREATED_AT", "\"1906-01-16 01:21:21\"")
                .d("UPDATED_AT", "\"2000-06-16 00:59:22\"")
                .d("HASHED_GUID", "\"btXtRg1\\3PId\"")
                .d("REGISTRATION_TOKEN_HASH", "\"e5c0eca8ac279904c9418717a66133bf7a82c4b4f50d811fef582d23ad343ef2\"")
                .d("TELE_TAN_HASH", "\"UUUUiBofUUpUh\"")
                .d("TAN_COUNTER", "-9962751")
                .d("SOT", "\"HASHED_GUID\"")
                .d("HASHED_GUID_DOB", "\"cUU]gLQUBLFnQU0U\"")
                .d("TELETAN_TYPE", "\"TEST\"")
            .and().insertInto("TAN", 56L)
                .d("VERSION", "-15")
                .d("CREATED_AT", "\"2000-01-09 11:34:17\"")
                .d("UPDATED_AT", "\"2031-01-02 04:29:15\"")
                .d("VALID_FROM", "\"2000-10-18 00:29:29\"")
                .d("VALID_UNTIL", "\"2000-06-19 23:51:25\"")
                .d("TAN_HASH", "\"_EM_3110_XYZ_\"")
                .d("SOT", "\"CONNECTED_LAB\"")
                .d("TYPE", "\"TELETAN\"")
                .d("REDEEMED", "false")
                .d("TELETAN_TYPE", "\"EVENT\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("cwa-fake", "1")
                .header("x-EMextraHeader123", "")
                .header("X-B3-Flags", "_EM_10130_XYZ_")
                .header("b3", "uOsqFJsxYJqb")
                .header("X-B3-Sampled", "FalSe")
                .header("X-B3-TraceId", "hCyuy")
                .header("X-CWA-TELETAN-TYPE", "oS49l")
                .contentType("application/json")
                .body(" { " + 
                    " \"registrationToken\": \"b1a7deef-5a58-4156-Bee1-cf38b86951af\", " + 
                    " \"responsePadding\": \"_EM_10129_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/version/v1/tan")
                .then()
                .statusCode(201)
                .assertThat()
                .contentType("application/json")
                .body("'tan'", containsString("e976f044-748f-4400-9e36-acc323181799"))
                .body("'responsePadding'", containsString("EJtBtwbUcKblbNy"));
    }


}
