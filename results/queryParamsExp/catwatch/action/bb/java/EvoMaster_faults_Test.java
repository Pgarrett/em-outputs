import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-12-25T13:03:46.840-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 31 tests
 * <br>
*  Covered targets: 160
 * <br>
*  Used time: 0h 17m 35s
 * <br>
*  Needed budget for current results: 94%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * Calls:
    * (500) HEAD:/error
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_0_headOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. HEAD:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. HEAD:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .head(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/error
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_1_deleteOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. DELETE:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .delete(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(999.0))
                .body("'error'", containsString("None"))
                .body("'message'", containsString("No message available"));
    }
    
    
    /**
    * Calls:
    * (500) PATCH:/error
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_2_patchOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. PATCH:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PATCH:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .patch(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(999.0))
                .body("'error'", containsString("None"))
                .body("'message'", containsString("No message available"));
    }
    
    
    /**
    * Calls:
    * (500) PUT:/error
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_3_putOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. PUT:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .put(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(999.0))
                .body("'error'", containsString("None"))
                .body("'message'", containsString("No message available"));
    }
    
    
    /**
    * Calls:
    * (500) POST:/error
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_4_postOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .post(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(999.0))
                .body("'error'", containsString("None"))
                .body("'message'", containsString("No message available"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/error
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_5_getOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .get(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(999.0))
                .body("'error'", containsString("None"))
                .body("'message'", containsString("No message available"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/statistics/projects
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_6_getOnStatisticsProjectsWithQueryParamShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/statistics/projects
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 500 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/projects?organizations=cEy1IeGUj")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/projects"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/statistics/contributors
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_7_getOnStatisticsContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/statistics/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 500 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/contributors")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/contributors"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/statistics/contributors
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_8_getOnStatisticsContributorsWithQueryParamEmptyOrganizationsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/statistics/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 500 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/contributors?organizations=")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/contributors"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/statistics/projects
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_9_getOnStatisticsProjectsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/statistics/projects
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 500 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/projects")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/projects"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/contributors
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_10_getOnContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=7AshYi9M4z&" + 
                    "end_date=2CJmOLI0N&" + 
                    "sortBy=pP&" + 
                    "q=YanR1UzNlNZKwd")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("sortBy must be empty or have a valid value but was pP. Valid values are organizationalCommitsCount,organizationalProjectsCount,personalCommitsCount,personalProjectsCount,organizationName,name"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/contributors
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_11_getOnContributorsWithQueryParamsEmptyQShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=kMQ5kJXnI&" + 
                    "offset=147&" + 
                    "start_date=iBsMoVj882Sv&" + 
                    "end_date=i&" + 
                    "sortBy=0C9zHW&" + 
                    "q=")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("sortBy must be empty or have a valid value but was 0C9zHW. Valid values are organizationalCommitsCount,organizationalProjectsCount,personalCommitsCount,personalProjectsCount,organizationName,name"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/contributors
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_12_getOnContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=JjYfQQi0cQ3s8&" + 
                    "offset=250&" + 
                    "end_date=jluYgXm1&" + 
                    "q=4P1h6qLR3khPTEQg")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"jluYgXm1\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/contributors
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_13_getOnContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=DbcoxG1aHerY&" + 
                    "limit=458&" + 
                    "offset=55&" + 
                    "start_date=Cr4QnpzijpsKXk4G&" + 
                    "sortBy=VP")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("sortBy must be empty or have a valid value but was VP. Valid values are organizationalCommitsCount,organizationalProjectsCount,personalCommitsCount,personalProjectsCount,organizationName,name"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/contributors
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_14_getOnContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=ZYdWJqf2V2tF2&" + 
                    "limit=574&" + 
                    "offset=359&" + 
                    "end_date=4wQMqTnotUJc&" + 
                    "sortBy=5&" + 
                    "q=DA3ZGYGdve1BgY")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("sortBy must be empty or have a valid value but was 5. Valid values are organizationalCommitsCount,organizationalProjectsCount,personalCommitsCount,personalProjectsCount,organizationName,name"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    /**
    * Calls:
    * (500) GET:/projects
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_15_getOnProjectsWithQueryParamsNegativeOffsetShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/projects
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/projects -> Response status 500 not defined for path '/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=1jPBd2xs8FPFu&" + 
                    "limit=573&" + 
                    "offset=-182585398&" + 
                    "sortBy=txk7v6MnHqfxQ7")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("-182585398"))
                .body("'path'", containsString("/projects"));
    }
    
    
    /**
    * Calls:
    * (200) OPTIONS:/error
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_16_optionsOnErrorReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. OPTIONS:/error -> OPTIONS on path '/error' defines a response schema but no response body found.
        given().accept("*/*")
                .options(baseUrlOfSut + "/error")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/config
    * Found 6 potential faults of type-code 200
    */
    @Test(timeout = 60000)
    public void test_17_getOnConfigReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/github.login'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.database.driverClassName'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.datasource.platform'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.datasource.url'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.datasource.username'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.jpa.database'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .get(baseUrlOfSut + "/config")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'cache.path'", containsString("target/cache"))
                .body("'cache.size'", containsString("50"))
                .body("'endpoints.enabled'", containsString("false"))
                .body("'endpoints.health.enabled'", containsString("true"))
                .body("'github.login'", nullValue())
                .body("'organization.list'", containsString("zalando,zalando-stups,zalando-incubator"))
                .body("'schedule'", containsString("0 1 8 * * *"))
                .body("'scoring.project'", containsString("function(project) {var daysSinceLastPush = 0;if (project.lastPushed) {var tokens = project.lastPushed.split(\" \");var day = tokens[2];var month = tokens[1];var year = tokens[5];var lastPushedDate = new Date(day + ' ' + month + ' ' + year);var millisInDay = 86400000;daysSinceLastPush = Math.floor((new Date() - lastPushedDate) / millisInDay);}var maintainersPenalty = 0;if (project.maintainers.length < 2) {maintainersPenalty = 100;}return project.starsCount * 3 + project.forksCount * 2 + project.contributorsCount * 5 - daysSinceLastPush - maintainersPenalty}"))
                .body("'spring.database.driverClassName'", nullValue())
                .body("'spring.datasource.platform'", nullValue())
                .body("'spring.datasource.url'", nullValue())
                .body("'spring.datasource.username'", nullValue())
                .body("'spring.jpa.database'", nullValue())
                .body("'spring.jpa.hibernate.ddl-auto'", containsString("update"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics/projects
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_18_getOnProjectsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 400 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=VLCHhH&" + 
                    "end_date=l3aDg")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string l3aDg."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics/languages
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_19_getOnStatisticsLanguagesWithQueryParamEmptyStart_dateReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/languages -> Response status 400 not defined for path '/statistics/languages'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/languages?start_date=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string ."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics/contributors
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_20_getOnStatisticsContributorsWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 400 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/contributors?end_date=4dUUfbWIVujkPTPk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string 4dUUfbWIVujkPTPk."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_21_getOnStatisticsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics -> Response status 400 not defined for path '/statistics'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=PoHowR86lms&" + 
                    "start_date=oMXSSqZBkpQ&" + 
                    "end_date=fwSXrh0ASjF2O2VU")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for stardDate"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics/languages
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_22_getOnStatisticsLanguagesWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/languages -> Response status 400 not defined for path '/statistics/languages'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=GFmEz4_g8eIBmg&" + 
                    "end_date=knacoemM")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string knacoemM."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics/contributors
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_23_getOnStatisticsContributorsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 400 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "start_date=sD_XvVs7Z020sK&" + 
                    "end_date=W")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string sD_XvVs7Z020sK."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/statistics/projects
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_24_getOnProjectsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 400 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=z_oEq1mMvWHGsui&" + 
                    "start_date=0dzm7m30eDNs")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string 0dzm7m30eDNs."));
    }
    
    
    /**
    * Calls:
    * (400) GET:/projects
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_25_getOnProjectsWithQueryParamsNegativeLimitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/projects -> Response status 400 not defined for path '/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/projects?" + 
                    "limit=-1028009570&" + 
                    "end_date=1909-09-18T01%3A-1%3A27.454%2B01%3A31&" + 
                    "sortBy=bM&" + 
                    "q=loURz9JApW6wF6Y&" + 
                    "language=34BDJmh")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"))
                .body("'message'", containsString("Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '1909-09-18T01:-1:27.454+01:31'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [1909-09-18T01:-1:27.454+01:31]"))
                .body("'path'", containsString("/projects"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/projects
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_26_getOnProjectsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/projects -> Response status 400 not defined for path '/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=K7_iSrNGLz&" + 
                    "limit=882&" + 
                    "start_date=1903-13-08T03%3A54%3A53.334%2B10%3A00&" + 
                    "end_date=2096-02-26T01%3A30%3A16.544-03%3A33&" + 
                    "sortBy=T1v&" + 
                    "q=FMRbnFCsj4&" + 
                    "language=Qww6W9GvHO2z0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"))
                .body("'message'", containsString("Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '1903-13-08T03:54:53.334+10:00'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [1903-13-08T03:54:53.334+10:00]"))
                .body("'path'", containsString("/projects"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/init
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_27_getOnInitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/init -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .get(baseUrlOfSut + "/init")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/delete
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_28_getOnDeleteReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/delete -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .get(baseUrlOfSut + "/delete")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    /**
    * Calls:
    * (403) POST:/import
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_29_postOnImportReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/import -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .contentType("application/json")
                .body(" { " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"description\": \"GgcyePov\", " + 
                    " \"forksCount\": 137, " + 
                    " \"gitHubProjectId\": 276, " + 
                    " \"languageList\": [ " + 
                    " \"YB3G\", " + 
                    " \"eUv\", " + 
                    " \"tLFBDN18oA9fcqac\", " + 
                    " \"RIWP74Uvdxn3u\", " + 
                    " \"ridcAer\" " + 
                    " ], " + 
                    " \"maintainers\": [ " + 
                    " \"ALywQ3Rg\", " + 
                    " \"GJSbuVc7rd3\", " + 
                    " \"T\", " + 
                    " \"9egqaVvbV69\" " + 
                    " ], " + 
                    " \"organizationName\": \"dS6ZFbdb6mg5N\", " + 
                    " \"starsCount\": 944, " + 
                    " \"title\": \"w\", " + 
                    " \"url\": \"yYatZ5l\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }
    
    
    /**
    * Calls:
    * (403) POST:/config/scoring.project
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_30_postOnScoring_projectReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/config/scoring.project -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "8EKKV6D8_arz5")
                .contentType("application/json")
                .body(" \"8EKKV6D8_arz5\" ")
                .post(baseUrlOfSut + "/config/scoring.project")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }


}
