import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-28T19:42:55.185-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 30 tests
 * <br>
*  Covered targets: 158
 * <br>
*  Used time: 0h 16m 48s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_headOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. HEAD:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. HEAD:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .head(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_1_deleteOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. DELETE:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/error -> Response status 500 not defined for path '/error'.
        given().accept("text/html")
                .delete(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_2_patchOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. PATCH:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PATCH:/error -> Response status 500 not defined for path '/error'.
        given().accept("text/html")
                .patch(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_3_putOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. PUT:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/error -> Response status 500 not defined for path '/error'.
        given().accept("text/html")
                .put(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_4_postOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/error -> Response status 500 not defined for path '/error'.
        given().accept("text/html")
                .post(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_5_getOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/error -> Response status 500 not defined for path '/error'.
        given().accept("text/html")
                .get(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_6_getOnProjectsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/statistics/projects
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 500 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/projects?organizations=hN_WS7e")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/projects"));
    }
    
    
    @Test(timeout = 60000)
    public void test_7_getOnContributorsWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/statistics/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 500 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/contributors?organizations=PXmqqYXepvBqA4V2")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_8_getOnContributorsWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/statistics/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 500 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/contributors")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_9_getOnContributorsWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=XaK6KkN6gDLIRK&" + 
                    "limit=285&" + 
                    "start_date=QV&" + 
                    "end_date=MBD&" + 
                    "sortBy=Ipxh_sOu")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("sortBy must be empty or have a valid value but was Ipxh_sOu. Valid values are organizationalCommitsCount,organizationalProjectsCount,personalCommitsCount,personalProjectsCount,organizationName,name"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_10_getOnContributorsWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=909&" + 
                    "offset=381&" + 
                    "start_date=9Q&" + 
                    "q=v_oo51qjbtNG")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"9Q\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_11_getOnContributorsWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=mOwEUxMDU2d&" + 
                    "limit=87&" + 
                    "offset=885&" + 
                    "start_date=bvE99Mbo2&" + 
                    "q=yNP")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"bvE99Mbo2\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_12_getOnContributorsWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=8bDcKzpGuW5zG&" + 
                    "limit=460&" + 
                    "offset=524479687&" + 
                    "end_date=b3FWABK")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"b3FWABK\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_13_getOnContributorsWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=s86d&" + 
                    "limit=268&" + 
                    "offset=236&" + 
                    "start_date=&" + 
                    "sortBy=&" + 
                    "q=zSnqOYxiUBv")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_14_optionsOnErrorReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. OPTIONS:/error -> OPTIONS on path '/error' defines a response schema but no response body found.
        given().accept("*/*")
                .options(baseUrlOfSut + "/error")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_15_getOnConfigReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/github.login'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.database.driverClassName'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.datasource.platform'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.datasource.url'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.datasource.username'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.jpa.database'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .get(baseUrlOfSut + "/config")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'cache.path'", containsString("target/cache"))
                .body("'cache.size'", containsString("50"))
                .body("'endpoints.enabled'", containsString("false"))
                .body("'endpoints.health.enabled'", containsString("true"))
                .body("'github.login'", nullValue())
                .body("'organization.list'", containsString("zalando,zalando-stups,zalando-incubator"))
                .body("'schedule'", containsString("0 1 8 * * *"))
                .body("'scoring.project'", containsString("function(project) {var daysSinceLastPush = 0;if (project.lastPushed) {var tokens = project.lastPushed.split(\" \");var day = tokens[2];var month = tokens[1];var year = tokens[5];var lastPushedDate = new Date(day + ' ' + month + ' ' + year);var millisInDay = 86400000;daysSinceLastPush = Math.floor((new Date() - lastPushedDate) / millisInDay);}var maintainersPenalty = 0;if (project.maintainers.length < 2) {maintainersPenalty = 100;}return project.starsCount * 3 + project.forksCount * 2 + project.contributorsCount * 5 - daysSinceLastPush - maintainersPenalty}"))
                .body("'spring.database.driverClassName'", nullValue())
                .body("'spring.datasource.platform'", nullValue())
                .body("'spring.datasource.url'", nullValue())
                .body("'spring.datasource.username'", nullValue())
                .body("'spring.jpa.database'", nullValue())
                .body("'spring.jpa.hibernate.ddl-auto'", containsString("update"));
    }
    
    
    @Test(timeout = 60000)
    public void test_16_getOnProjectsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 400 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/projects?end_date=eoQZcscnp1BV")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string eoQZcscnp1BV."));
    }
    
    
    @Test(timeout = 60000)
    public void test_17_getOnLanguagesWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/languages -> Response status 400 not defined for path '/statistics/languages'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/languages?start_date=yf0BuKNSKgmW")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string yf0BuKNSKgmW."));
    }
    
    
    @Test(timeout = 60000)
    public void test_18_getOnContributorsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 400 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=pkASVWZ&" + 
                    "start_date=19rlAkp&" + 
                    "end_date=cdX_WongvN")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string 19rlAkp."));
    }
    
    
    @Test(timeout = 60000)
    public void test_19_getOnStatisticsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics -> Response status 400 not defined for path '/statistics'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics?end_date=d")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for endDate"));
    }
    
    
    @Test(timeout = 60000)
    public void test_20_getOnProjectsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 400 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "start_date=4Iwp8yagHOPrh7&" + 
                    "end_date=B31Jfy7SoZF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string 4Iwp8yagHOPrh7."));
    }
    
    
    @Test(timeout = 60000)
    public void test_21_getOnStatisticsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics -> Response status 400 not defined for path '/statistics'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=fJsy4moJrIed&" + 
                    "start_date=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for stardDate"));
    }
    
    
    @Test(timeout = 60000)
    public void test_22_getOnLanguagesWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/languages -> Response status 400 not defined for path '/statistics/languages'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=UsiKGZ0BEaGX4yDf&" + 
                    "start_date=a8VVR4uevp1KSse&" + 
                    "end_date=aoYyHPuss5w4E5")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string a8VVR4uevp1KSse."));
    }
    
    
    @Test(timeout = 60000)
    public void test_23_getOnProjectsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/projects -> Response status 400 not defined for path '/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/projects?" + 
                    "limit=5&" + 
                    "start_date=1969-00-15T03%3A16%3A10%2B19%3A24&" + 
                    "sortBy=8rU4Oxgrz&" + 
                    "q=2cYGkQ0vnxYn&" + 
                    "language=9ExEKQ95YC2BTok")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"))
                .body("'message'", containsString("Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '1969-00-15T03:16:10+19:24'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [1969-00-15T03:16:10+19:24]"))
                .body("'path'", containsString("/projects"));
    }
    
    
    @Test(timeout = 60000)
    public void test_24_getOnProjectsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/projects -> Response status 400 not defined for path '/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/projects?" + 
                    "offset=539&" + 
                    "end_date=2034-05-09T14%3A-1%3A44%2B04%3A00&" + 
                    "q=t")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"))
                .body("'message'", containsString("Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '2034-05-09T14:-1:44+04:00'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [2034-05-09T14:-1:44+04:00]"))
                .body("'path'", containsString("/projects"));
    }
    
    
    @Test(timeout = 60000)
    public void test_25_getOnProjectsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/projects -> Response status 400 not defined for path '/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=z&" + 
                    "limit=761&" + 
                    "offset=636&" + 
                    "start_date=2075-02-21T20%3A57%3A18Z&" + 
                    "end_date=1949-06-00T-1%3A12%3A23-05%3A34&" + 
                    "sortBy=FfF&" + 
                    "q=M3Fdr0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"))
                .body("'message'", containsString("Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '1949-06-00T-1:12:23-05:34'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [1949-06-00T-1:12:23-05:34]"))
                .body("'path'", containsString("/projects"));
    }
    
    
    @Test(timeout = 60000)
    public void test_26_getOnInitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/init -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .get(baseUrlOfSut + "/init")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    @Test(timeout = 60000)
    public void test_27_getOnDeleteReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/delete -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .get(baseUrlOfSut + "/delete")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    @Test(timeout = 60000)
    public void test_28_postOnImportReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/import -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .contentType("application/json")
                .body(" { " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"description\": \"lkQrRHwn8q\", " + 
                    " \"forksCount\": 988, " + 
                    " \"gitHubProjectId\": 840, " + 
                    " \"languageList\": [], " + 
                    " \"lastPushed\": \"puNVn4tk1\", " + 
                    " \"maintainers\": [ " + 
                    " \"tGv\", " + 
                    " \"dcCnY\", " + 
                    " \"2k\", " + 
                    " \"tpt05kB\" " + 
                    " ], " + 
                    " \"score\": 196 " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 762, " + 
                    " \"description\": \"yh956SMt\", " + 
                    " \"forksCount\": 126, " + 
                    " \"gitHubProjectId\": -1296499528, " + 
                    " \"languageList\": [ " + 
                    " \"67IT7UqySq5e\", " + 
                    " \"7qqrlJJbH8\", " + 
                    " \"XuqIvMyVt2HP4JQ\", " + 
                    " \"Y9MfldA2\", " + 
                    " \"v8YxyzkhOMxq\" " + 
                    " ], " + 
                    " \"lastPushed\": \"0cQ\", " + 
                    " \"maintainers\": [ " + 
                    " \"A\", " + 
                    " \"rBZijkOweKjG40nE\" " + 
                    " ], " + 
                    " \"primaryLanguage\": \"\", " + 
                    " \"title\": \"Q2\" " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 673, " + 
                    " \"contributorsCount\": 162, " + 
                    " \"description\": \"K24PRzyemAs5\", " + 
                    " \"externalContributorsCount\": -1972582796, " + 
                    " \"gitHubProjectId\": -125429580, " + 
                    " \"lastPushed\": \"nRAKTvM\", " + 
                    " \"maintainers\": [ " + 
                    " \"jVhMzVbL8DXN\", " + 
                    " \"flK4RzQi7M6LU\", " + 
                    " \"WDlZuaTGPH2Fd\", " + 
                    " \"u8KaYy\", " + 
                    " \"RzLMsQ3QDZ2tx8\" " + 
                    " ], " + 
                    " \"name\": \"boJTEPHdP87Hg\", " + 
                    " \"organizationName\": \"00QE\", " + 
                    " \"primaryLanguage\": \"gmzhW67L\", " + 
                    " \"snapshotDate\": \"2076-12-27T03:19:09Z\", " + 
                    " \"starsCount\": 761 " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }
    
    
    @Test(timeout = 60000)
    public void test_29_postOnScoring_projectReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/config/scoring.project -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "i")
                .contentType("application/json")
                .post(baseUrlOfSut + "/config/scoring.project")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }


}
