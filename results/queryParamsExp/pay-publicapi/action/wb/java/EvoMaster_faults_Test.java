import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-12-26T22:04:44.436-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 44 tests
 * <br>
*  Covered targets: 204
 * <br>
*  Used time: 0h 15m 0s
 * <br>
*  Needed budget for current results: 62%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.uk.gov.pay.api.app.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}/refunds/{refundId}
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_0_getOnRefundShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}/refunds/{refundId}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds/{refundId} -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds/{refundId} -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/payments/H4Wr_A/refunds/_EM_135_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_1_getOnPaymentRefundsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_139_XYZ_")
                .get(baseUrlOfSut + "/v1/payments/_EM_137_XYZ_/refunds")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/cancel
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_2_postOnCancelShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/cancel
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/v1/payments/JpMNqSv/cancel")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}/events
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_3_getOnEventsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}/events
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("X-Request-Id", "JCX")
                .header("X-Forwarded-For", "_EM_328_XYZ_")
                .get(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93/events?EMextraParam123=_EM_325_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments/{paymentId}
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_4_getOnPaymentShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments/{paymentId}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_259_XYZ_")
                .header("x-request-id", "NBELoys8Se4oS")
                .header("X-Request-Id", "_EM_260_XYZ_")
                .header("X-Forwarded-For", "dS2Z")
                .header("x-forwarded-for", "6ezSL2T")
                .get(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/capture
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_5_postOnCaptureShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/capture
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "42")
                .header("x-request-id", "foo")
                .header("X-Request-Id", "fop")
                .header("x-forwarded-for", "foo")
                .header("X-Forwarded-For", "foo")
                .post(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93/capture")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments/{paymentId}/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_6_postOnRefundsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments/{paymentId}/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 9999014 " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments/qSbRD0/refunds?EMextraParam123=42")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) POST:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    * Using 1 example:
    *   https://service-name.gov.uk/transactions/12345
    */
    @Test(timeout = 60000)
    public void test_7_postOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate POST:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 145, " + 
                    " \"reference\": \"1A1\", " + 
                    " \"description\": \"\", " + 
                    " \"email\": \"_EM_154_XYZ_\", " + 
                    " \"return_url\": \"https://service-name.gov.uk/transactions/12345\", " + 
                    " \"delayed_capture\": true, " + 
                    " \"moto\": false, " + 
                    " \"metadata\": { " + 
                    " \"_EM_156_XYZ_\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " } " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments?EMextraParam123=42")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_8_getOnRefundsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v1/refunds?" + 
                    "from_date=_EM_148_XYZ_&" + 
                    "to_date=UIqQiMXyVv9&" + 
                    "page=_EM_149_XYZ_&" + 
                    "display_size=_EM_150_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_9_getOnRefundsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_18_XYZ_")
                .header("x-forwarded-for", "_iaUe3iKZ36_L")
                .get(baseUrlOfSut + "/v1/refunds?" + 
                    "from_settled_date=_EM_828_XYZ_&" + 
                    "to_settled_date=z_y9JUF_qnDZm&" + 
                    "page=y0_vS_VR0&" + 
                    "display_size=zrZE2khlI1K9&" + 
                    "EMextraParam123=_EM_829_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_10_getOnRefundsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "")
                .header("X-Request-Id", "2sOR2yG4")
                .header("X-Forwarded-For", "mIXed")
                .get(baseUrlOfSut + "/v1/refunds?" + 
                    "from_date=sKMpYqaT&" + 
                    "to_date=_EM_881_XYZ_&" + 
                    "from_settled_date=8SsP&" + 
                    "to_settled_date=psRcW6mv2HEh8l&" + 
                    "display_size=qL54&" + 
                    "EMextraParam123=_EM_883_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/refunds
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_11_getOnV1RefundsWithQueryParamsEmptyFrom_settled_dateShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/refunds
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "2PWxXrlwl")
                .get(baseUrlOfSut + "/v1/refunds?" + 
                    "to_date=_EM_1034_XYZ_&" + 
                    "from_settled_date=&" + 
                    "to_settled_date=_EM_1035_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_12_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "email=_EM_140_XYZ_&" + 
                    "from_date=_EM_141_XYZ_&" + 
                    "display_size=_EM_143_XYZ_&" + 
                    "to_settled_date=rf_YCuPQ")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_13_getOnV1PaymentsWithQueryParamsEmptyCardholder_nameAndEmptyFrom_settled_dateShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_338_XYZ_")
                .header("X-Forwarded-For", "_EM_340_XYZ_")
                .header("x-forwarded-for", "3_")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "email=5Ne&" + 
                    "state=created&" + 
                    "to_date=V2uND&" + 
                    "cardholder_name=&" + 
                    "last_digits_card_number=WokoHXfjF5eW&" + 
                    "from_settled_date=&" + 
                    "EMextraParam123=_EM_337_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_14_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_958_XYZ_")
                .header("X-Request-Id", "wxjQMRUS")
                .header("X-Forwarded-For", "P8dW")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "state=failed&" + 
                    "card_brand=8B0yeRhBB&" + 
                    "from_date=2sniT&" + 
                    "page=wS&" + 
                    "cardholder_name=DfKDyQCL&" + 
                    "last_digits_card_number=_Z&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_15_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "wUCPZbx")
                .header("X-Request-Id", "vy_tYXorOi")
                .header("x-forwarded-for", "_EM_593_XYZ_")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "reference=_EM_585_XYZ_&" + 
                    "state=started&" + 
                    "display_size=MH3mP92NY9n&" + 
                    "cardholder_name=_EM_587_XYZ_&" + 
                    "first_digits_card_number=peN&" + 
                    "to_settled_date=_EM_589_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_16_getOnV1PaymentsWithQueryParamsEmptyCard_brandShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "email=5E_SmI28B9mMv&" + 
                    "state=error&" + 
                    "card_brand=&" + 
                    "from_date=X2vcHrcnBZHRpH&" + 
                    "display_size=2Ahk&" + 
                    "first_digits_card_number=_EM_1887_XYZ_&" + 
                    "to_settled_date=_EM_1889_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_17_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_3927_XYZ_")
                .header("X-Forwarded-For", "_EM_3929_XYZ_")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "email=_Ys1U8B5mnn&" + 
                    "state=cancelled&" + 
                    "page=_EM_3922_XYZ_&" + 
                    "display_size=_EM_3923_XYZ_&" + 
                    "first_digits_card_number=L&" + 
                    "last_digits_card_number=_EM_3924_XYZ_&" + 
                    "from_settled_date=CAH0lQ7rv9CFKseu&" + 
                    "to_settled_date=_EM_3925_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_18_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_643_XYZ_")
                .header("x-request-id", "xIX22OtYH9j")
                .header("x-forwarded-for", "_EM_645_XYZ_")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "state=success&" + 
                    "card_brand=J&" + 
                    "from_date=D25uGmT14K4W7X&" + 
                    "display_size=_EM_642_XYZ_&" + 
                    "cardholder_name=2XCf&" + 
                    "first_digits_card_number=4mYgT2&" + 
                    "last_digits_card_number=_sdSQAi&" + 
                    "from_settled_date=E&" + 
                    "to_settled_date=GQh_SglX")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (500) GET:/v1/payments
    * Found 3 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_19_getOnPaymentsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate GET:/v1/payments
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_2842_XYZ_")
                .header("x-forwarded-for", "_EM_2844_XYZ_")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "state=EVOMASTER&" + 
                    "card_brand=bpxAHnb&" + 
                    "from_date=HcK&" + 
                    "display_size=93&" + 
                    "first_digits_card_number=_EM_2840_XYZ_")
                .then()
                .statusCode(500)// uk/gov/pay/api/auth/AccountAuthenticator_42_authenticate
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(500.0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/v1/payments/{paymentId}/events
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_20_getOnEventsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> GET on path '/v1/payments/{paymentId}/events' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "j")
                .header("X-Request-Id", "U")
                .header("X-Forwarded-For", "")
                .header("x-forwarded-for", "")
                .get(baseUrlOfSut + "/v1/payments/GftzpnXMlvXG/events")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/v1/payments/{paymentId}/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_21_getOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds -> GET on path '/v1/payments/{paymentId}/refunds' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "3J2jEn46U")
                .header("X-Request-Id", "_EM_36812_XYZ_")
                .header("X-Forwarded-For", "")
                .header("x-forwarded-for", "")
                .get(baseUrlOfSut + "/v1/payments/_EM_75349_XYZ_/refunds")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/v1/payments/{paymentId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_22_getOnPaymentReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> GET on path '/v1/payments/{paymentId}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_24850_XYZ_")
                .header("X-Request-Id", "_EM_24851_XYZ_")
                .header("X-Forwarded-For", "")
                .header("x-forwarded-for", "")
                .get(baseUrlOfSut + "/v1/payments/_EM_38452_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/v1/payments
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_23_getOnV1PaymentsWithQueryParamsEmptyFirst_digits_card_numberReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> GET on path '/v1/payments' defines a response schema but no response body found.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_2851_XYZ_")
                .header("x-request-id", "cDaje3OQB7")
                .header("X-Request-Id", "CfJcrTm9Js")
                .header("X-Forwarded-For", "")
                .header("x-forwarded-for", "")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "state=submitted&" + 
                    "card_brand=_EM_2847_XYZ_&" + 
                    "from_date=Oci&" + 
                    "to_date=_EM_2848_XYZ_&" + 
                    "display_size=_EM_2849_XYZ_&" + 
                    "cardholder_name=h1daC&" + 
                    "first_digits_card_number=&" + 
                    "from_settled_date=No3w&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) POST:/v1/payments/{paymentId}/cancel
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_24_postOnCancelReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> Response Content-Type header 'text/html;charset=iso-8859-1' does not match any allowed types. Must be one of: [application/json].
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_2021_XYZ_")
                .header("X-Request-Id", "_EM_2022_XYZ_")
                .header("x-forwarded-for", "fo")
                .header("X-Forwarded-For", "foo")
                .post(baseUrlOfSut + "/v1/payments/N4iR/cancel")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/v1/payments/{paymentId}/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_25_getOnPaymentRefundsWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds -> Response status 400 not defined for path '/v1/payments/{paymentId}/refunds'.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_1768_XYZ_")
                .header("x-request-id", "LYVVkvj7EI")
                .header("X-Forwarded-For", "_EM_1770_XYZ_")
                .header("x-forwarded-for", "qQhLwlfxIs2")
                .get(baseUrlOfSut + "/v1/payments/_EM_2207_XYZ_/refunds?EMextraParam123=_EM_3_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/v1/payments/{paymentId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_26_getOnV1PaymentWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> Response status 400 not defined for path '/v1/payments/{paymentId}'.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_14108_XYZ_")
                .header("x-request-id", "_EM_14109_XYZ_")
                .header("X-Request-Id", "")
                .header("X-Forwarded-For", "_EM_15083_XYZ_")
                .header("x-forwarded-for", "SvLpGHOB")
                .get(baseUrlOfSut + "/v1/payments/_EM_14106_XYZ_?EMextraParam123=_EM_14107_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/v1/payments/{paymentId}/refunds/{refundId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_27_getOnRefundReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds/{refundId} -> Response status 400 not defined for path '/v1/payments/{paymentId}/refunds/{refundId}'.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "eu_MQ4rnrwSKF")
                .header("X-Request-Id", "_EM_20541_XYZ_")
                .header("X-Forwarded-For", "")
                .header("x-forwarded-for", "_EM_21069_XYZ_")
                .get(baseUrlOfSut + "/v1/payments/_EM_21068_XYZ_/refunds/0cW6")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/v1/payments/{paymentId}/events
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_28_getOnEventsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> Response status 400 not defined for path '/v1/payments/{paymentId}/events'.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "MQYdCRqZM5Q")
                .header("X-Request-Id", "wQeJaBnj5")
                .header("X-Forwarded-For", "qsXudFKCYZL3")
                .header("x-forwarded-for", "ul66")
                .get(baseUrlOfSut + "/v1/payments/HTnai0/events")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/v1/payments
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_29_postOnV1PaymentsWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> Response Content-Type header 'text/html;charset=iso-8859-1' does not match any allowed types. Must be one of: [application/json].
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "_EM_1186_XYZ_")
                .header("x-request-id", "foo")
                .header("X-Request-Id", "fo")
                .header("x-forwarded-for", "foo")
                .header("X-Forwarded-For", "foo")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 643, " + 
                    " \"reference\": \"oPdN\", " + 
                    " \"description\": \"_EM_1181_XYZ_\", " + 
                    " \"language\": \"en\", " + 
                    " \"return_url\": \"_EM_1182_XYZ_\", " + 
                    " \"metadata\": { " + 
                    " \"aiHDRRuV\": { " + 
                    " \"EM_tainted_map\": \"_EM_0_XYZ_\" " + 
                    " } " + 
                    " } " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments?EMextraParam123=_EM_1185_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/v1/payments/{paymentId}/capture
    * Found 1 potential fault of type-code 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_30_postOnPaymentCaptureWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> Response Content-Type header 'text/html;charset=iso-8859-1' does not match any allowed types. Must be one of: [application/json].
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "foo")
                .header("X-Request-Id", "fp")
                .header("x-forwarded-for", "_EM_23687_XYZ_")
                .header("X-Forwarded-For", "fol")
                .post(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93/capture?EMextraParam123=_EM_153_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) POST:/v1/payments/{paymentId}/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_31_postOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> Response status 400 not defined for path '/v1/payments/{paymentId}/refunds'.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_28791_XYZ_")
                .header("X-Request-Id", "foo")
                .header("x-forwarded-for", "_EM_28792_XYZ_")
                .header("X-Forwarded-For", "fo")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 9999014, " + 
                    " \"refund_amount_available\": 34 " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments/_EM_28790_XYZ_/refunds")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/v1/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_32_getOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> Response status 400 not defined for path '/v1/refunds'.
        given().accept("*/*")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_35921_XYZ_")
                .header("X-Request-Id", "_EM_23148_XYZ_")
                .header("X-Forwarded-For", "g")
                .header("x-forwarded-for", "nXHekCKzge")
                .get(baseUrlOfSut + "/v1/refunds?" + 
                    "from_date=Dn&" + 
                    "to_date=_EM_23146_XYZ_&" + 
                    "from_settled_date=_EM_35920_XYZ_&" + 
                    "to_settled_date=Sdvgn2HU6vf4p&" + 
                    "page=3z0jSCvkquQ8")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (401) GET:/v1/payments/{paymentId}/refunds/{refundId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_33_getOnRefundReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds/{refundId} -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/payments/E49/refunds/KhKvB6khJTMg")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/E49/refunds/KhKvB6khJTMg"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/v1/payments/{paymentId}/events
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_34_getOnEventsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/events -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v1/payments/_EM_2_XYZ_/events")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/_EM_2_XYZ_/events"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/v1/payments/{paymentId}/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_35_getOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/payments/Pcn/refunds")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/Pcn/refunds"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/v1/payments/{paymentId}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_36_getOnPaymentReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId} -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/v1/payments/_EM_4_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/_EM_4_XYZ_"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/v1/payments/{paymentId}/capture
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_37_postOnPaymentCaptureReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/capture -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/v1/payments/Ld/capture")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/Ld/capture"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/v1/payments/{paymentId}/cancel
    * Found 1 potential fault of type-code 200
    * Using 1 example:
    *   hu20sqlact5260q2nanm0q8u93
    */
    @Test(timeout = 60000)
    public void test_38_postOnCancelReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/cancel -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .header("x-request-id", "_EM_4068_XYZ_")
                .header("X-Request-Id", "foo")
                .header("x-forwarded-for", "foo")
                .header("X-Forwarded-For", "_EM_4069_XYZ_")
                .post(baseUrlOfSut + "/v1/payments/hu20sqlact5260q2nanm0q8u93/cancel")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/hu20sqlact5260q2nanm0q8u93/cancel"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/v1/payments/{paymentId}/refunds
    * Found 1 potential fault of type-code 200
    * Using 1 example:
    *   150000
    */
    @Test(timeout = 60000)
    public void test_39_postOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments/{paymentId}/refunds -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 150000, " + 
                    " \"refund_amount_available\": 9999058 " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments/_EM_22_XYZ_/refunds")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments/_EM_22_XYZ_/refunds"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) POST:/v1/payments
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_40_postOnV1PaymentsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/v1/payments -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"amount\": 671, " + 
                    " \"reference\": \"_EM_24_XYZ_\", " + 
                    " \"description\": \"_EM_25_XYZ_\", " + 
                    " \"language\": \"EVOMASTER\", " + 
                    " \"email\": \"_EM_26_XYZ_\", " + 
                    " \"return_url\": \"_EM_27_XYZ_\", " + 
                    " \"delayed_capture\": true, " + 
                    " \"moto\": false " + 
                    " } ")
                .post(baseUrlOfSut + "/v1/payments")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/v1/refunds
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_41_getOnRefundsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/refunds -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/v1/refunds?" + 
                    "from_date=_EM_15_XYZ_&" + 
                    "from_settled_date=Y&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/refunds"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (401) GET:/v1/payments
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_42_getOnV1PaymentsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_14_XYZ_")
                .get(baseUrlOfSut + "/v1/payments?" + 
                    "email=NJW&" + 
                    "state=failed&" + 
                    "from_date=RpkV3eFwOr&" + 
                    "to_date=_EM_7_XYZ_&" + 
                    "page=_EM_8_XYZ_&" + 
                    "cardholder_name=_EM_9_XYZ_&" + 
                    "first_digits_card_number=_EM_10_XYZ_&" + 
                    "last_digits_card_number=41yGW4yIqxw662Y&" + 
                    "from_settled_date=_EM_11_XYZ_&" + 
                    "to_settled_date=_EM_12_XYZ_&" + 
                    "EMextraParam123=_EM_13_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'servlet'", containsString("jersey"))
                .body("'message'", containsString("Unauthorized"))
                .body("'url'", containsString("/v1/payments"))
                .body("'status'", containsString("401"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/v1/payments/{paymentId}/refunds/{refundId}
    * Found 2 potential faults of type-code 200
    */
    @Test(timeout = 60000)
    public void test_43_getOnRefundReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds/{refundId} -> Object instance has properties which are not allowed by the schema: ["message"]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/v1/payments/{paymentId}/refunds/{refundId} -> [Path '/code'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("Authorization", "Bearer asdfghdasdjlguuolnga94upq3nrd2642sq7uel0oo") // foo
                .header("x-EMextraHeader123", "")
                .header("x-request-id", "_EM_85764_XYZ_")
                .header("X-Request-Id", "_EM_85765_XYZ_")
                .header("X-Forwarded-For", "zDtsx4dBSW2k4Jk")
                .get(baseUrlOfSut + "/v1/payments/;/refunds/_EM_34284_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'code'", numberMatches(404.0))
                .body("'message'", containsString("HTTP 404 Not Found"));
    }


}
