import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-12-25T19:53:11.122-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 80 tests
 * <br>
*  Covered targets: 542
 * <br>
*  Used time: 0h 15m 15s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.se.devscout.scoutapi.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("ACTIVITY","ACTIVITY_DERIVED","ACTIVITY_PROPERTIES","ACTIVITY_PROPERTIES_MEDIA_FILE","ACTIVITY_PROPERTIES_TAG","ACTIVITY_RATING","ACTIVITY_RELATION","MEDIA_FILE","MEDIA_FILE_KEYWORDS","SYSTEM_MESSAGE","TAG","TAG_DERIVED","USERS","USER_IDENTITY","tag"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (200) GET:/api/swagger.json
    */
    @Test(timeout = 60000)
    public void test_0_getOnSwagger_jsonReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/swagger.json")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/system/roles
    */
    @Test(timeout = 60000)
    public void test_1_getOnRolesReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_22_XYZ_")
                .get(baseUrlOfSut + "/api/v1/system/roles?EMextraParam123=_EM_21_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'permission_levels'.'category_edit'", numberMatches(10.0))
                .body("'permission_levels'.'mediaitem_create'", numberMatches(10.0))
                .body("'permission_levels'.'reference_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'system_message_read'", numberMatches(-100.0))
                .body("'permission_levels'.'auth_role_list'", numberMatches(20.0))
                .body("'permission_levels'.'reference_edit'", numberMatches(10.0))
                .body("'permission_levels'.'auth_user_create'", numberMatches(20.0))
                .body("'permission_levels'.'activity_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'comment_create'", numberMatches(0.0))
                .body("'permission_levels'.'category_create'", numberMatches(10.0))
                .body("'permission_levels'.'activity_edit'", numberMatches(10.0))
                .body("'permission_levels'.'reference_create'", numberMatches(10.0))
                .body("'permission_levels'.'mediaitem_edit'", numberMatches(10.0))
                .body("'permission_levels'.'auth_user_edit'", numberMatches(20.0))
                .body("'permission_levels'.'auth_profile_edit'", numberMatches(0.0))
                .body("'permission_levels'.'comment_edit'", numberMatches(10.0))
                .body("'permission_levels'.'system_message_manage'", numberMatches(20.0))
                .body("'permission_levels'.'mediaitem_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'auth_role_assignown'", numberMatches(10.0))
                .body("'permission_levels'.'rating_set_own'", numberMatches(0.0))
                .body("'permission_levels'.'auth_role_assign'", numberMatches(20.0))
                .body("'permission_levels'.'comment_edit_own'", numberMatches(0.0))
                .body("'permission_levels'.'activity_create'", numberMatches(0.0))
                .body("'role_levels'.'administrator'", numberMatches(20.0))
                .body("'role_levels'.'moderator'", numberMatches(10.0))
                .body("'role_levels'.'limited_user'", numberMatches(-1.0))
                .body("'role_levels'.'user'", numberMatches(0.0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/v2/activities
    */
    @Test(timeout = 60000)
    public void test_2_postOnActivitiesReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 3837L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_introduction\": \"xeyME_\", " + 
                    " \"description_main\": \"l2BCzUvodpApfVrg\", " + 
                    " \"description_notes\": \"\", " + 
                    " \"age_min\": -191, " + 
                    " \"participants_min\": 929, " + 
                    " \"source\": \"nO3Bml\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/activities")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'properties_revisions'.size()", equalTo(1))
                .body("'properties_revisions'[0].'date_created'", containsString("2024-12-25T19:53:03.977Z"))
                .body("'properties_revisions'[0].'description_introduction'", containsString("xeyME_"))
                .body("'properties_revisions'[0].'description_main'", containsString("l2BCzUvodpApfVrg"))
                .body("'properties_revisions'[0].'description_notes'", containsString(""))
                .body("'properties_revisions'[0].'age_min'", numberMatches(-191.0))
                .body("'properties_revisions'[0].'participants_min'", numberMatches(929.0))
                .body("'properties_revisions'[0].'source'", containsString("nO3Bml"))
                .body("'ratings_count'", numberMatches(0.0))
                .body("'ratings_sum'", numberMatches(0.0))
                .body("'favourites_count'", numberMatches(0.0))
                .body("'ratings_average'", numberMatches(-1.0))
                .body("'properties'.'date_created'", containsString("2024-12-25T19:53:03.977Z"))
                .body("'properties'.'description_introduction'", containsString("xeyME_"))
                .body("'properties'.'description_main'", containsString("l2BCzUvodpApfVrg"))
                .body("'properties'.'description_notes'", containsString(""))
                .body("'properties'.'age_min'", numberMatches(-191.0))
                .body("'properties'.'participants_min'", numberMatches(929.0))
                .body("'properties'.'source'", containsString("nO3Bml"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/users/profile
    */
    @Test(timeout = 60000)
    public void test_3_getOnUsersProfileReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users/profile")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'role_permissions'.size()", equalTo(9))
                .body("'role_permissions'", hasItems("activity_create", "activity_edit_own", "auth_profile_edit", "comment_create", "comment_edit_own", "mediaitem_edit_own", "rating_set_own", "reference_edit_own", "system_message_read"))
                .body("'name'", containsString("INTEGRATION TEST USER"))
                .body("'role'", containsString("user"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/users/profile
    */
    @Test(timeout = 60000)
    public void test_4_getOnUsersProfileWithQueryParamReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/users/profile?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'role_permissions'.size()", equalTo(9))
                .body("'role_permissions'", hasItems("activity_create", "activity_edit_own", "auth_profile_edit", "comment_create", "comment_edit_own", "mediaitem_edit_own", "rating_set_own", "reference_edit_own", "system_message_read"))
                .body("'name'", containsString("INTEGRATION TEST USER"))
                .body("'role'", containsString("user"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/v1/activities
    */
    @Test(timeout = 60000)
    public void test_5_postOnActivitiesReturns200() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"description_main\": \"2xG2XE1KITi8GFpt\", " + 
                    " \"description_notes\": \"\", " + 
                    " \"age_max\": -311, " + 
                    " \"time_min\": 803, " + 
                    " \"time_max\": 119, " + 
                    " \"source\": \"_EM_9517_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/activities")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'properties_revisions'.size()", equalTo(1))
                .body("'properties_revisions'[0].'date_created'", containsString("2024-12-25T19:52:57.100Z"))
                .body("'properties_revisions'[0].'description_main'", containsString("2xG2XE1KITi8GFpt"))
                .body("'properties_revisions'[0].'description_notes'", containsString(""))
                .body("'properties_revisions'[0].'age_max'", numberMatches(-311.0))
                .body("'properties_revisions'[0].'time_min'", numberMatches(803.0))
                .body("'properties_revisions'[0].'time_max'", numberMatches(119.0))
                .body("'properties_revisions'[0].'source'", containsString("_EM_9517_XYZ_"))
                .body("'ratings_count'", numberMatches(0.0))
                .body("'ratings_sum'", numberMatches(0.0))
                .body("'favourites_count'", numberMatches(0.0))
                .body("'ratings_average'", numberMatches(-1.0))
                .body("'properties'.'date_created'", containsString("2024-12-25T19:52:57.100Z"))
                .body("'properties'.'description_main'", containsString("2xG2XE1KITi8GFpt"))
                .body("'properties'.'description_notes'", containsString(""))
                .body("'properties'.'age_max'", numberMatches(-311.0))
                .body("'properties'.'time_min'", numberMatches(803.0))
                .body("'properties'.'time_max'", numberMatches(119.0))
                .body("'properties'.'source'", containsString("_EM_9517_XYZ_"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/favourites
    */
    @Test(timeout = 60000)
    public void test_6_getOnV1FavouritesReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/favourites")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/favourites
    */
    @Test(timeout = 60000)
    public void test_7_getOnV1FavouritesWithQueryParamReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/favourites?EMextraParam123=_EM_4896_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/activities/{id}/rating
    */
    @Test(timeout = 60000)
    public void test_8_getOnActivRatingReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 481L)
            .and().insertInto("MEDIA_FILE", 1562L)
                .d("URI", "\"YAdmg\"")
            .and().insertInto("TAG", 1561L)
                .d("GRP", "\"ftE\"")
                .d("NAME", "\"124908\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("USERS", 1695L)
                .d("AUTHORIZATION_LEVEL", "726")
                .d("NAME", "\"C55h2n0q5Rjxq\"")
            .and().insertInto("ACTIVITY", 1694L)
            .and().insertInto("ACTIVITY_RATING", 1693L)
                .r("ACTIVITY_ID", 1694L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "true")
                .d("RATING", "316")
            .and().insertInto("ACTIVITY", 118L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/2/rating")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/activities/{id}/rating
    */
    @Test(timeout = 60000)
    public void test_9_getOnRatingReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 481L)
            .and().insertInto("MEDIA_FILE", 1562L)
                .d("URI", "\"YAdmg\"")
            .and().insertInto("TAG", 1561L)
                .d("GRP", "\"ftE\"")
                .d("NAME", "\"umF\"")
                .r("MEDIA_FILE_ID", 1562L)
            .and().insertInto("ACTIVITY", 118L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/2/rating?attrs=Mv7vcjQA")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/activities/{id}/rating
    */
    @Test(timeout = 60000)
    public void test_10_getOnRatingReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 703L)
                .d("AUTHORIZATION_LEVEL", "221")
                .d("NAME", "\"ty\"")
            .and().insertInto("ACTIVITY", 702L)
            .and().insertInto("ACTIVITY", 701L)
            .and().insertInto("ACTIVITY_RELATION", 700L)
                .r("ACTIVITY_1_ID", 702L)
                .r("ACTIVITY_2_ID", 701L)
                .d("OWNER_ID", "3")
            .and().insertInto("MEDIA_FILE", 705L)
                .d("URI", "\"y9WoUUNNUPUnUSUD\"")
            .and().insertInto("TAG", 704L)
                .d("GRP", "\"0P2UptUi6iTUMi\"")
                .d("NAME", "\"_EM_18567_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 1229L)
                .d("URI", "\"RATINGS_4_1_4_\"")
            .and().insertInto("TAG", 1228L)
                .d("GRP", "\"_EM_18569_XYZ_\"")
                .d("NAME", "\"org.h2.mvstore.db.MVTable\"")
            .and().insertInto("TAG_DERIVED", 1227L)
                .r("TAG_ID", 704L)
                .d("ACTIVITIES_COUNT", "-524318")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities/2/rating?attrs=S")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/categories/{id}
    */
    @Test(timeout = 60000)
    public void test_11_getOnV1CategoriWithQueryParamsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/categories/113?" + 
                    "attrs=hc5Pkzs&" + 
                    "EMextraParam123=_EM_56_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/categories/{id}
    */
    @Test(timeout = 60000)
    public void test_12_getOnCategoriReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/categories/944?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/media_files
    */
    @Test(timeout = 60000)
    public void test_13_getOnV1Media_filesWithQueryParamsReturnsEmptyList() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_66_XYZ_")
                .get(baseUrlOfSut + "/api/v1/media_files?" + 
                    "uri=_EM_64_XYZ_&" + 
                    "attrs=_EM_65_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/media_files
    */
    @Test(timeout = 60000)
    public void test_14_getOnV1Media_filesWithQueryParamReturnsEmptyList() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_2086_XYZ_")
                .get(baseUrlOfSut + "/api/v1/media_files?EMextraParam123=_EM_2085_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/users
    */
    @Test(timeout = 60000)
    public void test_15_getOnUsersReturnsEmptyList() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_2094_XYZ_")
                .get(baseUrlOfSut + "/api/v1/users?" + 
                    "name=_EM_2092_XYZ_&" + 
                    "attrs=L2eFbB&" + 
                    "EMextraParam123=_EM_2093_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/v1/system_messages
    */
    @Test(timeout = 60000)
    public void test_16_postOnSystem_messagesReturns200() throws Exception {
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"key\": \"Szk8HobMKmS6Hg\", " + 
                    " \"value\": \"hcbS\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/system_messages?attrs=G5c7Q")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'key'", containsString("Szk8HobMKmS6Hg"))
                .body("'value'", containsString("hcbS"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_17_getOnV2ActivWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5_XYZ_")
                .get(baseUrlOfSut + "/api/v2/activities/409?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/system_messages/{id}
    */
    @Test(timeout = 60000)
    public void test_18_getOnV1System_messagWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_19_XYZ_")
                .get(baseUrlOfSut + "/api/v1/system_messages/677?attrs=_EM_17_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/media_files/{id}
    */
    @Test(timeout = 60000)
    public void test_19_getOnMedia_filReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/media_files/718")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/v1/media_files
    */
    @Test(timeout = 60000)
    public void test_20_postOnV1Media_filesWithQueryParamReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 914L)
                .d("URI", "\"_EM_17837_XYZ_\"")
            .and().insertInto("USERS", 913L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"Qre\"")
            .and().insertInto("ACTIVITY", 912L)
            .and().insertInto("ACTIVITY", 911L)
            .and().insertInto("ACTIVITY_PROPERTIES", 910L)
                .r("ACTIVITY_ID", 911L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 909L)
                .r("ACTIVITY_PROPERTIES_ID", 910L)
                .r("MEDIA_FILE_ID", 914L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 916L)
                .d("URI", "\"0nO_SDJYlsG\"")
            .and().insertInto("TAG", 915L)
                .d("GRP", "\"YHPr7lGKC>4QG\"")
                .d("NAME", "\"asIZw\"")
                .r("MEDIA_FILE_ID", 914L)
            .and().insertInto("MEDIA_FILE", 923L)
                .d("URI", "\"Benli90MU\"")
            .and().insertInto("TAG", 922L)
                .d("GRP", "\"zWPEJ6Q6FfOlhsX\"")
                .d("NAME", "\"Benlm90MU\"")
            .and().insertInto("USERS", 921L)
                .d("AUTHORIZATION_LEVEL", "310")
                .d("NAME", "\"J4\"")
            .and().insertInto("ACTIVITY", 920L)
            .and().insertInto("ACTIVITY", 919L)
            .and().insertInto("ACTIVITY_PROPERTIES", 918L)
                .r("ACTIVITY_ID", 919L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 917L)
                .r("ACTIVITY_PROPERTIES_ID", 910L)
                .r("TAG_ID", 922L)
            .and().insertInto("USERS", 3487L)
                .d("AUTHORIZATION_LEVEL", "695")
                .d("NAME", "\"twa7jWSVq2OGrM\"")
            .and().insertInto("ACTIVITY", 3486L)
            .and().insertInto("ACTIVITY", 3485L)
            .and().insertInto("ACTIVITY_RELATION", 3484L)
                .r("ACTIVITY_1_ID", 3485L)
                .r("ACTIVITY_2_ID", 911L)
                .d("OWNER_ID", "1")
            .and().insertInto("USERS", 3930L)
                .d("AUTHORIZATION_LEVEL", "979")
                .d("NAME", "\"DrXAL\"")
            .and().insertInto("ACTIVITY", 3929L)
            .and().insertInto("ACTIVITY_RATING", 3928L)
                .r("ACTIVITY_ID", 912L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "false")
                .d("RATING", "738")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"uri\": \"ZO3y6gp9qpIUr64v\", " + 
                    " \"name\": \"XbR3dike\", " + 
                    " \"capture_date\": \"2067-03-25T09:03:31.418Z\", " + 
                    " \"copy_right\": \"9H4Z\", " + 
                    " \"author\": \"rOiDespKodo\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files?attrs=qi7jw6g0zcc")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'uri'", containsString("ZO3y6gp9qpIUr64v"))
                .body("'name'", containsString("XbR3dike"))
                .body("'capture_date'", containsString("2067-03-25T09:03:31.418Z"))
                .body("'copy_right'", containsString("9H4Z"))
                .body("'author'", containsString("rOiDespKodo"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/tags/{id}
    */
    @Test(timeout = 60000)
    public void test_21_getOnV2TagWithQueryParamsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_25_XYZ_")
                .get(baseUrlOfSut + "/api/v2/tags/688?" + 
                    "attrs=188m2F&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_22_getOnActivReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities/666")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/users
    */
    @Test(timeout = 60000)
    public void test_23_getOnUsersReturns3ElementsUsingSql() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'name'", containsString("INTEGRATION TEST MODERATOR"))
                .body("[0].'email_address'", nullValue())
                .body("[0].'authorization_level'", numberMatches(10.0))
                .body("[0].'identities'.size()", equalTo(1))
                .body("[0].'identities'[0].'date_created'", numberMatches(9.811692E11))
                .body("[0].'identities'[0].'type'", containsString("API"))
                .body("[0].'identities'[0].'value'", containsString("moderator"))
                .body("[1].'name'", containsString("INTEGRATION TEST ADMINISTRATOR"))
                .body("[1].'email_address'", nullValue())
                .body("[1].'authorization_level'", numberMatches(20.0))
                .body("[1].'identities'.size()", equalTo(1))
                .body("[1].'identities'[0].'date_created'", numberMatches(9.811692E11))
                .body("[1].'identities'[0].'type'", containsString("API"))
                .body("[1].'identities'[0].'value'", containsString("administrator"))
                .body("[2].'name'", containsString("INTEGRATION TEST USER"))
                .body("[2].'email_address'", nullValue())
                .body("[2].'authorization_level'", numberMatches(0.0))
                .body("[2].'identities'.size()", equalTo(1))
                .body("[2].'identities'[0].'date_created'", numberMatches(9.811692E11))
                .body("[2].'identities'[0].'type'", containsString("API"))
                .body("[2].'identities'[0].'value'", containsString("user"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/system_messages/{id}
    */
    @Test(timeout = 60000)
    public void test_24_getOnV1System_messagReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "_EM_6773_XYZ_")
                .get(baseUrlOfSut + "/api/v1/system_messages/215")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_25_getOnV2ActivWithQueryParamsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/2947870618830765003?" + 
                    "attrs=_EM_1012_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/media_files/{id}
    */
    @Test(timeout = 60000)
    public void test_26_getOnV1Media_filWithQueryParamsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1041_XYZ_")
                .get(baseUrlOfSut + "/api/v1/media_files/502?" + 
                    "attrs=D9vygkRoh7BuQ&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/tags/{id}
    */
    @Test(timeout = 60000)
    public void test_27_getOnV2TagReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1048_XYZ_")
                .get(baseUrlOfSut + "/api/v2/tags/539")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_28_getOnV1ActivWithQueryParamsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/activities/324?" + 
                    "attrs=_EM_1054_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/tags/{id}
    */
    @Test(timeout = 60000)
    public void test_29_getOnTagReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 855L)
            .and().insertInto("USERS", 858L)
                .d("AUTHORIZATION_LEVEL", "-32")
                .d("NAME", "\"_EM_16749_XYZ_\"")
            .and().insertInto("ACTIVITY", 857L)
            .and().insertInto("ACTIVITY_RATING", 856L)
                .r("ACTIVITY_ID", 855L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "true")
                .d("RATING", "0")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/tags/-6769048966580011496?" + 
                    "attrs=7oTePkjCxzU&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/users/{id}
    */
    @Test(timeout = 60000)
    public void test_30_getOnV1UserWithQueryParamReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 1435L)
                .d("AUTHORIZATION_LEVEL", "904")
                .d("DATE_CREATED", "\"1981-08-27 04:33:07\"")
                .d("EMAIL_ADDRESS", "NULL")
                .d("NAME", "\"TL\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/1435?attrs=YY5kxft5zLPV")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/users/{id}
    */
    @Test(timeout = 60000)
    public void test_31_getOnUserReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 238L)
                .d("AUTHORIZATION_LEVEL", "105")
                .d("DATE_CREATED", "NULL")
                .d("EMAIL_ADDRESS", "NULL")
                .d("NAME", "\"p0NWtbT5lrt\"")
            .and().insertInto("MEDIA_FILE", 240L)
                .d("URI", "\"bLRxf\"")
            .and().insertInto("TAG", 239L)
                .d("GRP", "\"tJ01B\"")
                .d("NAME", "\"hKmHHt0Sf6\"")
                .r("MEDIA_FILE_ID", 240L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/-1738282641?" + 
                    "attrs=_EM_9343_XYZ_&" + 
                    "EMextraParam123=_EM_9344_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/categories/{id}
    */
    @Test(timeout = 60000)
    public void test_32_getOnCategoriReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/categories/-978642061?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/system_messages/{id}
    */
    @Test(timeout = 60000)
    public void test_33_getOnSystem_messagReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SYSTEM_MESSAGE", 76L)
                .d("KEY", "\"_EM_5877_XYZ_\"")
                .d("VALID_FROM", "\"1992-12-16 13:23:52\"")
                .d("VALID_TO", "\"2041-12-31 16:49:32\"")
                .d("VALUE", "\"NXAKAfm\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/v1/system_messages/-350?" + 
                    "attrs=_EM_5876_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/media_files/{id}
    */
    @Test(timeout = 60000)
    public void test_34_getOnMedia_filReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/media_files/-523878087")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_35_getOnActivReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 167L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities/-615?attrs=_EM_4_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_36_getOnActivReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities/-11936769")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/v1/media_files
    */
    @Test(timeout = 60000)
    public void test_37_postOnV1Media_filesReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 40L)
            .and().insertInto("USERS", 630L)
                .d("AUTHORIZATION_LEVEL", "720")
                .d("NAME", "\"A9WbRdJpPG8qsIrQ\"")
            .and().insertInto("ACTIVITY", 629L)
            .and().insertInto("ACTIVITY", 628L)
            .and().insertInto("ACTIVITY_RELATION", 627L)
                .r("ACTIVITY_1_ID", 628L)
                .r("ACTIVITY_2_ID", 628L)
                .d("OWNER_ID", "2")
            .and().insertInto("MEDIA_FILE", 1948L)
                .d("URI", "\"ulj9N\"")
            .and().insertInto("TAG", 1947L)
                .d("GRP", "\"kMEt7cz5V3B\"")
                .d("NAME", "\"M0m_A\"")
            .and().insertInto("TAG_DERIVED", 1946L)
                .r("TAG_ID", 1947L)
                .d("ACTIVITIES_COUNT", "-6723496136548811776")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"sG57muIQ8wa\", " + 
                    " \"uri\": \"k\", " + 
                    " \"capture_date\": \"2015-13-25T22:17:25.993Z\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'mime_type'", containsString("sG57muIQ8wa"))
                .body("'uri'", containsString("k"))
                .body("'capture_date'", containsString("2016-01-25T22:17:25.993Z"));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/v1/categories
    */
    @Test(timeout = 60000)
    public void test_38_postOnCategoriesReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 40L)
            .and().insertInto("USERS", 630L)
                .d("AUTHORIZATION_LEVEL", "720")
                .d("NAME", "\"A9WbRdJpPG8qsIrQ\"")
            .and().insertInto("ACTIVITY", 629L)
            .and().insertInto("ACTIVITY", 628L)
            .and().insertInto("ACTIVITY_RELATION", 627L)
                .r("ACTIVITY_1_ID", 40L)
                .r("ACTIVITY_2_ID", 40L)
                .d("OWNER_ID", "2")
            .and().insertInto("MEDIA_FILE", 1944L)
                .d("URI", "\"zJ5aVnISEt\"")
            .and().insertInto("TAG", 1943L)
                .d("GRP", "\"Jgr\"")
                .d("NAME", "\"pE6V0bzghSD\"")
            .and().insertInto("TAG_DERIVED", 1942L)
                .r("TAG_ID", 1943L)
                .d("ACTIVITIES_COUNT", "725")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"m0aKC07UD0R\", " + 
                    " \"name\": \"l1RXl\", " + 
                    " \"activities_count\": 1382613937 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?" + 
                    "min_activities_count=0D4oFaYay6VfSUSC&" + 
                    "attrs=as")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'group'", containsString("m0aKC07UD0R"))
                .body("'name'", containsString("l1RXl"))
                .body("'activities_count'", numberMatches(1.382613937E9));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/v2/tags
    */
    @Test(timeout = 60000)
    public void test_39_postOnTagsReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 3738L)
                .d("AUTHORIZATION_LEVEL", "686")
                .d("DATE_CREATED", "\"1915-09-29 02:26:14\"")
                .d("EMAIL_ADDRESS", "\"YpjNRcUfR\"")
                .d("NAME", "\"6DkJrglaxrgA5f0\"")
            .and().insertInto("MEDIA_FILE", 4275L)
                .d("AUTHOR", "NULL")
                .d("CAPTURE_DATE", "\"1941-01-21 15:49:24\"")
                .d("COPY_RIGHT", "\"uom4_\"")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "\"BS8hoa7R2N\"")
                .d("URI", "\"CTBbWnswXCeqyBm\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"YL2JT\", " + 
                    " \"name\": \"aZWTiZWHZnK\", " + 
                    " \"activities_count\": 75 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v2/tags?" + 
                    "name=aZWTiZWHZnK&" + 
                    "attrs=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'group'", containsString("YL2JT"))
                .body("'name'", containsString("aZWTiZWHZnK"))
                .body("'activities_count'", numberMatches(75.0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/tags
    */
    @Test(timeout = 60000)
    public void test_40_getOnV2TagsReturnsEmptyList() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/tags")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/v1/categories
    */
    @Test(timeout = 60000)
    public void test_41_postOnCategoriesReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 40L)
            .and().insertInto("USERS", 630L)
                .d("AUTHORIZATION_LEVEL", "720")
                .d("NAME", "\"A9WbRdJpPG8qsIrQ\"")
            .and().insertInto("ACTIVITY", 629L)
            .and().insertInto("ACTIVITY", 628L)
            .and().insertInto("ACTIVITY_RELATION", 627L)
                .r("ACTIVITY_1_ID", 628L)
                .r("ACTIVITY_2_ID", 40L)
                .r("OWNER_ID", 630L)
            .and().insertInto("MEDIA_FILE", 1944L)
                .d("URI", "\"zJ5aVnISEt\"")
            .and().insertInto("TAG", 1943L)
                .d("GRP", "\"Fgr\"")
                .d("NAME", "\"pE6V0bzghSD\"")
            .and().insertInto("TAG_DERIVED", 1942L)
                .r("TAG_ID", 1943L)
                .d("ACTIVITIES_COUNT", "725")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"m0aKC07UD0R\", " + 
                    " \"name\": \"l1RXl\", " + 
                    " \"activities_count\": 1382613937 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?" + 
                    "group=m0aKC07UD0R&" + 
                    "attrs=as")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'group'", containsString("m0aKC07UD0R"))
                .body("'name'", containsString("l1RXl"))
                .body("'activities_count'", numberMatches(1.382613937E9));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/v1/categories
    */
    @Test(timeout = 60000)
    public void test_42_postOnCategoriesReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 40L)
            .and().insertInto("USERS", 630L)
                .d("AUTHORIZATION_LEVEL", "720")
                .d("NAME", "\"A9WbRdJpPF8qsIrQ\"")
            .and().insertInto("ACTIVITY", 629L)
            .and().insertInto("ACTIVITY", 628L)
            .and().insertInto("ACTIVITY_RELATION", 627L)
                .r("ACTIVITY_1_ID", 628L)
                .r("ACTIVITY_2_ID", 40L)
                .r("OWNER_ID", 630L)
            .and().insertInto("MEDIA_FILE", 1944L)
                .d("URI", "\"zJ5aVnISEt\"")
            .and().insertInto("TAG", 1943L)
                .d("GRP", "\"Fgr\"")
                .d("NAME", "\"pE6V0bzghSD\"")
            .and().insertInto("TAG_DERIVED", 1942L)
                .r("TAG_ID", 1943L)
                .d("ACTIVITIES_COUNT", "725")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"m0aKC07UD0R\", " + 
                    " \"name\": \"l1RXl\", " + 
                    " \"activities_count\": 1382613937 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?" + 
                    "min_activities_count=0D4oFaYay6VfSUSC&" + 
                    "group=m0aKC07UD0R&" + 
                    "attrs=as")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'group'", containsString("m0aKC07UD0R"))
                .body("'name'", containsString("l1RXl"))
                .body("'activities_count'", numberMatches(1.382613937E9));
    }
    
    
    /**
    * Calls:
    * (200) POST:/api/v1/categories
    */
    @Test(timeout = 60000)
    public void test_43_postOnV1CategoriesWithQueryParamReturns200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 914L)
                .d("URI", "\"_EM_17837_XYZ_\"")
            .and().insertInto("USERS", 913L)
                .d("AUTHORIZATION_LEVEL", "2112953178")
                .d("NAME", "\"Qrf\"")
            .and().insertInto("ACTIVITY", 912L)
            .and().insertInto("ACTIVITY", 911L)
            .and().insertInto("ACTIVITY_PROPERTIES", 910L)
                .r("ACTIVITY_ID", 912L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 909L)
                .r("ACTIVITY_PROPERTIES_ID", 910L)
                .r("MEDIA_FILE_ID", 914L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 916L)
                .d("URI", "\"0nO_SDJYlsG\"")
            .and().insertInto("TAG", 915L)
                .d("GRP", "\"YHPr7lGKCB4QG\"")
                .d("NAME", "\"asIZw\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 923L)
                .d("URI", "\"Benli90MU\"")
            .and().insertInto("TAG", 922L)
                .d("GRP", "\"_EM_17838_XYZ_\"")
                .d("NAME", "\"OfceVAMzfaip\"")
            .and().insertInto("USERS", 921L)
                .d("AUTHORIZATION_LEVEL", "182")
                .d("NAME", "\"J4\"")
            .and().insertInto("ACTIVITY", 920L)
            .and().insertInto("ACTIVITY", 919L)
            .and().insertInto("ACTIVITY_PROPERTIES", 918L)
                .r("ACTIVITY_ID", 919L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 917L)
                .r("ACTIVITY_PROPERTIES_ID", 910L)
                .r("TAG_ID", 922L)
            .and().insertInto("USERS", 2844L)
                .d("AUTHORIZATION_LEVEL", "752")
                .d("NAME", "\"Q8x_iOoPjka\"")
            .and().insertInto("ACTIVITY", 2843L)
            .and().insertInto("ACTIVITY", 2842L)
            .and().insertInto("ACTIVITY_RELATION", 2841L)
                .r("ACTIVITY_1_ID", 2843L)
                .r("ACTIVITY_2_ID", 911L)
                .r("OWNER_ID", 921L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"group\": \"BL5J4qUSS\", " + 
                    " \"name\": \"S\", " + 
                    " \"activities_count\": 950 " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/categories?min_activities_count=Dg4Qz1dXo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'group'", containsString("BL5J4qUSS"))
                .body("'name'", containsString("S"))
                .body("'activities_count'", numberMatches(950.0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/tags
    */
    @Test(timeout = 60000)
    public void test_44_getOnTagsReturnsEmptyList() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "_EM_2091_XYZ_")
                .get(baseUrlOfSut + "/api/v2/tags?" + 
                    "name=_EM_2089_XYZ_&" + 
                    "min_activities_count=594&" + 
                    "attrs=_EM_2090_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/tags
    */
    @Test(timeout = 60000)
    public void test_45_getOnTagsReturnsEmptyList() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "_EM_1084_XYZ_")
                .get(baseUrlOfSut + "/api/v2/tags?" + 
                    "group=_EM_1081_XYZ_&" + 
                    "min_activities_count=3319222299628395183&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/categories
    */
    @Test(timeout = 60000)
    public void test_46_getOnCategoriesReturnsEmptyList() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/categories?" + 
                    "min_activities_count=388&" + 
                    "attrs=_EM_4408_XYZ_&" + 
                    "EMextraParam123=_EM_4409_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/categories
    */
    @Test(timeout = 60000)
    public void test_47_getOnV1CategoriesWithQueryParamsEmptyAttrsReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 703L)
                .d("AUTHORIZATION_LEVEL", "221")
                .d("NAME", "\"_EMU1U91U_XYX_\"")
            .and().insertInto("ACTIVITY", 702L)
            .and().insertInto("ACTIVITY", 701L)
            .and().insertInto("ACTIVITY_RELATION", 700L)
                .r("ACTIVITY_1_ID", 702L)
                .r("ACTIVITY_2_ID", 701L)
                .d("OWNER_ID", "2")
            .and().insertInto("MEDIA_FILE", 705L)
                .d("URI", "\"_EM_19942_XYZ_\"")
            .and().insertInto("TAG", 704L)
                .d("GRP", "\"0P2xptni6iT9M\"")
                .d("NAME", "\"_EM_19939_XYZ_\"")
                .r("MEDIA_FILE_ID", 705L)
            .and().insertInto("MEDIA_FILE", 1222L)
                .d("URI", "\"\"")
            .and().insertInto("TAG", 1221L)
                .d("GRP", "\"zwu8arJicGZ_n\"")
                .d("NAME", "\"FJ7I\"")
            .and().insertInto("TAG_DERIVED", 1220L)
                .r("TAG_ID", 1221L)
                .d("ACTIVITIES_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/categories?" + 
                    "group=_EM_19936_XYZ_&" + 
                    "attrs=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/tags
    */
    @Test(timeout = 60000)
    public void test_48_getOnV2TagsWithQueryParamsNegativeMin_activities_countReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 137L)
                .d("URI", "\"_EM_7625_XYZ_\"")
            .and().insertInto("TAG", 136L)
                .d("GRP", "\"_EM_7626_XYZ_\"")
                .d("NAME", "\"gsrB\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/tags?" + 
                    "group=_EM_7627_XYZ_&" + 
                    "min_activities_count=-6199435682874537117")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/system_messages
    */
    @Test(timeout = 60000)
    public void test_49_getOnSystem_messagesReturnsEmptyList() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "key=34ATQ&" + 
                    "valid=now_and_future&" + 
                    "attrs=cRr3cwizXsWE_9&" + 
                    "name=GyV")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/system_messages
    */
    @Test(timeout = 60000)
    public void test_50_getOnSystem_messagesReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 1661L)
                .d("URI", "\"q6Gsz8l\"")
            .and().insertInto("TAG", 1660L)
                .d("GRP", "\"\"")
                .d("NAME", "\"oDL2g\"")
                .d("MEDIA_FILE_ID", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "key=TktS0PYVM&" + 
                    "valid=now")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/categories
    */
    @Test(timeout = 60000)
    public void test_51_getOnV1CategoriesWithQueryParamsNegativeMin_activities_countReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 40L)
            .and().insertInto("ACTIVITY", 3210L)
            .and().insertInto("ACTIVITY", 3209L)
            .and().insertInto("ACTIVITY_RELATION", 3208L)
                .r("ACTIVITY_1_ID", 40L)
                .r("ACTIVITY_2_ID", 3210L)
                .d("OWNER_ID", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/categories?" + 
                    "group=cOyMyiyPoVSba&" + 
                    "min_activities_count=-3721383461272228673&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/categories
    */
    @Test(timeout = 60000)
    public void test_52_getOnCategoriesReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 703L)
                .d("AUTHORIZATION_LEVEL", "-35")
                .d("NAME", "\"]\"")
            .and().insertInto("ACTIVITY", 702L)
            .and().insertInto("ACTIVITY", 701L)
            .and().insertInto("ACTIVITY_RELATION", 700L)
                .r("ACTIVITY_1_ID", 701L)
                .r("ACTIVITY_2_ID", 702L)
                .d("OWNER_ID", "1")
            .and().insertInto("MEDIA_FILE", 705L)
                .d("URI", "\"y9VoYNRNBP2neT\"")
            .and().insertInto("TAG", 704L)
                .d("GRP", "\"0P2xrtni6iT9M\"")
                .d("NAME", "\"_EM_15256_XYZ_\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 718L)
                .d("URI", "\"_EM_27005_XYZ_\"")
            .and().insertInto("TAG", 717L)
                .d("GRP", "\"WrYULP<MNVjjPU\"")
                .d("NAME", "\"UNUgu\"")
            .and().insertInto("TAG_DERIVED", 716L)
                .r("TAG_ID", 704L)
                .d("ACTIVITIES_COUNT", "0")
            .and().insertInto("MEDIA_FILE", 1808L)
                .d("URI", "\"tMO9\"")
            .and().insertInto("USERS", 1807L)
                .d("AUTHORIZATION_LEVEL", "131570")
                .d("NAME", "\"2YVu44v7A\"")
            .and().insertInto("ACTIVITY", 1806L)
            .and().insertInto("ACTIVITY", 1805L)
            .and().insertInto("ACTIVITY_PROPERTIES", 1804L)
                .r("ACTIVITY_ID", 702L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 1803L)
                .r("ACTIVITY_PROPERTIES_ID", 1804L)
                .r("MEDIA_FILE_ID", 1808L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 1815L)
                .d("URI", "\"ui0XA\"")
            .and().insertInto("TAG", 1814L)
                .d("GRP", "\"a4yd1RYS\"")
                .d("NAME", "\"8\"")
            .and().insertInto("USERS", 1813L)
                .d("AUTHORIZATION_LEVEL", "441")
                .d("NAME", "\"im\"")
            .and().insertInto("ACTIVITY", 1812L)
            .and().insertInto("ACTIVITY", 1811L)
            .and().insertInto("ACTIVITY_PROPERTIES", 1810L)
                .r("ACTIVITY_ID", 1806L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 1809L)
                .r("ACTIVITY_PROPERTIES_ID", 1804L)
                .r("TAG_ID", 1814L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/categories?" + 
                    "group=_EM_27001_XYZ_&" + 
                    "attrs=_EM_15255_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/tags
    */
    @Test(timeout = 60000)
    public void test_53_getOnV2TagsWithQueryParamsReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 756L)
                .d("URI", "\"u_k3c0c_MKhUM\"")
            .and().insertInto("TAG", 755L)
                .d("GRP", "\"dQt\"")
                .d("NAME", "\"__UJ\"")
            .and().insertInto("TAG_DERIVED", 754L)
                .r("TAG_ID", 755L)
                .d("ACTIVITIES_COUNT", "0")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/tags?" + 
                    "group=bcABd0E&" + 
                    "name=_EM_34814_XYZ_&" + 
                    "min_activities_count=1130&" + 
                    "attrs=5NL3_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/categories
    */
    @Test(timeout = 60000)
    public void test_54_getOnCategoriesReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 703L)
                .d("AUTHORIZATION_LEVEL", "1048576")
                .d("NAME", "\"a\"")
            .and().insertInto("ACTIVITY", 702L)
            .and().insertInto("ACTIVITY", 701L)
            .and().insertInto("ACTIVITY_RELATION", 700L)
                .r("ACTIVITY_1_ID", 702L)
                .r("ACTIVITY_2_ID", 701L)
                .d("OWNER_ID", "2")
            .and().insertInto("MEDIA_FILE", 705L)
                .d("URI", "\"_EM_25603_XYZ_\"")
            .and().insertInto("TAG", 704L)
                .d("GRP", "\"0X2xrtni6iR9\"")
                .d("NAME", "\"8A\"")
                .r("MEDIA_FILE_ID", 705L)
            .and().insertInto("MEDIA_FILE", 718L)
                .d("URI", "\"_EM_25604_XYZ_\"")
            .and().insertInto("TAG", 717L)
                .d("GRP", "\"49114\"")
                .d("NAME", "\"XUf_t\"")
            .and().insertInto("TAG_DERIVED", 716L)
                .r("TAG_ID", 717L)
                .d("ACTIVITIES_COUNT", "-64")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/categories?" + 
                    "group=_EM_25600_XYZ_&" + 
                    "name=NVRUUo4KCmOVRLK&" + 
                    "min_activities_count=595")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/users/{id}
    */
    @Test(timeout = 60000)
    public void test_55_getOnUserReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 5800L)
                .d("AUTHOR", "\"\"")
                .d("CAPTURE_DATE", "\"2051-10-30 14:20:21\"")
                .d("COPY_RIGHT", "\"RcGMx3jYw3ZpNOg\"")
                .d("MIME_TYPE", "\"i\"")
                .d("NAME", "\"q\"")
                .d("URI", "\"StSvflg3edvqdL\"")
            .and().insertInto("ACTIVITY", 5801L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/724?" + 
                    "ratings_count_min=WteVk0UkjGmBhp&" + 
                    "featured=kjBCtWkgw&" + 
                    "favourites=Tevy8n4&" + 
                    "name=AjHCMcJRAK7kh&" + 
                    "id=zwsn0FxjMRIQ&" + 
                    "participants=cR6s9R")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/users/{id}
    */
    @Test(timeout = 60000)
    public void test_56_getOnUserReturnsObjectUsingSql() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("INTEGRATION TEST USER"))
                .body("'email_address'", nullValue())
                .body("'authorization_level'", numberMatches(0.0))
                .body("'identities'.size()", equalTo(1))
                .body("'identities'[0].'date_created'", numberMatches(9.811692E11))
                .body("'identities'[0].'type'", containsString("API"))
                .body("'identities'[0].'value'", containsString("user"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/users/{id}
    */
    @Test(timeout = 60000)
    public void test_57_getOnUserReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 3837L)
            .and().insertInto("MEDIA_FILE", 5704L)
                .d("AUTHOR", "\"AvLrKjX3sTSfN4NQ\"")
                .d("CAPTURE_DATE", "\"2057-08-24 00:20:37\"")
                .d("COPY_RIGHT", "\"Qtiy39gnhZ6J0\"")
                .d("MIME_TYPE", "NULL")
                .d("NAME", "NULL")
                .d("URI", "\"soomoFVEH\"")
            .and().insertInto("MEDIA_FILE", 5707L)
                .d("URI", "\"QFEqrAB_v\"")
            .and().insertInto("TAG", 5706L)
                .d("GRP", "\"VWZuK4Sfd0A\"")
                .d("NAME", "\"xlh7\"")
            .and().insertInto("TAG_DERIVED", 5705L)
                .r("TAG_ID", 5706L)
                .d("ACTIVITIES_COUNT", "217")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/182?" + 
                    "featured=D3hvbyxdFLmD9981&" + 
                    "categories=I&" + 
                    "id=E&" + 
                    "participants=YeaDQ7zhPewb")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/users/{id}
    */
    @Test(timeout = 60000)
    public void test_58_getOnUserReturnsContentUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 5548L)
                .d("AUTHORIZATION_LEVEL", "-1001193732")
                .d("DATE_CREATED", "NULL")
                .d("EMAIL_ADDRESS", "NULL")
                .d("NAME", "\"B\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/users/846?" + 
                    "my_favourites=H&" + 
                    "ratings_count_min=IFZ9PGBp8&" + 
                    "featured=BZsw1lAOMt&" + 
                    "favourites=u1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body(containsString("null"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/system_messages
    */
    @Test(timeout = 60000)
    public void test_59_getOnSystem_messagesReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 3662L)
                .d("URI", "\"_EM_45292_XYZ_\"")
            .and().insertInto("USERS", 3661L)
                .d("AUTHORIZATION_LEVEL", "0")
                .d("NAME", "\"_EM_35281_XYZ_\"")
            .and().insertInto("ACTIVITY", 3660L)
            .and().insertInto("ACTIVITY", 3659L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3658L)
                .r("ACTIVITY_ID", 3660L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 3657L)
                .r("ACTIVITY_PROPERTIES_ID", 3658L)
                .r("MEDIA_FILE_ID", 3662L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 3664L)
                .d("URI", "\"xEebLL3HM6\"")
            .and().insertInto("TAG", 3663L)
                .d("GRP", "\"P6uv\"")
                .d("NAME", "\"_EM_35282_XYZ_\"")
                .r("MEDIA_FILE_ID", 3662L)
            .and().insertInto("MEDIA_FILE", 3671L)
                .d("URI", "\"\"")
            .and().insertInto("TAG", 3670L)
                .d("GRP", "\"diIN234nqnn\"")
                .d("NAME", "\"_EM_35860_XYZ_\"")
            .and().insertInto("USERS", 3669L)
                .d("AUTHORIZATION_LEVEL", "567")
                .d("NAME", "\"m098XPdz\"")
            .and().insertInto("ACTIVITY", 3668L)
            .and().insertInto("ACTIVITY", 3667L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3666L)
                .r("ACTIVITY_ID", 3668L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 3665L)
                .r("ACTIVITY_PROPERTIES_ID", 3658L)
                .r("TAG_ID", 3670L)
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "my_favourites=_V&" + 
                    "favourites=k_8UTTfFWyGyNet&" + 
                    "ratings_average_min=HOQx&" + 
                    "ages=OI7fj4&" + 
                    "durations=rTBM6AQ&" + 
                    "categories=YFWpY1yVI0n")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/system_messages
    */
    @Test(timeout = 60000)
    public void test_60_getOnSystem_messagesReturns1ElementUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SYSTEM_MESSAGE", 960L)
                .d("KEY", "\"Lj5lFkGRDWtgcOeV\"")
                .d("VALID_FROM", "\"2055-07-05 23:13:59\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"_EM_17151_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "valid=now_and_future&" + 
                    "my_favourites=es&" + 
                    "favourites=45iUg&" + 
                    "ratings_average_min=dJdwVxmOXC13Vq&" + 
                    "ages=&" + 
                    "durations=gA_CtOyk872osK&" + 
                    "categories=&" + 
                    "participants=clo&" + 
                    "featured=qcbQNZiGvl84qMd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'key'", containsString("Lj5lFkGRDWtgcOeV"))
                .body("[0].'value'", containsString("_EM_17151_XYZ_"))
                .body("[0].'valid_to'", nullValue())
                .body("[0].'valid_from'", numberMatches(2.698452839E12));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/system_messages
    */
    @Test(timeout = 60000)
    public void test_61_getOnSystem_messagesReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 914L)
                .d("URI", "\"210319\"")
            .and().insertInto("USERS", 913L)
                .d("AUTHORIZATION_LEVEL", "8192")
                .d("NAME", "\"Qr^\"")
            .and().insertInto("ACTIVITY", 912L)
            .and().insertInto("ACTIVITY", 911L)
            .and().insertInto("ACTIVITY_PROPERTIES", 910L)
                .r("ACTIVITY_ID", 912L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 909L)
                .r("ACTIVITY_PROPERTIES_ID", 910L)
                .r("MEDIA_FILE_ID", 914L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 916L)
                .d("URI", "\"0nO_SDJYluG\"")
            .and().insertInto("TAG", 915L)
                .d("GRP", "\"YHPr7UUKCU3QD\"")
                .d("NAME", "\"asI\"")
                .r("MEDIA_FILE_ID", 914L)
            .and().insertInto("MEDIA_FILE", 923L)
                .d("URI", "\"_EM_39052_XYZ_\"")
            .and().insertInto("TAG", 922L)
                .d("GRP", "\"J5LHkDqAcWHHREN\"")
                .d("NAME", "\"8QkeNt\"")
            .and().insertInto("USERS", 921L)
                .d("AUTHORIZATION_LEVEL", "-5962")
                .d("NAME", "\"U0\"")
            .and().insertInto("ACTIVITY", 920L)
            .and().insertInto("ACTIVITY", 919L)
            .and().insertInto("ACTIVITY_PROPERTIES", 918L)
                .r("ACTIVITY_ID", 920L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 917L)
                .r("ACTIVITY_PROPERTIES_ID", 910L)
                .r("TAG_ID", 915L)
            .and().insertInto("USERS", 6903L)
                .d("AUTHORIZATION_LEVEL", "468")
                .d("NAME", "\"d8tnABg4qM2_\"")
            .and().insertInto("ACTIVITY", 6902L)
            .and().insertInto("ACTIVITY_RATING", 6901L)
                .r("ACTIVITY_ID", 6902L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "true")
                .d("RATING", "NULL")
            .and().insertInto("SYSTEM_MESSAGE", 6927L)
                .d("KEY", "\"0PpFzc20eqpsvjb\"")
                .d("VALID_FROM", "NULL")
                .d("VALID_TO", "\"1944-02-06 17:16:58\"")
                .d("VALUE", "\"UWFk5AqN\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "key=MVgHOj9Ixk&" + 
                    "valid=now&" + 
                    "attrs=onccc94HbwQjR&" + 
                    "favourites=G4TiP&" + 
                    "durations=Xy&" + 
                    "participants=z")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/system_messages
    */
    @Test(timeout = 60000)
    public void test_62_getOnSystem_messagesReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 914L)
                .d("URI", "\"210319\"")
            .and().insertInto("USERS", 913L)
                .d("AUTHORIZATION_LEVEL", "8192")
                .d("NAME", "\"Qr^\"")
            .and().insertInto("ACTIVITY", 912L)
            .and().insertInto("ACTIVITY", 911L)
            .and().insertInto("ACTIVITY_PROPERTIES", 910L)
                .r("ACTIVITY_ID", 912L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 909L)
                .r("ACTIVITY_PROPERTIES_ID", 910L)
                .r("MEDIA_FILE_ID", 914L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 916L)
                .d("URI", "\"0nO_SDJYluG\"")
            .and().insertInto("TAG", 915L)
                .d("GRP", "\"YHPr7UUKCU3QD\"")
                .d("NAME", "\"asI\"")
                .r("MEDIA_FILE_ID", 914L)
            .and().insertInto("MEDIA_FILE", 923L)
                .d("URI", "\"_EM_39052_XYZ_\"")
            .and().insertInto("TAG", 922L)
                .d("GRP", "\"J5LHkDqAcWHHREN\"")
                .d("NAME", "\"8QkeNt\"")
            .and().insertInto("USERS", 921L)
                .d("AUTHORIZATION_LEVEL", "-5962")
                .d("NAME", "\"U0\"")
            .and().insertInto("ACTIVITY", 920L)
            .and().insertInto("ACTIVITY", 919L)
            .and().insertInto("ACTIVITY_PROPERTIES", 918L)
                .r("ACTIVITY_ID", 920L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 917L)
                .r("ACTIVITY_PROPERTIES_ID", 910L)
                .r("TAG_ID", 915L)
            .and().insertInto("USERS", 6903L)
                .d("AUTHORIZATION_LEVEL", "468")
                .d("NAME", "\"d8tnABg4qM2_\"")
            .and().insertInto("ACTIVITY", 6902L)
            .and().insertInto("ACTIVITY_RATING", 6901L)
                .r("ACTIVITY_ID", 6902L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "true")
                .d("RATING", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "valid=now&" + 
                    "attrs=KkI4W&" + 
                    "my_favourites=x&" + 
                    "favourites=U9M74esc7g&" + 
                    "ages=zbNB3GfWAKdhfDB5&" + 
                    "durations=5VuM1ERLA6&" + 
                    "categories=sSnK0")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/system_messages
    */
    @Test(timeout = 60000)
    public void test_63_getOnSystem_messagesReturns1ElementUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("SYSTEM_MESSAGE", 960L)
                .d("KEY", "\"Lj5lFkGRDWtgcOeV\"")
                .d("VALID_FROM", "\"2055-07-05 23:13:59\"")
                .d("VALID_TO", "NULL")
                .d("VALUE", "\"_EM_17151_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "valid=now_and_future&" + 
                    "my_favourites=es&" + 
                    "favourites=45iUg&" + 
                    "ratings_average_min=dJdwVxmOXC13Vq&" + 
                    "ages=&" + 
                    "categories=&" + 
                    "participants=clo&" + 
                    "featured=qcbQNZiGvl84qMd")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'key'", containsString("Lj5lFkGRDWtgcOeV"))
                .body("[0].'value'", containsString("_EM_17151_XYZ_"))
                .body("[0].'valid_to'", nullValue())
                .body("[0].'valid_from'", numberMatches(2.698452839E12));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/system_messages
    */
    @Test(timeout = 60000)
    public void test_64_getOnSystem_messagesReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 5548L)
                .d("AUTHORIZATION_LEVEL", "-1001194212")
                .d("DATE_CREATED", "NULL")
                .d("EMAIL_ADDRESS", "NULL")
                .d("NAME", "\"B\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "valid=now_and_future&" + 
                    "my_favourites=6_qRjZTTlkF5Je&" + 
                    "favourites=rLymfB&" + 
                    "ratings_average_min=7LsjnvZ&" + 
                    "ages=JGW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/system_messages
    */
    @Test(timeout = 60000)
    public void test_65_getOnSystem_messagesReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 5548L)
                .d("AUTHORIZATION_LEVEL", "-1001194212")
                .d("DATE_CREATED", "NULL")
                .d("EMAIL_ADDRESS", "NULL")
                .d("NAME", "\"B\"")
            .and().insertInto("SYSTEM_MESSAGE", 6410L)
                .d("KEY", "\"pfrPv\"")
                .d("VALID_FROM", "\"2084-08-14 10:10:30\"")
                .d("VALID_TO", "\"1942-09-17 06:50:12\"")
                .d("VALUE", "\"WEcwqg\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/system_messages?" + 
                    "valid=now_and_future&" + 
                    "my_favourites=6_qRjZTTlkF5Je&" + 
                    "ratings_average_min=7LsjnvZ&" + 
                    "ages=JGW&" + 
                    "featured=2YOccMofsG2g8x")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * 1 - (200) POST:/api/v1/media_files
    * 2 - (200) PUT:/api/v1/media_files/{id}
    * 3 - (204) DELETE:/api/v1/media_files/{id}
    * 4 - (204) POST:/api/v1/favourites
    */
    @Test(timeout = 60000)
    public void test_66_postOnFavouritesReturns204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 1463L)
                .d("URI", "\"_EM_36635_XYZ_\"")
            .and().insertInto("TAG", 1462L)
                .d("GRP", "\"Ro_\"")
                .d("NAME", "\"ADl_y00\"")
                .r("MEDIA_FILE_ID", 1463L)
            .and().insertInto("MEDIA_FILE", 1645L)
                .d("URI", "\"3MioNljoUQ3Tt2\"")
            .and().insertInto("MEDIA_FILE_KEYWORDS", 1644L)
                .r("MEDIA_FILE_ID", 1645L)
                .d("KEYWORD", "\"tjZ4x5mlrowVSQ\"")
            .and().insertInto("MEDIA_FILE", 1651L)
                .d("URI", "\"_EM_36738_XYZ_\"")
            .and().insertInto("ACTIVITY", 1649L)
            .and().insertInto("ACTIVITY", 1648L)
            .and().insertInto("ACTIVITY_PROPERTIES", 1647L)
                .r("ACTIVITY_ID", 1649L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 1646L)
                .r("ACTIVITY_PROPERTIES_ID", 1647L)
                .r("MEDIA_FILE_ID", 1651L)
                .d("FEATURED", "true")
            .and().insertInto("ACTIVITY", 3794L)
            .and().insertInto("ACTIVITY_RATING", 3793L)
                .r("ACTIVITY_ID", 1648L)
                .d("USER_ID", "2")
                .d("FAVOURITE", "false")
                .d("RATING", "348")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        String location_media_files = "";
        
        ValidatableResponse res_0 = given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"mime_type\": \"GR\", " + 
                    " \"uri\": \"R1mw7MFruot\", " + 
                    " \"name\": \"i5Lb1XKqml4u\", " + 
                    " \"copy_right\": \"MFAjOxTlFEVldv\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/media_files")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'mime_type'", containsString("GR"))
                .body("'uri'", containsString("R1mw7MFruot"))
                .body("'name'", containsString("i5Lb1XKqml4u"))
                .body("'copy_right'", containsString("MFAjOxTlFEVldv"));
        location_media_files = "/api/v1/media_files" + "/" + res_0.extract().body().path("id").toString();
        
        given().accept("application/json")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"uri\": \"ZyVDyP?gKYT8\", " + 
                    " \"name\": \"DProT0NDQVXSR7q\", " + 
                    " \"author\": \"6WY9wRGOEYkQRll\" " + 
                    " } ")
                .put(resolveLocation(location_media_files, baseUrlOfSut + "/api/v1/media_files/-262144"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'uri'", containsString("ZyVDyP?gKYT8"))
                .body("'name'", containsString("DProT0NDQVXSR7q"))
                .body("'copy_right'", containsString("MFAjOxTlFEVldv"));
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .delete(resolveLocation(location_media_files, baseUrlOfSut + "/api/v1/media_files/-262144?verify_unused=true"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": [ " + 
                    " 878, " + 
                    " 786, " + 
                    " 761, " + 
                    " 444, " + 
                    " 574 " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/favourites")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/activities
    */
    @Test(timeout = 60000)
    public void test_67_getOnV2ActivitiesWithQueryParamsReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 3922L)
                .d("AUTHORIZATION_LEVEL", "2112")
                .d("NAME", "\"Q5pRK_b1RIKKfQY\"")
            .and().insertInto("ACTIVITY", 3921L)
            .and().insertInto("ACTIVITY", 3920L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3919L)
                .d("AGE_MAX", "NULL")
                .d("AGE_MIN", "-1073741758")
                .d("DATE_CREATED", "\"2098-12-04 11:33:46\"")
                .d("DATE_PUBLISHED", "NULL")
                .d("DATE_UPDATED", "\"1963-06-04 16:04:38\"")
                .d("DESCRIPTION_INTRODUCTION", "NULL")
                .d("DESCRIPTION_MAIN", "\"TCS9zoaZ\"")
                .d("DESCRIPTION_MATERIAL", "\"qf\"")
                .d("DESCRIPTION_NOTES", "\"_EM_37208_XYZ_\"")
                .d("DESCRIPTION_PREPARE", "\"HfQDk\"")
                .d("DESCRIPTION_SAFETY", "\"v_iTqdhnY\"")
                .d("FEATURED", "false")
                .d("NAME", "\"fh6S2\"")
                .d("PARTICIPANTS_MAX", "133")
                .d("PARTICIPANTS_MIN", "0")
                .d("SOURCE", "\"VsKm_S\"")
                .d("TIME_MAX", "669")
                .d("TIME_MIN", "682")
                .r("ACTIVITY_ID", 3921L)
                .d("AUTHOR_ID", "1")
                .d("PUBLISHING_ACTIVITY_ID", "NULL")
            .and().insertInto("ACTIVITY", 3924L)
            .and().insertInto("ACTIVITY_DERIVED", 3923L)
                .r("ACTIVITY_ID", 3920L)
                .d("FAVOURITES_COUNT", "889")
                .d("RATINGS_AVG", "0.6962121458823033")
                .d("RATINGS_COUNT", "815")
                .d("RATINGS_SUM", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "attrs=_EM_37207_XYZ_&" + 
                    "text=7a2UJ&" + 
                    "ratings_average_min=7.899155316580879&" + 
                    "random=969")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/activities
    */
    @Test(timeout = 60000)
    public void test_68_getOnV2ActivitiesWithQueryParamsNegativeRatings_average_minReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 3922L)
                .d("AUTHORIZATION_LEVEL", "1854")
                .d("NAME", "\"_EM_42126_XYZ_\"")
            .and().insertInto("ACTIVITY", 3921L)
            .and().insertInto("ACTIVITY", 3920L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3919L)
                .d("AGE_MAX", "-2147483293")
                .d("AGE_MIN", "-1073741774")
                .d("DATE_CREATED", "\"2098-10-04 19:29:46\"")
                .d("DATE_PUBLISHED", "\"1995-06-07 11:52:05\"")
                .d("DATE_UPDATED", "\"1963-06-04 16:04:38\"")
                .d("DESCRIPTION_INTRODUCTION", "\"Xj13fXT7x\"")
                .d("DESCRIPTION_MAIN", "\"TCS9zoaZ\"")
                .d("DESCRIPTION_MATERIAL", "\"qf\"")
                .d("DESCRIPTION_NOTES", "\"_EM_37208_XYZ_\"")
                .d("DESCRIPTION_PREPARE", "\"SYSTEM_SEQUENCE_F0B458CC_B74D_41BB_AC4F_3C0FD94398BE\"")
                .d("DESCRIPTION_SAFETY", "\"_EM_42068_XYZ_\"")
                .d("FEATURED", "true")
                .d("NAME", "\"oC38Eex94dY\"")
                .d("PARTICIPANTS_MAX", "0")
                .d("PARTICIPANTS_MIN", "0")
                .d("SOURCE", "\"VsKm_S3\"")
                .d("TIME_MAX", "669")
                .d("TIME_MIN", "8")
                .r("ACTIVITY_ID", 3921L)
                .d("AUTHOR_ID", "3")
                .r("PUBLISHING_ACTIVITY_ID", 3920L)
            .and().insertInto("ACTIVITY", 3924L)
            .and().insertInto("ACTIVITY_DERIVED", 3923L)
                .r("ACTIVITY_ID", 3920L)
                .d("FAVOURITES_COUNT", "889")
                .d("RATINGS_AVG", "-1.0019828398668158")
                .d("RATINGS_COUNT", "815")
                .d("RATINGS_SUM", "647")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "attrs=_EM_37207_XYZ_&" + 
                    "text=7%602UJ&" + 
                    "ratings_count_min=576&" + 
                    "ratings_average_min=-472.8485065846668&" + 
                    "random=1993&" + 
                    "favourites=84")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/activities
    */
    @Test(timeout = 60000)
    public void test_69_getOnV2ActivitiesWithQueryParamsFeaturedNegativeRandomReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 3922L)
                .d("AUTHORIZATION_LEVEL", "2111")
                .d("NAME", "\"FHKr9plef9B\"")
            .and().insertInto("ACTIVITY", 3921L)
            .and().insertInto("ACTIVITY", 3920L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3919L)
                .d("AGE_MAX", "-2147483293")
                .d("AGE_MIN", "-1073774542")
                .d("DATE_CREATED", "\"2098-12-04 19:29:46\"")
                .d("DATE_PUBLISHED", "NULL")
                .d("DATE_UPDATED", "\"1963-06-04 16:04:38\"")
                .d("DESCRIPTION_INTRODUCTION", "NULL")
                .d("DESCRIPTION_MAIN", "\"TCS9zoaZ6\"")
                .d("DESCRIPTION_MATERIAL", "\"iP0GO\"")
                .d("DESCRIPTION_NOTES", "\"388758\"")
                .d("DESCRIPTION_PREPARE", "\"FfQDk\"")
                .d("DESCRIPTION_SAFETY", "\"v_iTqdhnY\"")
                .d("FEATURED", "false")
                .d("NAME", "\"fh6S\"")
                .d("PARTICIPANTS_MAX", "-1915")
                .d("PARTICIPANTS_MIN", "0")
                .d("SOURCE", "\"VsKm_W\"")
                .d("TIME_MAX", "669")
                .d("TIME_MIN", "682")
                .r("ACTIVITY_ID", 3921L)
                .d("AUTHOR_ID", "NULL")
                .d("PUBLISHING_ACTIVITY_ID", "NULL")
            .and().insertInto("ACTIVITY", 3924L)
            .and().insertInto("ACTIVITY_DERIVED", 3923L)
                .r("ACTIVITY_ID", 3920L)
                .d("FAVOURITES_COUNT", "825")
                .d("RATINGS_AVG", "0.0")
                .d("RATINGS_COUNT", "4096")
                .d("RATINGS_SUM", "638")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "attrs=xzkMp7Hc5BTwRI&" + 
                    "text=7a2UJ&" + 
                    "featured=true&" + 
                    "ratings_count_min=585&" + 
                    "random=-15415&" + 
                    "favourites=65684")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/activities
    */
    @Test(timeout = 60000)
    public void test_70_getOnV2ActivitiesWithQueryParamsReturnsEmptyList() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "name=7V&" + 
                    "text=7a2UJ&" + 
                    "featured=false&" + 
                    "ratings_count_min=577&" + 
                    "ratings_average_min=0.38448090196138074&" + 
                    "favourites=148")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/activities
    */
    @Test(timeout = 60000)
    public void test_71_getOnActivitiesReturnsEmptyList() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "ratings_average_min=0.597400676766285&" + 
                    "favourites=328")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v1/activities
    */
    @Test(timeout = 60000)
    public void test_72_getOnActivitiesReturnsEmptyList() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v1/activities?" + 
                    "attrs=RxlJI&" + 
                    "ratings_average_min=0.4330046628295692")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/activities
    */
    @Test(timeout = 60000)
    public void test_73_getOnV2ActivitiesWithQueryParamsFeaturedReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 3922L)
                .d("AUTHORIZATION_LEVEL", "62")
                .d("NAME", "\"Q5pRK_b1RIKKfQY\"")
            .and().insertInto("ACTIVITY", 3921L)
            .and().insertInto("ACTIVITY", 3920L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3919L)
                .d("AGE_MAX", "NULL")
                .d("AGE_MIN", "-1073741774")
                .d("DATE_CREATED", "\"2098-10-04 19:29:46\"")
                .d("DATE_PUBLISHED", "NULL")
                .d("DATE_UPDATED", "NULL")
                .d("DESCRIPTION_INTRODUCTION", "NULL")
                .d("DESCRIPTION_MAIN", "\"TCS9zoaZ\"")
                .d("DESCRIPTION_MATERIAL", "\"qf\"")
                .d("DESCRIPTION_NOTES", "\"0TBthOHgF_vySn\"")
                .d("DESCRIPTION_PREPARE", "\"HfQDk\"")
                .d("DESCRIPTION_SAFETY", "\"v_iTqdhnY\"")
                .d("FEATURED", "false")
                .d("NAME", "\"fh6S\"")
                .d("PARTICIPANTS_MAX", "133")
                .d("PARTICIPANTS_MIN", "0")
                .d("SOURCE", "\"VsKm_S\"")
                .d("TIME_MAX", "669")
                .d("TIME_MIN", "682")
                .r("ACTIVITY_ID", 3921L)
                .d("AUTHOR_ID", "NULL")
                .d("PUBLISHING_ACTIVITY_ID", "NULL")
            .and().insertInto("ACTIVITY", 3924L)
            .and().insertInto("ACTIVITY_DERIVED", 3923L)
                .r("ACTIVITY_ID", 3920L)
                .d("FAVOURITES_COUNT", "889")
                .d("RATINGS_AVG", "0.6962121458823033")
                .d("RATINGS_COUNT", "815")
                .d("RATINGS_SUM", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "attrs=K&" + 
                    "text=7a2UJ&" + 
                    "featured=true&" + 
                    "ratings_count_min=577&" + 
                    "ratings_average_min=0.38448090196138074&" + 
                    "random=969&" + 
                    "favourites=148")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/v2/activities
    */
    @Test(timeout = 60000)
    public void test_74_getOnV2ActivitiesWithQueryParamsNegativeRandomAndNegativeFavouritesReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USERS", 3922L)
                .d("AUTHORIZATION_LEVEL", "2110")
                .d("NAME", "\"QUpUK]b1RIKKfQY\"")
            .and().insertInto("ACTIVITY", 3921L)
            .and().insertInto("ACTIVITY", 3920L)
            .and().insertInto("ACTIVITY_PROPERTIES", 3919L)
                .d("AGE_MAX", "-2147483293")
                .d("AGE_MIN", "-1073741774")
                .d("DATE_CREATED", "\"2100-02-04 19:29:46\"")
                .d("DATE_PUBLISHED", "\"1995-06-07 14:52:05\"")
                .d("DATE_UPDATED", "\"1963-06-04 16:04:38\"")
                .d("DESCRIPTION_INTRODUCTION", "NULL")
                .d("DESCRIPTION_MAIN", "\"TCS9zoaZ\"")
                .d("DESCRIPTION_MATERIAL", "\"qf\"")
                .d("DESCRIPTION_NOTES", "\"_EM_37208_XYZ_\"")
                .d("DESCRIPTION_PREPARE", "\"HfQDk\"")
                .d("DESCRIPTION_SAFETY", "\"v_iTqdhnY\"")
                .d("FEATURED", "true")
                .d("NAME", "\"fh6S2\"")
                .d("PARTICIPANTS_MAX", "133")
                .d("PARTICIPANTS_MIN", "0")
                .d("SOURCE", "\"VsKm_S\"")
                .d("TIME_MAX", "669")
                .d("TIME_MIN", "682")
                .r("ACTIVITY_ID", 3921L)
                .d("AUTHOR_ID", "NULL")
                .d("PUBLISHING_ACTIVITY_ID", "NULL")
            .and().insertInto("ACTIVITY", 3924L)
            .and().insertInto("ACTIVITY_DERIVED", 3923L)
                .r("ACTIVITY_ID", 3924L)
                .d("FAVOURITES_COUNT", "-6279")
                .d("RATINGS_AVG", "0.0")
                .d("RATINGS_COUNT", "815")
                .d("RATINGS_SUM", "638")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/v2/activities?" + 
                    "name=7V&" + 
                    "featured=false&" + 
                    "ratings_count_min=585&" + 
                    "ratings_average_min=7.899155316580879&" + 
                    "random=-55&" + 
                    "favourites=-8108")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (204) GET:/api/v1/system/ping
    */
    @Test(timeout = 60000)
    public void test_75_getOnPingReturns204() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_24_XYZ_")
                .get(baseUrlOfSut + "/api/v1/system/ping")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/api/v1/activities/{id}
    */
    @Test(timeout = 60000)
    public void test_76_deleteOnActivReturns204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("MEDIA_FILE", 914L)
                .d("URI", "\"_EM_17837_XYZ_\"")
            .and().insertInto("USERS", 913L)
                .d("AUTHORIZATION_LEVEL", "2113084250")
                .d("NAME", "\"Qre\"")
            .and().insertInto("ACTIVITY", 912L)
            .and().insertInto("ACTIVITY", 911L)
            .and().insertInto("ACTIVITY_PROPERTIES", 910L)
                .r("ACTIVITY_ID", 911L)
            .and().insertInto("ACTIVITY_PROPERTIES_MEDIA_FILE", 909L)
                .r("ACTIVITY_PROPERTIES_ID", 910L)
                .r("MEDIA_FILE_ID", 914L)
                .d("FEATURED", "false")
            .and().insertInto("MEDIA_FILE", 916L)
                .d("URI", "\"0nO_SDJYlsG\"")
            .and().insertInto("TAG", 915L)
                .d("GRP", "\"YHPr7lGKCB4QG\"")
                .d("NAME", "\"asIZw\"")
                .d("MEDIA_FILE_ID", "NULL")
            .and().insertInto("MEDIA_FILE", 923L)
                .d("URI", "\"Benli90MU\"")
            .and().insertInto("TAG", 922L)
                .d("GRP", "\"zWPEJ6Q6FfOlhsX\"")
                .d("NAME", "\"_EM_34223_XYZ_\"")
            .and().insertInto("USERS", 921L)
                .d("AUTHORIZATION_LEVEL", "182")
                .d("NAME", "\"J4\"")
            .and().insertInto("ACTIVITY", 920L)
            .and().insertInto("ACTIVITY", 919L)
            .and().insertInto("ACTIVITY_PROPERTIES", 918L)
                .r("ACTIVITY_ID", 920L)
            .and().insertInto("ACTIVITY_PROPERTIES_TAG", 917L)
                .r("ACTIVITY_PROPERTIES_ID", 910L)
                .r("TAG_ID", 922L)
            .and().insertInto("USERS", 3487L)
                .d("AUTHORIZATION_LEVEL", "695")
                .d("NAME", "\"twa7jWSVq2OGrM\"")
            .and().insertInto("ACTIVITY", 3486L)
            .and().insertInto("ACTIVITY", 3485L)
            .and().insertInto("ACTIVITY_RELATION", 3484L)
                .r("ACTIVITY_1_ID", 3485L)
                .r("ACTIVITY_2_ID", 911L)
                .d("OWNER_ID", "1")
            .and().insertInto("USERS", 3930L)
                .d("AUTHORIZATION_LEVEL", "979")
                .d("NAME", "\"DrXAL\"")
            .and().insertInto("ACTIVITY", 3929L)
            .and().insertInto("ACTIVITY_RATING", 3928L)
                .r("ACTIVITY_ID", 919L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "false")
                .d("RATING", "738")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey moderator") // moderator
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/activities/1")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/api/v1/activities/{id}/rating
    */
    @Test(timeout = 60000)
    public void test_77_deleteOnRatingReturns204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 1175L)
            .and().insertInto("SYSTEM_MESSAGE", 1223L)
                .d("KEY", "\"vVAWHyO\"")
                .d("VALID_FROM", "\"1975-11-09 11:29:29\"")
                .d("VALID_TO", "\"1989-06-23 19:12:46\"")
                .d("VALUE", "\"_EM_29087_XYZ_\"")
            .and().insertInto("MEDIA_FILE", 1525L)
                .d("URI", "\"FE011zqmTOJa\"")
            .and().insertInto("TAG", 1524L)
                .d("GRP", "\"9Hpwlc\"")
                .d("NAME", "\"Y5RglsFevapo\"")
                .r("MEDIA_FILE_ID", 1525L)
            .and().insertInto("MEDIA_FILE", 1528L)
                .d("URI", "\"_EM_23937_XYZ_\"")
            .and().insertInto("TAG", 1527L)
                .d("GRP", "\"AW27c5\"")
                .d("NAME", "\"gm2WXmmAFw8RDAh\"")
            .and().insertInto("TAG_DERIVED", 1526L)
                .r("TAG_ID", 1527L)
                .d("ACTIVITIES_COUNT", "95")
            .and().insertInto("USERS", 1542L)
                .d("AUTHORIZATION_LEVEL", "642")
                .d("DATE_CREATED", "\"1922-06-01 15:09:09\"")
                .d("EMAIL_ADDRESS", "\"_EM_23940_XYZ_\"")
                .d("NAME", "\"_EM_29088_XYZ_\"")
            .and().insertInto("USERS", 2114L)
                .d("AUTHORIZATION_LEVEL", "643")
                .d("NAME", "\"_EM_29089_XYZ_\"")
            .and().insertInto("ACTIVITY", 2113L)
            .and().insertInto("ACTIVITY_RATING", 2112L)
                .r("ACTIVITY_ID", 1175L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "true")
                .d("RATING", "585")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/v1/activities/1/rating")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) POST:/api/v1/favourites
    */
    @Test(timeout = 60000)
    public void test_78_postOnFavouritesReturns204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 855L)
            .and().insertInto("ACTIVITY", 857L)
            .and().insertInto("ACTIVITY_RATING", 856L)
                .r("ACTIVITY_ID", 857L)
                .d("USER_ID", "3")
                .d("FAVOURITE", "true")
                .d("RATING", "707")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey administrator") // administrator
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": [ " + 
                    " 29, " + 
                    " 0, " + 
                    " 0, " + 
                    " 0 " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/favourites")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) POST:/api/v1/favourites
    */
    @Test(timeout = 60000)
    public void test_79_postOnFavouritesReturns204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ACTIVITY", 847L)
            .and().insertInto("USERS", 850L)
                .d("AUTHORIZATION_LEVEL", "346")
                .d("NAME", "\"ErLSS25J\"")
            .and().insertInto("ACTIVITY", 849L)
            .and().insertInto("ACTIVITY_RATING", 848L)
                .r("ACTIVITY_ID", 847L)
                .d("USER_ID", "1")
                .d("FAVOURITE", "true")
                .d("RATING", "993")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "ApiKey user") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"id\": [ " + 
                    " 615, " + 
                    " 874, " + 
                    " 25 " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/api/v1/favourites")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
