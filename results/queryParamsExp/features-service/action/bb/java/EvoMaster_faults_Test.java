import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-12-25T12:45:55.145-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 13 tests
 * <br>
*  Covered targets: 56
 * <br>
*  Used time: 0h 16m 3s
 * <br>
*  Needed budget for current results: 75%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_0_deleteOnProductCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. DELETE:/products/{productName}
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/n")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_1_getOnProductCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/products/{productName}
        given().accept("*/*")
                .get(baseUrlOfSut + "/products/lrGEg_VvNF6")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_2_deleteOnProductFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. DELETE:/products/{productName}/features/{featureName}
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/i1DmhuayVABSdfSY/features/AIBnd")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}/features
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_3_getOnProductFeaturesCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/products/{productName}/features
        given().accept("*/*")
                .get(baseUrlOfSut + "/products/uv6HsB1zNfayx/features")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}/configurations/{configurationName}/features
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_4_getOnConfigurFeaturesCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/products/{productName}/configurations/{configurationName}/features
        given().accept("*/*")
                .get(baseUrlOfSut + "/products/RxjMVl9dsotzX/configurations/HtCWZhLD_3CBi/features")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/configurations/{configurationName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_5_postOnConfigurCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/products/{productName}/configurations/{configurationName}
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/nEWOA/configurations/i8b")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/configurations/{configurationName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_6_deleteOnConfigurFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. DELETE:/products/{productName}/configurations/{configurationName}/features/{featureName}
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/Dh7MUwH2a/configurations/v96GfeAcUbZfJCRX/features/vQsP")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/configurations/{configurationName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_7_postOnConfigurFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/products/{productName}/configurations/{configurationName}/features/{featureName}
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/Bd0/configurations/Gmc/features/S2117")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/configurations/{configurationName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_8_deleteOnConfigurCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. DELETE:/products/{productName}/configurations/{configurationName}
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ueyxHSpbPtmrH/configurations/IRHftCdnO4")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/constraints/excludes
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_9_postOnExcludesCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/products/{productName}/constraints/excludes
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("excludedFeature=KFKhojxuuT_79hMW")
                .post(baseUrlOfSut + "/products/3H4Bwwg/constraints/excludes")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/constraints/requires
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_10_postOnRequiresCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/products/{productName}/constraints/requires
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/5g/constraints/requires")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_11_postOnProductFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/products/{productName}/features/{featureName}
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=8qO7eQpLGqDsB")
                .post(baseUrlOfSut + "/products/H4/features/ap7pYUh")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) PUT:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_12_putOnFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. PUT:/products/{productName}/features/{featureName}
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(baseUrlOfSut + "/products/9Zm19OjxtKHeHL/features/xdVYAG")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("text/html");
    }


}
