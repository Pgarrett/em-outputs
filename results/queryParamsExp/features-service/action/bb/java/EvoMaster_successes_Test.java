import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-12-25T12:45:55.160-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 16 tests
 * <br>
*  Covered targets: 55
 * <br>
*  Used time: 0h 16m 3s
 * <br>
*  Needed budget for current results: 75%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * Calls:
    * (200) GET:/products
    */
    @Test(timeout = 60000)
    public void test_0_getOnProductsReturns228Elements() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(228))
                .body("", hasItems("pSt79Tzj", "pSt79Tzj", "pSt79Tzj", "pSt79Tzj", "ELEARNING_SITE", "ELEARNING_SITE", "ELEARNING_SITE", "ELEARNING_SITE", "ELEARNING_SITE", "ELEARNING_SITE", "pSt79Tzj", "9N", "ELEARNING_SITE", "ELEARNING_SITE", "pSt79Tzj", "pSt79Tzj", "9N", "l9EhXH", "ELEARNING_SITE", "l9EhXH", "pSt79Tzj", "pSt79Tzj", "pSt79Tzj", "pSt79Tzj", "ELEARNING_SITE", "9N", "4j2b", "pSt79Tzj", "l9EhXH", "pSt79Tzj", "ISTS0V", "pSt79Tzj", "ERXrQdz8wapvyqw0", "ELEARNING_SITE", "9", "4j2b", "9N", "ELEARNING_SITE", "ELEARNING_SITE", "pSt79Tzj", "ELEARNING_SITE", "9N", "pSt79Tzj", "A6Kh4_yjRdFCoG", "4j2b", "4j2b", "4SGx23ullgzdl", "9", "pSt79Tzj", "ELEARNING_SITE", "5eXM", "l9EhXH", "9", "ELEARNING_SITE", "4j2b", "A6Kh4_yjRdFCoG", "9uoWVgE", "pSt79Tzj", "4j2b", "9uoWVgE", "9", "9uoWVgE", "z", "VxlAJ76iCYiN5Ch", "St", "l9EhXH", "St", "ERXrQdz8wapvyqw0", "HX", "pSt79Tzj", "gKcIEDjeClZx", "9N", "4j2b", "z", "d00wjR3R", "9N", "l9EhXH", "z", "ISTS0V", "z", "4SGx23ullgzdl", "9N", "4SGx23ullgzdl", "l9EhXH", "HX", "HX", "4SGx23ullgzdl", "4j2b", "z", "ERXrQdz8wapvyqw0", "l9EhXH", "St", "AgGDpUw4o0n", "AgGDpUw4o0n", "jsNDbIpWcrA8Sz", "ISTS0V", "wfwa", "ZAJ9siz5Z", "4j2b", "ELEARNING_SITE", "6w0u68_oWPIwA2", "wfwa", "ELEARNING_SITE", "_", "bt2INQiJxr", "VxlAJ76iCYiN5Ch", "HX", "4j2b", "l9EhXH", "4SGx23ullgzdl", "A6Kh4_yjRdFCoG", "9uoWVgE", "RBZRFwkjq_j7F4", "A6Kh4_yjRdFCoG", "9N", "nEOx2D9", "ISTS0V", "9uoWVgE", "gKcIEDjeClZx", "St", "ELEARNING_SITE", "9uoWVgE", "z", "4j2b", "5eXM", "HX", "9uoWVgE", "h7UWX0", "nEOx2D9", "jsNDbIpWcrA8Sz", "ZAJ9siz5Z", "d00wjR3R", "9uoWVgE", "dnt36nEBkMt5", "5eXM", "l9EhXH", "y_", "ZAJ9siz5Z", "ZAJ9siz5Z", "ZAJ9siz5Z", "wfwa", "5eXM", "9uoWVgE", "z", "HX", "bt2INQiJxr", "y_", "darxzRQ", "dr07dB2pXG", "4j2b", "pSt79Tzj", "St", "tFPV9_bBSGg7RJ0V", "ELEARNING_SITE", "z", "_", "darxzRQ", "AgGDpUw4o0n", "9", "h7UWX0", "zhMVvNyFpQ", "gKcIEDjeClZx", "5eXM", "nEOx2D9", "nEOx2D9", "ISTS0V", "tFPV9_bBSGg7RJ0V", "HX", "hjJVfynNvgW09QT5", "dr07dB2pXG", "KZAbUQ7yl9rFSqlZ", "A6Kh4_yjRdFCoG", "n8IRPS", "KaIOTBth8Pq", "bt2INQiJxr", "HegGK", "hjJVfynNvgW09QT5", "KaIOTBth8Pq", "9", "TfgZI", "y_", "wfwa", "St", "y_", "4j2b", "HegGK", "Wkxncf1p7T6J", "AgGDpUw4o0n", "nEOx2D9", "6KfszRa2ahAXua", "9N", "AgGDpUw4o0n", "d00wjR3R", "ELEARNING_SITE", "n8IRPS", "AgGDpUw4o0n", "RDxPFgBczf8", "9uoWVgE", "ISTS0V", "dnt36nEBkMt5", "hjJVfynNvgW09QT5", "KaIOTBth8Pq", "nEOx2D9", "nEOx2D9", "dr07dB2pXG", "dEOFg", "wnjljFX", "HX", "dr07dB2pXG", "zhMVvNyFpQ", "ISTS0V", "Wkxncf1p7T6J", "4SGx23ullgzdl", "sfRJRi_9AUrOg", "TfgZI", "A5C5q1N", "d00wjR3R", "l9EhXH", "AgGDpUw4o0n", "ELEARNING_SITE", "ERXrQdz8wapvyqw0", "h7UWX0", "Ul0ZiQutR2qrV", "VxlAJ76iCYiN5Ch", "TfgZI", "XGLSu63ZSntRs", "lvgz", "jsNDbIpWcrA8Sz"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/products/{productName}
    */
    @Test(timeout = 60000)
    public void test_1_getOnProductReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/9N")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("9N"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(1))
                .body("'constraints'[0].'sourceFeatureName'", nullValue())
                .body("'constraints'[0].'excludedFeatureName'", nullValue())
                .body("'constraints'[0].'type'", containsString("excludes"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/products/{productName}/features
    */
    @Test(timeout = 60000)
    public void test_2_getOnFeaturesReturns1Element() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/pSt79Tzj/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("ONLINE_FORUM"))
                .body("[0].'description'", containsString("G_DK7DAYRUfvJ"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/products/{productName}/configurations/{configurationName}/features
    */
    @Test(timeout = 60000)
    public void test_3_getOnFeaturesReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/ELEARNING_SITE/configurations/qNmd3feV/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/products/{productName}/configurations
    */
    @Test(timeout = 60000)
    public void test_4_getOnConfigurationsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/627l3hj0MH1/configurations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/swagger.json
    */
    @Test(timeout = 60000)
    public void test_5_getOnSwagger_jsonReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/swagger.json")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * 1 - (201) POST:/products/{productName}
    * 2 - (201) POST:/products/{productName}/configurations/{configurationName}
    * 3 - (200) GET:/products/{productName}/configurations/{configurationName}
    */
    @Test(timeout = 60000)
    public void test_6_getOnConfigurReturnsObject() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        given().accept("*/*")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/pSt79Tzj/configurations/M8OtTbNCflZ_U"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("application/json")
                .get(resolveLocation(location_productName, baseUrlOfSut + "/products/9N/configurations/qNmd3feV"))
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("qNmd3feV"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
    }
    
    
    /**
    * Calls:
    * (201) POST:/products/{productName}
    */
    @Test(timeout = 60000)
    public void test_7_postOnProductReturns201() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/pSt79Tzj")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (201) POST:/products/{productName}/configurations/{configurationName}
    */
    @Test(timeout = 60000)
    public void test_8_postOnConfigurReturns201() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/pSt79Tzj/configurations/UNIVERSITY_X")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (201) POST:/products/{productName}/constraints/excludes
    */
    @Test(timeout = 60000)
    public void test_9_postOnExcludesReturns201() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/9N/constraints/excludes")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (201) POST:/products/{productName}/constraints/requires
    */
    @Test(timeout = 60000)
    public void test_10_postOnRequiresReturns201() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE/constraints/requires")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (201) POST:/products/{productName}/features/{featureName}
    */
    @Test(timeout = 60000)
    public void test_11_postOnFeaturReturns201() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=G_DK7DAYRUfvJ")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE/features/0jiFjBHgye9sm1")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * 1 - (201) POST:/products/{productName}
    * 2 - (201) POST:/products/{productName}/features/{featureName}
    * 3 - (204) DELETE:/products/{productName}/features/{featureName}
    */
    @Test(timeout = 60000)
    public void test_12_deleteOnFeaturReturns204() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/ZAJ9siz5Z")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("description=G_DK7DAYRUfvJ")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/9/features/IN_TRIAL_PERIOD"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/ERXrQdz8wapvyqw0/features/IN_TRIAL_PERIOD"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/products/{productName}
    */
    @Test(timeout = 60000)
    public void test_13_deleteOnProductReturns204() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/l9EhXH")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) GET:/products/{productName}/configurations/{configurationName}
    */
    @Test(timeout = 60000)
    public void test_14_getOnConfigurReturns204() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/products/hvxJZ/configurations/g4D_gPsu")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (204) DELETE:/products/{productName}/constraints/{constraintId}
    */
    @Test(timeout = 60000)
    public void test_15_deleteOnConstraintReturns204() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/alm/constraints/361")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
