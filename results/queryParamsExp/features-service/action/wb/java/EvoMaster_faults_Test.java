import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-12-25T15:00:56.176-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 15 tests
 * <br>
*  Covered targets: 92
 * <br>
*  Used time: 0h 15m 6s
 * <br>
*  Needed budget for current results: 95%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONSTRAINT_EXCLUDES","CONSTRAINT_REQUIRES","FEATURE","PRODUCT","PRODUCT_CONFIGURATION","PRODUCT_CONFIGURATION_ACTIVED_FEATURES","product"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}/features
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_0_getOnProductFeaturesWithQueryParamCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName GET:/products/{productName}/features
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_18_XYZ_")
                .get(baseUrlOfSut + "/products/GAqKQ8JFIqb3/features?EMextraParam123=42")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_1_getOnProductCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName GET:/products/{productName}
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/V7dOmVgHdl?EMextraParam123=_EM_19_XYZ_")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/configurations/{configurationName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_2_postOnConfigurFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_79_addFeatureFromConfiguration POST:/products/{productName}/configurations/{configurationName}/features/{featureName}
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/products/M/configurations/UaW3UkJ4/features/ZLtduZlFiQA")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_79_addFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/configurations/{configurationName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_3_postOnConfigurCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName POST:/products/{productName}/configurations/{configurationName}
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .post(baseUrlOfSut + "/products/rdib8AYDBjFxEt0/configurations/_EM_23_XYZ_")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_4_postOnProductCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_64_insert POST:/products/{productName}
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/nCF0S")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_64_insert
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/configurations/{configurationName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_5_deleteOnFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration DELETE:/products/{productName}/configurations/{configurationName}/features/{featureName}
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1_XYZ_")
                .delete(baseUrlOfSut + "/products/1YKqiJPW4/configurations/_EM_0_XYZ_/features/6HaW4Ipmi46kHdr5?EMextraParam123=42")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) GET:/products/{productName}/configurations/{configurationName}/features
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_6_getOnConfigurFeaturesWithQueryParamCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames GET:/products/{productName}/configurations/{configurationName}/features
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/_EM_2_XYZ_/configurations/j1bAsRcxitGq/features?EMextraParam123=42")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_46_getConfigurationActivedFeaturesNames
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_7_deleteOnProductCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName DELETE:/products/{productName}
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_20_XYZ_")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_8_postOnProductFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName POST:/products/{productName}/features/{featureName}
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/88ANFuF3/features/GJdbUFtKMK4")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) PUT:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_9_putOnFeaturCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName PUT:/products/{productName}/features/{featureName}
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .put(baseUrlOfSut + "/products/b_F_qu/features/r")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/configurations/{configurationName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_10_deleteOnConfigurFeaturCauses500_internalServerErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 22L)
                .d("NAME", "\"p7Nwlu1PnbDP2\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 21L)
                .d("NAME", "\"U1dxctGsfaBYC\"")
                .d("VALID", "false")
                .d("PRODUCT_ID", "NULL")
            .and().insertInto("PRODUCT", 48L)
                .d("NAME", "\"NUU5\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 47L)
                .d("ID", "575")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "\"\"")
                .d("SOURCE_FEATURE_NAME", "\"\"")
            .and().insertInto("PRODUCT", 50L)
                .d("NAME", "\"A2I6_6jHu7\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 49L)
                .d("ID", "-512")
                .r("FOR_PRODUCT_ID", 22L)
                .d("REQUIRED_FEATURE_NAME", "\"_EM_82_XYZ_\"")
                .d("SOURCE_FEATURE_NAME", "\"_EM_85_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration DELETE:/products/{productName}/configurations/{configurationName}/features/{featureName}
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_80_XYZ_/configurations/UNIVERSITY_X/features/T")
                .then()
                .statusCode(500)// org/javiermf/features/services/ProductsConfigurationsService_70_removeFeatureFromConfiguration
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/constraints/requires
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_11_postOnRequiresCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName POST:/products/{productName}/constraints/requires
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/_EM_25_XYZ_/constraints/requires")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) POST:/products/{productName}/constraints/excludes
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_12_postOnExcludesCauses500_internalServerError() throws Exception {
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName POST:/products/{productName}/constraints/excludes
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=s_L2z3ONOwYO6CiC&excludedFeature=_EM_28_XYZ_")
                .post(baseUrlOfSut + "/products/_EM_27_XYZ_/constraints/excludes")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/features/{featureName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_13_deleteOnProductFeaturCauses500_internalServerErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 161L)
                .d("NAME", "\"oCM8U`ZTuo[uv\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsDAO_41_findByName DELETE:/products/{productName}/features/{featureName}
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_12_XYZ_/features/_EM_13_XYZ_")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsDAO_41_findByName
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (500) DELETE:/products/{productName}/configurations/{configurationName}
    * Found 1 potential fault of type-code 100
    */
    @Test(timeout = 60000)
    public void test_14_deleteOnConfigurCauses500_internalServerErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 46L)
                .d("NAME", "\"2R9BDIA9BMtzY0X\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 45L)
                .d("NAME", "\"19244\"")
                .d("VALID", "true")
                .d("PRODUCT_ID", "1")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/javiermf/features/daos/ProductsConfigurationsDAO_71_deleteConfigurationForProduct DELETE:/products/{productName}/configurations/{configurationName}
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/_EM_75_XYZ_/configurations/_EM_78_XYZ_")
                .then()
                .statusCode(500)// org/javiermf/features/daos/ProductsConfigurationsDAO_71_deleteConfigurationForProduct
                .assertThat()
                .contentType("text/html");
    }


}
