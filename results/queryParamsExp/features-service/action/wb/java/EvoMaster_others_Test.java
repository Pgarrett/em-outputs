import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-28T21:58:01.506-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 3 tests
 * <br>
*  Covered targets: 10
 * <br>
*  Used time: 0h 10m 0s
 * <br>
*  Needed budget for current results: 97%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.javiermf.features.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONSTRAINT_EXCLUDES","CONSTRAINT_REQUIRES","FEATURE","PRODUCT","PRODUCT_CONFIGURATION","PRODUCT_CONFIGURATION_ACTIVED_FEATURES"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_postOnProductReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 23L)
                .d("NAME", "\"OaB5beJLSmR_85w3\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 22L)
                .d("NAME", "\"v18Gms30wr2B\"")
                .d("VALID", "true")
                .r("PRODUCT_ID", 23L)
            .and().insertInto("PRODUCT", 37L)
                .d("NAME", "\"lK\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 36L)
                .d("ID", "0")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "\"F4bDeCY\"")
            .and().insertInto("PRODUCT", 39L)
                .d("NAME", "\"p\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 38L)
                .d("ID", "753")
                .r("FOR_PRODUCT_ID", 39L)
                .d("REQUIRED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .post(baseUrlOfSut + "/products/h697abdk%5Cz")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_1_deleteOnFeaturReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 23L)
                .d("NAME", "\"OaB5beJLSmR_85w3\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 22L)
                .d("NAME", "\"v18Gms30wr2B\"")
                .d("VALID", "true")
                .r("PRODUCT_ID", 23L)
            .and().insertInto("PRODUCT", 37L)
                .d("NAME", "\"lK\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 36L)
                .d("ID", "0")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "\"F4bDeCY\"")
            .and().insertInto("PRODUCT", 39L)
                .d("NAME", "\"p\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 38L)
                .d("ID", "753")
                .r("FOR_PRODUCT_ID", 39L)
                .d("REQUIRED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/h697abdk%5Cz/configurations/nPl/features/_EM_0_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_2_deleteOnConstraintReturns400UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 23L)
                .d("NAME", "\"OaB5beJLSmR_85w3\"")
            .and().insertInto("PRODUCT_CONFIGURATION", 22L)
                .d("NAME", "\"v18Gms30wr2B\"")
                .d("VALID", "true")
                .r("PRODUCT_ID", 23L)
            .and().insertInto("PRODUCT", 37L)
                .d("NAME", "\"lK\"")
            .and().insertInto("CONSTRAINT_EXCLUDES", 36L)
                .d("ID", "0")
                .d("FOR_PRODUCT_ID", "NULL")
                .d("EXCLUDED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "\"F4bDeCY\"")
            .and().insertInto("PRODUCT", 39L)
                .d("NAME", "\"p\"")
            .and().insertInto("CONSTRAINT_REQUIRES", 38L)
                .d("ID", "753")
                .r("FOR_PRODUCT_ID", 39L)
                .d("REQUIRED_FEATURE_NAME", "NULL")
                .d("SOURCE_FEATURE_NAME", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/products/h697abdk%5Cz/constraints/4611686018427387904")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
