import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-28T23:06:45.118-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 18 tests
 * <br>
*  Covered targets: 88
 * <br>
*  Used time: 0h 10m 1s
 * <br>
*  Needed budget for current results: 85%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.tsdes.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("NEWS_ENTITY","news_entity"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    @Test(timeout = 60000)
    public void test_1_getOnNewWithQueryParamsReturnsObjectUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 805L)
                .d("ID", "458")
                .d("AUTHOR_ID", "\"tUS3x13zlAW\"")
                .d("COUNTRY", "\"dh\"")
                .d("CREATION_TIME", "\"2045-01-14 05:38:33\"")
                .d("TEXT", "\"N\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news/458?authorId=_EM_11292_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'newsId'", containsString("458"))
                .body("'authorId'", containsString("tUS3x13zlAW"))
                .body("'text'", containsString("N"))
                .body("'country'", containsString("dh"))
                .body("'creationTime'", containsString("2045-01-14T05:38:33-03:00"));
    }
    
    
    @Test(timeout = 60000)
    public void test_2_getOnCountriesWithQueryParamsReturns247Elements() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/countries?" + 
                    "EMextraParam123=_EM_844_XYZ_&" + 
                    "country=_EM_845_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(247))
                .body("", hasItems("Afghanistan", "Åland Islands", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "The Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bonaire", "Bosnia and Herzegovina", "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory", "United States Minor Outlying Islands", "British Virgin Islands", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Republic of the Congo", "Democratic Republic of the Congo", "Cook Islands", "Costa Rica", "Croatia", "Cuba", "Curaçao", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands", "Faroe Islands", "Fiji", "Finland", "France", "French Guiana", "French Polynesia", "French Southern and Antarctic Lands", "Gabon", "The Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guernsey", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard Island and McDonald Islands", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Ivory Coast", "Iran", "Iraq", "Republic of Ireland", "Isle of Man", "Israel", "Italy", "Jamaica", "Japan", "Jersey", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Republic of Macedonia", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Federated States of Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "North Korea", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Palestine", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn Islands", "Poland", "Portugal", "Puerto Rico", "Qatar", "Republic of Kosovo", "Réunion", "Romania", "Russia", "Rwanda", "Saint Barthélemy", "Saint Helena", "Saint Kitts and Nevis", "Saint Lucia", "Saint Martin", "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "São Tomé and Príncipe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Sint Maarten", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Georgia", "South Korea", "South Sudan", "Spain", "Sri Lanka", "Sudan", "Suriname", "Svalbard and Jan Mayen", "Swaziland", "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "East Timor", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Wallis and Futuna", "Western Sahara", "Yemen", "Zambia", "Zimbabwe"));
    }
    
    
    @Test(timeout = 60000)
    public void test_3_getOnNewsWithQueryParamsReturnsEmptyList() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/news?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_4_getOnCountriesWithQueryParamsReturns247Elements() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_892_XYZ_")
                .get(baseUrlOfSut + "/countries?authorId=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(247))
                .body("", hasItems("Afghanistan", "Åland Islands", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "The Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bonaire", "Bosnia and Herzegovina", "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory", "United States Minor Outlying Islands", "British Virgin Islands", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Republic of the Congo", "Democratic Republic of the Congo", "Cook Islands", "Costa Rica", "Croatia", "Cuba", "Curaçao", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands", "Faroe Islands", "Fiji", "Finland", "France", "French Guiana", "French Polynesia", "French Southern and Antarctic Lands", "Gabon", "The Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guernsey", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard Island and McDonald Islands", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Ivory Coast", "Iran", "Iraq", "Republic of Ireland", "Isle of Man", "Israel", "Italy", "Jamaica", "Japan", "Jersey", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Republic of Macedonia", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Federated States of Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "North Korea", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Palestine", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn Islands", "Poland", "Portugal", "Puerto Rico", "Qatar", "Republic of Kosovo", "Réunion", "Romania", "Russia", "Rwanda", "Saint Barthélemy", "Saint Helena", "Saint Kitts and Nevis", "Saint Lucia", "Saint Martin", "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "São Tomé and Príncipe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Sint Maarten", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Georgia", "South Korea", "South Sudan", "Spain", "Sri Lanka", "Sudan", "Suriname", "Svalbard and Jan Mayen", "Swaziland", "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "East Timor", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Wallis and Futuna", "Western Sahara", "Yemen", "Zambia", "Zimbabwe"));
    }
    
    
    @Test(timeout = 60000)
    public void test_5_getOnCountriesWithQueryParamsReturns247Elements() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/countries?EMextraParam123=_EM_864_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(247))
                .body("", hasItems("Afghanistan", "Åland Islands", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "The Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bonaire", "Bosnia and Herzegovina", "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory", "United States Minor Outlying Islands", "British Virgin Islands", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Republic of the Congo", "Democratic Republic of the Congo", "Cook Islands", "Costa Rica", "Croatia", "Cuba", "Curaçao", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands", "Faroe Islands", "Fiji", "Finland", "France", "French Guiana", "French Polynesia", "French Southern and Antarctic Lands", "Gabon", "The Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guernsey", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard Island and McDonald Islands", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Ivory Coast", "Iran", "Iraq", "Republic of Ireland", "Isle of Man", "Israel", "Italy", "Jamaica", "Japan", "Jersey", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Laos", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Republic of Macedonia", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Federated States of Micronesia", "Moldova", "Monaco", "Mongolia", "Montenegro", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "North Korea", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Palestine", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn Islands", "Poland", "Portugal", "Puerto Rico", "Qatar", "Republic of Kosovo", "Réunion", "Romania", "Russia", "Rwanda", "Saint Barthélemy", "Saint Helena", "Saint Kitts and Nevis", "Saint Lucia", "Saint Martin", "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "São Tomé and Príncipe", "Saudi Arabia", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Sint Maarten", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Georgia", "South Korea", "South Sudan", "Spain", "Sri Lanka", "Sudan", "Suriname", "Svalbard and Jan Mayen", "Swaziland", "Sweden", "Switzerland", "Syria", "Taiwan", "Tajikistan", "Tanzania", "Thailand", "East Timor", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Wallis and Futuna", "Western Sahara", "Yemen", "Zambia", "Zimbabwe"));
    }
    
    
    @Test(timeout = 60000)
    public void test_6_getOnNewWithQueryParamsReturnsObjectUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 910L)
                .d("ID", "154")
                .d("AUTHOR_ID", "\"AAFq9scIcmKAuX\"")
                .d("COUNTRY", "\"_EM_11905_XYZ_\"")
                .d("CREATION_TIME", "\"1910-08-27 05:03:33\"")
                .d("TEXT", "\"z\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news/154?country=_EM_11907_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'newsId'", containsString("154"))
                .body("'authorId'", containsString("AAFq9scIcmKAuX"))
                .body("'text'", containsString("z"))
                .body("'country'", containsString("_EM_11905_XYZ_"))
                .body("'creationTime'", containsString("1910-08-27T05:03:33-04:16:48"));
    }
    
    
    @Test(timeout = 60000)
    public void test_7_getOnNewsWithQueryParamsReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 10L)
                .d("ID", "-130095")
                .d("AUTHOR_ID", "\"7kamR0fiMX9D7pQ\"")
                .d("COUNTRY", "\"y_k0aTWvtL7\"")
                .d("CREATION_TIME", "\"2100-02-10 15:47:37\"")
                .d("TEXT", "\"_EM_687_XYZ_\"")
            .and().insertInto("NEWS_ENTITY", 3L)
                .d("ID", "345")
                .d("AUTHOR_ID", "\"EC_f\"")
                .d("COUNTRY", "\"3DZWcOi2aSQmqLW\"")
                .d("CREATION_TIME", "\"2086-12-08 21:29:47\"")
                .d("TEXT", "\"uJARwSnJcs\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?authorId=_EM_686_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_8_getOnNewsWithQueryParamsReturnsEmptyList() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/news?" + 
                    "authorId=_EM_43_XYZ_&" + 
                    "country=_EM_44_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_9_getOnNewsWithQueryParamsReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 12L)
                .d("ID", "768")
                .d("AUTHOR_ID", "\"S25dQj9uwseo\"")
                .d("COUNTRY", "\"g6\"")
                .d("CREATION_TIME", "\"1958-08-12 02:36:34\"")
                .d("TEXT", "\"8g\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "_EM_159_XYZ_")
                .get(baseUrlOfSut + "/news?" + 
                    "authorId=Mj&" + 
                    "country=_EM_158_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_10_getOnNewsWithQueryParamsReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 10L)
                .d("ID", "977")
                .d("AUTHOR_ID", "\"7kamR0fiMX9D7pQ\"")
                .d("COUNTRY", "\"y_k0aTWwtL7\"")
                .d("CREATION_TIME", "\"2100-04-10 15:47:37\"")
                .d("TEXT", "\"_EM_687_XYZ_\"")
            .and().insertInto("NEWS_ENTITY", 3L)
                .d("ID", "345")
                .d("AUTHOR_ID", "\"EC_f\"")
                .d("COUNTRY", "\"3DZWcOi2aSQmqLW\"")
                .d("CREATION_TIME", "\"2086-12-08 21:15:47\"")
                .d("TEXT", "\"uJARwSnJc\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?" + 
                    "authorId=_EM_686_XYZ_&" + 
                    "country=YSaWTVGdcfm4G&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_11_getOnNewsWithQueryParamsReturnsEmptyListUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 10L)
                .d("ID", "-3119")
                .d("AUTHOR_ID", "\"_EM_9993_XYZ_\"")
                .d("COUNTRY", "\"y_k0aTWwtL2\"")
                .d("CREATION_TIME", "\"1999-02-11 15:45:37\"")
                .d("TEXT", "\"5p0yroDm\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news?" + 
                    "authorId=oXXMXKKtdT&" + 
                    "country=_EM_2418_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_12_deleteOnNewWithQueryParamsReturns204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 287L)
                .d("ID", "326")
                .d("AUTHOR_ID", "\"mWKYLg8tu\"")
                .d("COUNTRY", "\"K_v7rAX9SkaPX7\"")
                .d("CREATION_TIME", "\"2087-12-25 01:24:33\"")
                .d("TEXT", "\"YIEw9y_V\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/news/326?" + 
                    "country=K_v7rAX9SkaPX7&" + 
                    "authorId=mWKYLg8tu")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_13_putOnTextWithQueryParamReturns204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 180L)
                .d("ID", "-4193420")
                .d("AUTHOR_ID", "\"_EM_3430_XYZ_\"")
                .d("COUNTRY", "\"Norway\"")
                .d("CREATION_TIME", "\"1900-04-05 22:39:20\"")
                .d("TEXT", "\"j5rj\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("text/plain")
                .body("897")
                .put(baseUrlOfSut + "/news/-4193420/text")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_14_deleteOnNewWithQueryParamsReturns204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 13L)
                .d("ID", "107")
                .d("AUTHOR_ID", "\"qVDELtMhk1hB4i\"")
                .d("COUNTRY", "\"RSRjiG4X3\"")
                .d("CREATION_TIME", "\"2007-07-31 23:35:57\"")
                .d("TEXT", "\"ZZlSVMqqQ\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_190_XYZ_")
                .delete(baseUrlOfSut + "/news/107?EMextraParam123=O")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_15_deleteOnNewWithQueryParamsReturns204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 97L)
                .d("ID", "519")
                .d("AUTHOR_ID", "\"kCYdWTvZC5b\"")
                .d("COUNTRY", "\"XYDqUU4TQxQ8\"")
                .d("CREATION_TIME", "\"2019-10-05 13:41:38\"")
                .d("TEXT", "\"uBvS2RPvkN0lA3OJ\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/news/519?authorId=kCYdWTvZC5b")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_16_putOnTextWithQueryParamsReturns204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 1256L)
                .d("ID", "591")
                .d("AUTHOR_ID", "\"ZutuXB219FPZ3jj\"")
                .d("COUNTRY", "\"San Marino\"")
                .d("CREATION_TIME", "\"1968-03-15 03:38:08\"")
                .d("TEXT", "\"_EM_14910_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("text/plain")
                .body("ZutuXB219FPZ3jj")
                .put(baseUrlOfSut + "/news/591/text?country=1D")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_17_putOnTextWithQueryParamsReturns204UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 1256L)
                .d("ID", "599")
                .d("AUTHOR_ID", "\"ZutuXB219FPZ3jj\"")
                .d("COUNTRY", "\"San Marino\"")
                .d("CREATION_TIME", "\"1968-03-15 03:38:08\"")
                .d("TEXT", "\"_EM_14910_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("text/plain")
                .body("VutuXB219FPZ3jj")
                .put(baseUrlOfSut + "/news/599/text?authorId=ZutuXB219FPZ3jj")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
