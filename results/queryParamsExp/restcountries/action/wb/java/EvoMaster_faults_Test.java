import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-12-25T18:56:19.899-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 199 tests
 * <br>
*  Covered targets: 541
 * <br>
*  Used time: 0h 15m 1s
 * <br>
*  Needed budget for current results: 86%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.eu.fayder.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (500) GET:/rest/v2/alpha
    * Found 2 potential faults. Type-codes: 100, 200
    */
    @Test(timeout = 60000)
    public void test_0_getOnAlphaShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. eu/fayder/restcountries/v2/rest/CountryRestV2_268_getCountriesJson GET:/rest/v2/alpha
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_16_XYZ_&" + 
                    "codes=OMR&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(500)// eu/fayder/restcountries/v2/rest/CountryRestV2_268_getCountriesJson
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'message'", containsString("Internal Server Error"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_1_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Saint-Pierre und Miquelon")
                .get(baseUrlOfSut + "/rest/v1/alpha/RS?EMextraParam123=_EM_114_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Serbia"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".rs"))
                .body("'alpha2Code'", containsString("RS"))
                .body("'alpha3Code'", containsString("SRB"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("381"))
                .body("'capital'", containsString("Belgrade"))
                .body("'altSpellings'.size()", equalTo(5))
                .body("'altSpellings'", hasItems("RS", "Srbija", "Republic of Serbia", "Република Србија", "Republika Srbija"))
                .body("'region'", containsString("Europe"))
                .body("'subregion'", containsString("Southern Europe"))
                .body("'population'", numberMatches(7114393.0))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(44.0))
                .body("'latlng'[1]", numberMatches(21.0))
                .body("'demonym'", containsString("Serbian"))
                .body("'area'", numberMatches(88361.0))
                .body("'gini'", numberMatches(27.8))
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC+01:00"))
                .body("'borders'.size()", equalTo(8))
                .body("'borders'", hasItems("BIH", "BGR", "HRV", "HUN", "KOS", "MKD", "MNE", "ROU"))
                .body("'nativeName'", containsString("Србија"))
                .body("'numericCode'", containsString("688"))
                .body("'currencies'.size()", equalTo(1))
                .body("'currencies'", hasItems("RSD"))
                .body("'languages'.size()", equalTo(1))
                .body("'languages'", hasItems("sr"))
                .body("'translations'.'de'", containsString("Serbien"))
                .body("'translations'.'es'", containsString("Serbia"))
                .body("'translations'.'fr'", containsString("Serbie"))
                .body("'translations'.'ja'", containsString("セルビア"))
                .body("'translations'.'it'", containsString("Serbia"))
                .body("'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_2_getOnV1AllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/all")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.60231E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AFN"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("ps", "uz", "tk"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Åland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ax"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[1].'alpha3Code'", containsString("ALA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Mariehamn"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(28875.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(60.116667))
                .body("[1].'latlng'[1]", numberMatches(19.9))
                .body("[1].'demonym'", containsString("Ålandish"))
                .body("[1].'area'", numberMatches(1580.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Åland"))
                .body("[1].'numericCode'", containsString("248"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("sv"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Albania"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".al"))
                .body("[2].'alpha2Code'", containsString("AL"))
                .body("[2].'alpha3Code'", containsString("ALB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                .body("[2].'capital'", containsString("Tirana"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(2893005.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.0))
                .body("[2].'latlng'[1]", numberMatches(20.0))
                .body("[2].'demonym'", containsString("Albanian"))
                .body("[2].'area'", numberMatches(28748.0))
                .body("[2].'gini'", numberMatches(34.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[2].'nativeName'", containsString("Shqipëria"))
                .body("[2].'numericCode'", containsString("008"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("ALL"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("sq"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_3_getOnV1CurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/currency/LRD")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Liberia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".lr"))
                .body("[0].'alpha2Code'", containsString("LR"))
                .body("[0].'alpha3Code'", containsString("LBR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("231"))
                .body("[0].'capital'", containsString("Monrovia"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("LR", "Republic of Liberia"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Western Africa"))
                .body("[0].'population'", numberMatches(4503000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(6.5))
                .body("[0].'latlng'[1]", numberMatches(-9.5))
                .body("[0].'demonym'", containsString("Liberian"))
                .body("[0].'area'", numberMatches(111369.0))
                .body("[0].'gini'", numberMatches(38.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("GIN", "CIV", "SLE"))
                .body("[0].'nativeName'", containsString("Liberia"))
                .body("[0].'numericCode'", containsString("430"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("LRD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Liberia"))
                .body("[0].'translations'.'es'", containsString("Liberia"))
                .body("[0].'translations'.'fr'", containsString("Liberia"))
                .body("[0].'translations'.'ja'", containsString("リベリア"))
                .body("[0].'translations'.'it'", containsString("Liberia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_4_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/670?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("East Timor"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tl"))
                .body("[0].'alpha2Code'", containsString("TL"))
                .body("[0].'alpha3Code'", containsString("TLS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("670"))
                .body("[0].'capital'", containsString("Dili"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("TL", "East Timor", "Democratic Republic of Timor-Leste", "República Democrática de Timor-Leste", "Repúblika Demokrátika Timór-Leste"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(1212107.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-8.83333333))
                .body("[0].'latlng'[1]", numberMatches(125.91666666))
                .body("[0].'demonym'", containsString("East Timorese"))
                .body("[0].'area'", numberMatches(14874.0))
                .body("[0].'gini'", numberMatches(31.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+09:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("IDN"))
                .body("[0].'nativeName'", containsString("Timor-Leste"))
                .body("[0].'numericCode'", containsString("626"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Timor-Leste"))
                .body("[0].'translations'.'es'", containsString("Timor Oriental"))
                .body("[0].'translations'.'fr'", containsString("Timor oriental"))
                .body("[0].'translations'.'ja'", containsString("東ティモール"))
                .body("[0].'translations'.'it'", containsString("Timor Est"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_5_getOnV1CapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/Paramaribo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Suriname"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sr"))
                .body("[0].'alpha2Code'", containsString("SR"))
                .body("[0].'alpha3Code'", containsString("SUR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("597"))
                .body("[0].'capital'", containsString("Paramaribo"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("SR", "Sarnam", "Sranangron", "Republic of Suriname", "Republiek Suriname"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(534189.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(4.0))
                .body("[0].'latlng'[1]", numberMatches(-56.0))
                .body("[0].'demonym'", containsString("Surinamer"))
                .body("[0].'area'", numberMatches(163820.0))
                .body("[0].'gini'", numberMatches(52.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BRA", "GUF", "FRA", "GUY"))
                .body("[0].'nativeName'", containsString("Suriname"))
                .body("[0].'numericCode'", containsString("740"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("SRD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("nl"))
                .body("[0].'translations'.'de'", containsString("Suriname"))
                .body("[0].'translations'.'es'", containsString("Surinam"))
                .body("[0].'translations'.'fr'", containsString("Surinam"))
                .body("[0].'translations'.'ja'", containsString("スリナム"))
                .body("[0].'translations'.'it'", containsString("Suriname"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_6_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_93_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/subregion/Central%20Asia?EMextraParam123=_EM_92_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("[0].'name'", containsString("Kazakhstan"))
                .body("[0].'topLevelDomain'.size()", equalTo(2))
                .body("[0].'topLevelDomain'", hasItems(".kz", ".қаз"))
                .body("[0].'alpha2Code'", containsString("KZ"))
                .body("[0].'alpha3Code'", containsString("KAZ"))
                .body("[0].'callingCodes'.size()", equalTo(2))
                .body("[0].'callingCodes'", hasItems("76", "77"))
                .body("[0].'capital'", containsString("Astana"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("KZ", "Qazaqstan", "Казахстан", "Republic of Kazakhstan", "Қазақстан Республикасы", "Qazaqstan Respublïkası", "Республика Казахстан", "Respublika Kazakhstan"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Central Asia"))
                .body("[0].'population'", numberMatches(1.75412E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(48.0))
                .body("[0].'latlng'[1]", numberMatches(68.0))
                .body("[0].'demonym'", containsString("Kazakhstani"))
                .body("[0].'area'", numberMatches(2724900.0))
                .body("[0].'gini'", numberMatches(29.0))
                .body("[0].'timezones'.size()", equalTo(2))
                .body("[0].'timezones'", hasItems("UTC+05:00", "UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("CHN", "KGZ", "RUS", "TKM", "UZB"))
                .body("[0].'nativeName'", containsString("Қазақстан"))
                .body("[0].'numericCode'", containsString("398"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("KZT"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("kk", "ru"))
                .body("[0].'translations'.'de'", containsString("Kasachstan"))
                .body("[0].'translations'.'es'", containsString("Kazajistán"))
                .body("[0].'translations'.'fr'", containsString("Kazakhstan"))
                .body("[0].'translations'.'ja'", containsString("カザフスタン"))
                .body("[0].'translations'.'it'", containsString("Kazakistan"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Kyrgyzstan"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".kg"))
                .body("[1].'alpha2Code'", containsString("KG"))
                .body("[1].'alpha3Code'", containsString("KGZ"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("996"))
                .body("[1].'capital'", containsString("Bishkek"))
                .body("[1].'altSpellings'.size()", equalTo(5))
                .body("[1].'altSpellings'", hasItems("KG", "Киргизия", "Kyrgyz Republic", "Кыргыз Республикасы", "Kyrgyz Respublikasy"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Central Asia"))
                .body("[1].'population'", numberMatches(5944400.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(41.0))
                .body("[1].'latlng'[1]", numberMatches(75.0))
                .body("[1].'demonym'", containsString("Kirghiz"))
                .body("[1].'area'", numberMatches(199951.0))
                .body("[1].'gini'", numberMatches(36.2))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+06:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("CHN", "KAZ", "TJK", "UZB"))
                .body("[1].'nativeName'", containsString("Кыргызстан"))
                .body("[1].'numericCode'", containsString("417"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("KGS"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("ky", "ru"))
                .body("[1].'translations'.'de'", containsString("Kirgisistan"))
                .body("[1].'translations'.'es'", containsString("Kirguizistán"))
                .body("[1].'translations'.'fr'", containsString("Kirghizistan"))
                .body("[1].'translations'.'ja'", containsString("キルギス"))
                .body("[1].'translations'.'it'", containsString("Kirghizistan"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Tajikistan"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".tj"))
                .body("[2].'alpha2Code'", containsString("TJ"))
                .body("[2].'alpha3Code'", containsString("TJK"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("992"))
                .body("[2].'capital'", containsString("Dushanbe"))
                .body("[2].'altSpellings'.size()", equalTo(5))
                .body("[2].'altSpellings'", hasItems("TJ", "Toçikiston", "Republic of Tajikistan", "Ҷумҳурии Тоҷикистон", "Çumhuriyi Toçikiston"))
                .body("[2].'region'", containsString("Asia"))
                .body("[2].'subregion'", containsString("Central Asia"))
                .body("[2].'population'", numberMatches(8354000.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(39.0))
                .body("[2].'latlng'[1]", numberMatches(71.0))
                .body("[2].'demonym'", containsString("Tadzhik"))
                .body("[2].'area'", numberMatches(143100.0))
                .body("[2].'gini'", numberMatches(30.8))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+05:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("AFG", "CHN", "KGZ", "UZB"))
                .body("[2].'nativeName'", containsString("Тоҷикистон"))
                .body("[2].'numericCode'", containsString("762"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("TJS"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("tg", "ru"))
                .body("[2].'translations'.'de'", containsString("Tadschikistan"))
                .body("[2].'translations'.'es'", containsString("Tayikistán"))
                .body("[2].'translations'.'fr'", containsString("Tadjikistan"))
                .body("[2].'translations'.'ja'", containsString("タジキスタン"))
                .body("[2].'translations'.'it'", containsString("Tagikistan"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_7_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_200_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/alpha?codes=c_4")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0]", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_8_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/PN?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("Pitcairn"))
                .body("'topLevelDomain'.size()", equalTo(1))
                .body("'topLevelDomain'", hasItems(".pn"))
                .body("'alpha2Code'", containsString("PN"))
                .body("'alpha3Code'", containsString("PCN"))
                .body("'callingCodes'.size()", equalTo(1))
                .body("'callingCodes'", hasItems("64"))
                .body("'capital'", containsString("Adamstown"))
                .body("'altSpellings'.size()", equalTo(2))
                .body("'altSpellings'", hasItems("PN", "Pitcairn Henderson Ducie and Oeno Islands"))
                .body("'region'", containsString("Oceania"))
                .body("'subregion'", containsString("Polynesia"))
                .body("'population'", numberMatches(56.0))
                .body("'latlng'.size()", equalTo(2))
                .body("'latlng'[0]", numberMatches(-25.06666666))
                .body("'latlng'[1]", numberMatches(-130.1))
                .body("'demonym'", containsString("Pitcairn Islander"))
                .body("'area'", numberMatches(47.0))
                .body("'gini'", nullValue())
                .body("'timezones'.size()", equalTo(1))
                .body("'timezones'", hasItems("UTC-08:00"))
                .body("'borders'.size()", equalTo(0))
                .body("'nativeName'", containsString("Pitcairn Islands"))
                .body("'numericCode'", containsString("612"))
                .body("'currencies'.size()", equalTo(2))
                .body("'currencies'[0].'code'", containsString("NZD"))
                .body("'currencies'[0].'name'", containsString("New Zealand dollar"))
                .body("'currencies'[0].'symbol'", containsString("$"))
                .body("'currencies'[1].'code'", nullValue())
                .body("'currencies'[1].'name'", containsString("Pitcairn Islands dollar"))
                .body("'currencies'[1].'symbol'", containsString("$"))
                .body("'languages'.size()", equalTo(1))
                .body("'languages'[0].'iso639_1'", containsString("en"))
                .body("'languages'[0].'iso639_2'", containsString("eng"))
                .body("'languages'[0].'name'", containsString("English"))
                .body("'languages'[0].'nativeName'", containsString("English"))
                .body("'translations'.'de'", containsString("Pitcairn"))
                .body("'translations'.'es'", containsString("Islas Pitcairn"))
                .body("'translations'.'fr'", containsString("Îles Pitcairn"))
                .body("'translations'.'ja'", containsString("ピトケアン"))
                .body("'translations'.'it'", containsString("Isole Pitcairn"))
                .body("'translations'.'br'", containsString("Ilhas Pitcairn"))
                .body("'translations'.'pt'", containsString("Ilhas Picárnia"))
                .body("'translations'.'nl'", containsString("Pitcairneilanden"))
                .body("'translations'.'hr'", containsString("Pitcairnovo otočje"))
                .body("'translations'.'fa'", containsString("پیتکرن"))
                .body("'flag'", containsString("https://restcountries.eu/data/pcn.svg"))
                .body("'regionalBlocs'.size()", equalTo(0))
                .body("'cioc'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_9_getOnV1NameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/East%20Timor")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("East Timor"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tl"))
                .body("[0].'alpha2Code'", containsString("TL"))
                .body("[0].'alpha3Code'", containsString("TLS"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("670"))
                .body("[0].'capital'", containsString("Dili"))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("TL", "East Timor", "Democratic Republic of Timor-Leste", "República Democrática de Timor-Leste", "Repúblika Demokrátika Timór-Leste"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(1212107.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-8.83333333))
                .body("[0].'latlng'[1]", numberMatches(125.91666666))
                .body("[0].'demonym'", containsString("East Timorese"))
                .body("[0].'area'", numberMatches(14874.0))
                .body("[0].'gini'", numberMatches(31.9))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+09:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("IDN"))
                .body("[0].'nativeName'", containsString("Timor-Leste"))
                .body("[0].'numericCode'", containsString("626"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("pt"))
                .body("[0].'translations'.'de'", containsString("Timor-Leste"))
                .body("[0].'translations'.'es'", containsString("Timor Oriental"))
                .body("[0].'translations'.'fr'", containsString("Timor oriental"))
                .body("[0].'translations'.'ja'", containsString("東ティモール"))
                .body("[0].'translations'.'it'", containsString("Timor Est"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_10_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/callingcode/51?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Peru"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".pe"))
                .body("[0].'alpha2Code'", containsString("PE"))
                .body("[0].'alpha3Code'", containsString("PER"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("51"))
                .body("[0].'capital'", containsString("Lima"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PE", "Republic of Peru", " República del Perú"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(3.14887E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-10.0))
                .body("[0].'latlng'[1]", numberMatches(-76.0))
                .body("[0].'demonym'", containsString("Peruvian"))
                .body("[0].'area'", numberMatches(1285216.0))
                .body("[0].'gini'", numberMatches(48.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-05:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BOL", "BRA", "CHL", "COL", "ECU"))
                .body("[0].'nativeName'", containsString("Perú"))
                .body("[0].'numericCode'", containsString("604"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("PEN"))
                .body("[0].'currencies'[0].'name'", containsString("Peruvian sol"))
                .body("[0].'currencies'[0].'symbol'", containsString("S/."))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("es"))
                .body("[0].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[0].'languages'[0].'name'", containsString("Spanish"))
                .body("[0].'languages'[0].'nativeName'", containsString("Español"))
                .body("[0].'translations'.'de'", containsString("Peru"))
                .body("[0].'translations'.'es'", containsString("Perú"))
                .body("[0].'translations'.'fr'", containsString("Pérou"))
                .body("[0].'translations'.'ja'", containsString("ペルー"))
                .body("[0].'translations'.'it'", containsString("Perù"))
                .body("[0].'translations'.'br'", containsString("Peru"))
                .body("[0].'translations'.'pt'", containsString("Peru"))
                .body("[0].'translations'.'nl'", containsString("Peru"))
                .body("[0].'translations'.'hr'", containsString("Peru"))
                .body("[0].'translations'.'fa'", containsString("پرو"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/per.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(2))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("PA"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Pacific Alliance"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Alianza del Pacífico"))
                .body("[0].'regionalBlocs'[1].'acronym'", containsString("USAN"))
                .body("[0].'regionalBlocs'[1].'name'", containsString("Union of South American Nations"))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[0].'regionalBlocs'[1].'otherNames'.size()", equalTo(4))
                .body("[0].'regionalBlocs'[1].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[0].'cioc'", containsString("PER"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_11_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/region/europe")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(53))
                .body("[0].'name'", containsString("Åland Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ax"))
                .body("[0].'alpha2Code'", containsString("AX"))
                .body("[0].'alpha3Code'", containsString("ALA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("358"))
                .body("[0].'capital'", containsString("Mariehamn"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(28875.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(60.116667))
                .body("[0].'latlng'[1]", numberMatches(19.9))
                .body("[0].'demonym'", containsString("Ålandish"))
                .body("[0].'area'", numberMatches(1580.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Åland"))
                .body("[0].'numericCode'", containsString("248"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("sv"))
                .body("[0].'translations'.'de'", containsString("Åland"))
                .body("[0].'translations'.'es'", containsString("Alandia"))
                .body("[0].'translations'.'fr'", containsString("Åland"))
                .body("[0].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Aland"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Albania"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".al"))
                .body("[1].'alpha2Code'", containsString("AL"))
                .body("[1].'alpha3Code'", containsString("ALB"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("355"))
                .body("[1].'capital'", containsString("Tirana"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Southern Europe"))
                .body("[1].'population'", numberMatches(2893005.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(41.0))
                .body("[1].'latlng'[1]", numberMatches(20.0))
                .body("[1].'demonym'", containsString("Albanian"))
                .body("[1].'area'", numberMatches(28748.0))
                .body("[1].'gini'", numberMatches(34.5))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[1].'nativeName'", containsString("Shqipëria"))
                .body("[1].'numericCode'", containsString("008"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("ALL"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("sq"))
                .body("[1].'translations'.'de'", containsString("Albanien"))
                .body("[1].'translations'.'es'", containsString("Albania"))
                .body("[1].'translations'.'fr'", containsString("Albanie"))
                .body("[1].'translations'.'ja'", containsString("アルバニア"))
                .body("[1].'translations'.'it'", containsString("Albania"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Andorra"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ad"))
                .body("[2].'alpha2Code'", containsString("AD"))
                .body("[2].'alpha3Code'", containsString("AND"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("376"))
                .body("[2].'capital'", containsString("Andorra la Vella"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("AD", "Principality of Andorra", "Principat d'Andorra"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(76949.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(42.5))
                .body("[2].'latlng'[1]", numberMatches(1.5))
                .body("[2].'demonym'", containsString("Andorran"))
                .body("[2].'area'", numberMatches(468.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(2))
                .body("[2].'borders'", hasItems("FRA", "ESP"))
                .body("[2].'nativeName'", containsString("Andorra"))
                .body("[2].'numericCode'", containsString("020"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("EUR"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("ca"))
                .body("[2].'translations'.'de'", containsString("Andorra"))
                .body("[2].'translations'.'es'", containsString("Andorra"))
                .body("[2].'translations'.'fr'", containsString("Andorre"))
                .body("[2].'translations'.'ja'", containsString("アンドラ"))
                .body("[2].'translations'.'it'", containsString("Andorra"))
                .body("[2].'relevance'", containsString("0.5"))
                ; // Skipping assertions on the remaining 50 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_12_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/region/polar")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Antarctica"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".aq"))
                .body("[0].'alpha2Code'", containsString("AQ"))
                .body("[0].'alpha3Code'", containsString("ATA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("672"))
                .body("[0].'capital'", containsString(""))
                .body("[0].'altSpellings'.size()", equalTo(0))
                .body("[0].'region'", containsString("Polar"))
                .body("[0].'subregion'", containsString(""))
                .body("[0].'population'", numberMatches(1000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-74.65))
                .body("[0].'latlng'[1]", numberMatches(4.48))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", numberMatches(1.4E7))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(8))
                .body("[0].'timezones'", hasItems("UTC-03:00", "UTC+03:00", "UTC+05:00", "UTC+06:00", "UTC+07:00", "UTC+08:00", "UTC+10:00", "UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Antarctica"))
                .body("[0].'numericCode'", containsString("010"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("AUD", "GBP"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("en"))
                .body("[0].'translations'.'de'", containsString("Antarktika"))
                .body("[0].'translations'.'es'", containsString("Antártida"))
                .body("[0].'translations'.'fr'", containsString("Antarctique"))
                .body("[0].'translations'.'ja'", containsString("南極大陸"))
                .body("[0].'translations'.'it'", containsString("Antartide"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_13_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/am?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Ethiopia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".et"))
                .body("[0].'alpha2Code'", containsString("ET"))
                .body("[0].'alpha3Code'", containsString("ETH"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("251"))
                .body("[0].'capital'", containsString("Addis Ababa"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("ET", "ʾĪtyōṗṗyā", "Federal Democratic Republic of Ethiopia", "የኢትዮጵያ ፌዴራላዊ ዲሞክራሲያዊ ሪፐብሊክ"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(9.0076012E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(8.0))
                .body("[0].'latlng'[1]", numberMatches(38.0))
                .body("[0].'demonym'", containsString("Ethiopian"))
                .body("[0].'area'", numberMatches(1104300.0))
                .body("[0].'gini'", numberMatches(29.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("DJI", "ERI", "KEN", "SOM", "SSD", "SDN"))
                .body("[0].'nativeName'", containsString("ኢትዮጵያ"))
                .body("[0].'numericCode'", containsString("231"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("ETB"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("am"))
                .body("[0].'translations'.'de'", containsString("Äthiopien"))
                .body("[0].'translations'.'es'", containsString("Etiopía"))
                .body("[0].'translations'.'fr'", containsString("Éthiopie"))
                .body("[0].'translations'.'ja'", containsString("エチオピア"))
                .body("[0].'translations'.'it'", containsString("Etiopia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_14_getOnAllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'name'", containsString("Afghanistan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".af"))
                .body("[0].'alpha2Code'", containsString("AF"))
                .body("[0].'alpha3Code'", containsString("AFG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("93"))
                .body("[0].'capital'", containsString("Kabul"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("AF", "Afġānistān"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(2.7657145E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(33.0))
                .body("[0].'latlng'[1]", numberMatches(65.0))
                .body("[0].'demonym'", containsString("Afghan"))
                .body("[0].'area'", numberMatches(652230.0))
                .body("[0].'gini'", numberMatches(27.8))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:30"))
                .body("[0].'borders'.size()", equalTo(6))
                .body("[0].'borders'", hasItems("IRN", "PAK", "TKM", "UZB", "TJK", "CHN"))
                .body("[0].'nativeName'", containsString("افغانستان"))
                .body("[0].'numericCode'", containsString("004"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("AFN"))
                .body("[0].'currencies'[0].'name'", containsString("Afghan afghani"))
                .body("[0].'currencies'[0].'symbol'", containsString("؋"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'[0].'iso639_1'", containsString("ps"))
                .body("[0].'languages'[0].'iso639_2'", containsString("pus"))
                .body("[0].'languages'[0].'name'", containsString("Pashto"))
                .body("[0].'languages'[0].'nativeName'", containsString("پښتو"))
                .body("[0].'languages'[1].'iso639_1'", containsString("uz"))
                .body("[0].'languages'[1].'iso639_2'", containsString("uzb"))
                .body("[0].'languages'[1].'name'", containsString("Uzbek"))
                .body("[0].'languages'[1].'nativeName'", containsString("Oʻzbek"))
                .body("[0].'languages'[2].'iso639_1'", containsString("tk"))
                .body("[0].'languages'[2].'iso639_2'", containsString("tuk"))
                .body("[0].'languages'[2].'name'", containsString("Turkmen"))
                .body("[0].'languages'[2].'nativeName'", containsString("Türkmen"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[0].'translations'.'br'", containsString("Afeganistão"))
                .body("[0].'translations'.'pt'", containsString("Afeganistão"))
                .body("[0].'translations'.'nl'", containsString("Afghanistan"))
                .body("[0].'translations'.'hr'", containsString("Afganistan"))
                .body("[0].'translations'.'fa'", containsString("افغانستان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/afg.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("SAARC"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("South Asian Association for Regional Cooperation"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("AFG"))
                .body("[1].'name'", containsString("Åland Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ax"))
                .body("[1].'alpha2Code'", containsString("AX"))
                .body("[1].'alpha3Code'", containsString("ALA"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("358"))
                .body("[1].'capital'", containsString("Mariehamn"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("AX", "Aaland", "Aland", "Ahvenanmaa"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[1].'population'", numberMatches(28875.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(60.116667))
                .body("[1].'latlng'[1]", numberMatches(19.9))
                .body("[1].'demonym'", containsString("Ålandish"))
                .body("[1].'area'", numberMatches(1580.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Åland"))
                .body("[1].'numericCode'", containsString("248"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("EUR"))
                .body("[1].'currencies'[0].'name'", containsString("Euro"))
                .body("[1].'currencies'[0].'symbol'", containsString("€"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("sv"))
                .body("[1].'languages'[0].'iso639_2'", containsString("swe"))
                .body("[1].'languages'[0].'name'", containsString("Swedish"))
                .body("[1].'languages'[0].'nativeName'", containsString("svenska"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[1].'translations'.'br'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'pt'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'nl'", containsString("Ålandeilanden"))
                .body("[1].'translations'.'hr'", containsString("Ålandski otoci"))
                .body("[1].'translations'.'fa'", containsString("جزایر الند"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/ala.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("EU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("European Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[1].'cioc'", containsString(""))
                .body("[2].'name'", containsString("Albania"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".al"))
                .body("[2].'alpha2Code'", containsString("AL"))
                .body("[2].'alpha3Code'", containsString("ALB"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("355"))
                .body("[2].'capital'", containsString("Tirana"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("AL", "Shqipëri", "Shqipëria", "Shqipnia"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                .body("[2].'population'", numberMatches(2886026.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(41.0))
                .body("[2].'latlng'[1]", numberMatches(20.0))
                .body("[2].'demonym'", containsString("Albanian"))
                .body("[2].'area'", numberMatches(28748.0))
                .body("[2].'gini'", numberMatches(34.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("MNE", "GRC", "MKD", "KOS"))
                .body("[2].'nativeName'", containsString("Shqipëria"))
                .body("[2].'numericCode'", containsString("008"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("ALL"))
                .body("[2].'currencies'[0].'name'", containsString("Albanian lek"))
                .body("[2].'currencies'[0].'symbol'", containsString("L"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("sq"))
                .body("[2].'languages'[0].'iso639_2'", containsString("sqi"))
                .body("[2].'languages'[0].'name'", containsString("Albanian"))
                .body("[2].'languages'[0].'nativeName'", containsString("Shqip"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                .body("[2].'translations'.'br'", containsString("Albânia"))
                .body("[2].'translations'.'pt'", containsString("Albânia"))
                .body("[2].'translations'.'nl'", containsString("Albanië"))
                .body("[2].'translations'.'hr'", containsString("Albanija"))
                .body("[2].'translations'.'fa'", containsString("آلبانی"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/alb.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("CEFTA"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Central European Free Trade Agreement"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[2].'cioc'", containsString("ALB"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_15_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/currency/ILS")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Israel"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".il"))
                .body("[0].'alpha2Code'", containsString("IL"))
                .body("[0].'alpha3Code'", containsString("ISR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("972"))
                .body("[0].'capital'", containsString("Jerusalem"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("IL", "State of Israel", "Medīnat Yisrā'el"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(8527400.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(31.5))
                .body("[0].'latlng'[1]", numberMatches(34.75))
                .body("[0].'demonym'", containsString("Israeli"))
                .body("[0].'area'", numberMatches(20770.0))
                .body("[0].'gini'", numberMatches(39.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("EGY", "JOR", "LBN", "SYR"))
                .body("[0].'nativeName'", containsString("יִשְׂרָאֵל"))
                .body("[0].'numericCode'", containsString("376"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("ILS"))
                .body("[0].'currencies'[0].'name'", containsString("Israeli new shekel"))
                .body("[0].'currencies'[0].'symbol'", containsString("₪"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("he"))
                .body("[0].'languages'[0].'iso639_2'", containsString("heb"))
                .body("[0].'languages'[0].'name'", containsString("Hebrew (modern)"))
                .body("[0].'languages'[0].'nativeName'", containsString("עברית"))
                .body("[0].'languages'[1].'iso639_1'", containsString("ar"))
                .body("[0].'languages'[1].'iso639_2'", containsString("ara"))
                .body("[0].'languages'[1].'name'", containsString("Arabic"))
                .body("[0].'languages'[1].'nativeName'", containsString("العربية"))
                .body("[0].'translations'.'de'", containsString("Israel"))
                .body("[0].'translations'.'es'", containsString("Israel"))
                .body("[0].'translations'.'fr'", containsString("Israël"))
                .body("[0].'translations'.'ja'", containsString("イスラエル"))
                .body("[0].'translations'.'it'", containsString("Israele"))
                .body("[0].'translations'.'br'", containsString("Israel"))
                .body("[0].'translations'.'pt'", containsString("Israel"))
                .body("[0].'translations'.'nl'", containsString("Israël"))
                .body("[0].'translations'.'hr'", containsString("Izrael"))
                .body("[0].'translations'.'fa'", containsString("اسرائیل"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/isr.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("ISR"))
                .body("[1].'name'", containsString("Palestine, State of"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ps"))
                .body("[1].'alpha2Code'", containsString("PS"))
                .body("[1].'alpha3Code'", containsString("PSE"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("970"))
                .body("[1].'capital'", containsString("Ramallah"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("PS", "State of Palestine", "Dawlat Filasṭin"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Western Asia"))
                .body("[1].'population'", numberMatches(4682467.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(31.9))
                .body("[1].'latlng'[1]", numberMatches(35.2))
                .body("[1].'demonym'", containsString("Palestinian"))
                .body("[1].'area'", nullValue())
                .body("[1].'gini'", numberMatches(35.5))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(3))
                .body("[1].'borders'", hasItems("ISR", "EGY", "JOR"))
                .body("[1].'nativeName'", containsString("فلسطين"))
                .body("[1].'numericCode'", containsString("275"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("ILS"))
                .body("[1].'currencies'[0].'name'", containsString("Israeli new sheqel"))
                .body("[1].'currencies'[0].'symbol'", containsString("₪"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("ar"))
                .body("[1].'languages'[0].'iso639_2'", containsString("ara"))
                .body("[1].'languages'[0].'name'", containsString("Arabic"))
                .body("[1].'languages'[0].'nativeName'", containsString("العربية"))
                .body("[1].'translations'.'de'", containsString("Palästina"))
                .body("[1].'translations'.'es'", containsString("Palestina"))
                .body("[1].'translations'.'fr'", containsString("Palestine"))
                .body("[1].'translations'.'ja'", containsString("パレスチナ"))
                .body("[1].'translations'.'it'", containsString("Palestina"))
                .body("[1].'translations'.'br'", containsString("Palestina"))
                .body("[1].'translations'.'pt'", containsString("Palestina"))
                .body("[1].'translations'.'nl'", containsString("Palestijnse gebieden"))
                .body("[1].'translations'.'hr'", containsString("Palestina"))
                .body("[1].'translations'.'fa'", containsString("فلسطین"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/pse.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("AL"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("Arab League"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("جامعة الدول العربية", "Jāmiʻat ad-Duwal al-ʻArabīyah", "League of Arab States"))
                .body("[1].'cioc'", containsString("PLE"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_16_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Americas?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(57))
                .body("[0].'name'", containsString("Anguilla"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ai"))
                .body("[0].'alpha2Code'", containsString("AI"))
                .body("[0].'alpha3Code'", containsString("AIA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("The Valley"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("AI"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("Caribbean"))
                .body("[0].'population'", numberMatches(13452.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(18.25))
                .body("[0].'latlng'[1]", numberMatches(-63.16666666))
                .body("[0].'demonym'", containsString("Anguillian"))
                .body("[0].'area'", numberMatches(91.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Anguilla"))
                .body("[0].'numericCode'", containsString("660"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("XCD"))
                .body("[0].'currencies'[0].'name'", containsString("East Caribbean dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Anguilla"))
                .body("[0].'translations'.'es'", containsString("Anguilla"))
                .body("[0].'translations'.'fr'", containsString("Anguilla"))
                .body("[0].'translations'.'ja'", containsString("アンギラ"))
                .body("[0].'translations'.'it'", containsString("Anguilla"))
                .body("[0].'translations'.'br'", containsString("Anguila"))
                .body("[0].'translations'.'pt'", containsString("Anguila"))
                .body("[0].'translations'.'nl'", containsString("Anguilla"))
                .body("[0].'translations'.'hr'", containsString("Angvila"))
                .body("[0].'translations'.'fa'", containsString("آنگویلا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/aia.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString(""))
                .body("[1].'name'", containsString("Antigua and Barbuda"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ag"))
                .body("[1].'alpha2Code'", containsString("AG"))
                .body("[1].'alpha3Code'", containsString("ATG"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("1"))
                .body("[1].'capital'", containsString("Saint John's"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("AG"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("Caribbean"))
                .body("[1].'population'", numberMatches(86295.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(17.05))
                .body("[1].'latlng'[1]", numberMatches(-61.8))
                .body("[1].'demonym'", containsString("Antiguan, Barbudan"))
                .body("[1].'area'", numberMatches(442.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Antigua and Barbuda"))
                .body("[1].'numericCode'", containsString("028"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("XCD"))
                .body("[1].'currencies'[0].'name'", containsString("East Caribbean dollar"))
                .body("[1].'currencies'[0].'symbol'", containsString("$"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("en"))
                .body("[1].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[1].'languages'[0].'name'", containsString("English"))
                .body("[1].'languages'[0].'nativeName'", containsString("English"))
                .body("[1].'translations'.'de'", containsString("Antigua und Barbuda"))
                .body("[1].'translations'.'es'", containsString("Antigua y Barbuda"))
                .body("[1].'translations'.'fr'", containsString("Antigua-et-Barbuda"))
                .body("[1].'translations'.'ja'", containsString("アンティグア・バーブーダ"))
                .body("[1].'translations'.'it'", containsString("Antigua e Barbuda"))
                .body("[1].'translations'.'br'", containsString("Antígua e Barbuda"))
                .body("[1].'translations'.'pt'", containsString("Antígua e Barbuda"))
                .body("[1].'translations'.'nl'", containsString("Antigua en Barbuda"))
                .body("[1].'translations'.'hr'", containsString("Antigva i Barbuda"))
                .body("[1].'translations'.'fa'", containsString("آنتیگوا و باربودا"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/atg.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("CARICOM"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("Caribbean Community"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("Comunidad del Caribe", "Communauté Caribéenne", "Caribische Gemeenschap"))
                .body("[1].'cioc'", containsString("ANT"))
                .body("[2].'name'", containsString("Argentina"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ar"))
                .body("[2].'alpha2Code'", containsString("AR"))
                .body("[2].'alpha3Code'", containsString("ARG"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("54"))
                .body("[2].'capital'", containsString("Buenos Aires"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("South America"))
                .body("[2].'population'", numberMatches(4.35904E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-34.0))
                .body("[2].'latlng'[1]", numberMatches(-64.0))
                .body("[2].'demonym'", containsString("Argentinean"))
                .body("[2].'area'", numberMatches(2780400.0))
                .body("[2].'gini'", numberMatches(44.5))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC-03:00"))
                .body("[2].'borders'.size()", equalTo(5))
                .body("[2].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[2].'nativeName'", containsString("Argentina"))
                .body("[2].'numericCode'", containsString("032"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("ARS"))
                .body("[2].'currencies'[0].'name'", containsString("Argentine peso"))
                .body("[2].'currencies'[0].'symbol'", containsString("$"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'[0].'iso639_1'", containsString("es"))
                .body("[2].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[2].'languages'[0].'name'", containsString("Spanish"))
                .body("[2].'languages'[0].'nativeName'", containsString("Español"))
                .body("[2].'languages'[1].'iso639_1'", containsString("gn"))
                .body("[2].'languages'[1].'iso639_2'", containsString("grn"))
                .body("[2].'languages'[1].'name'", containsString("Guaraní"))
                .body("[2].'languages'[1].'nativeName'", containsString("Avañe'ẽ"))
                .body("[2].'translations'.'de'", containsString("Argentinien"))
                .body("[2].'translations'.'es'", containsString("Argentina"))
                .body("[2].'translations'.'fr'", containsString("Argentine"))
                .body("[2].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[2].'translations'.'it'", containsString("Argentina"))
                .body("[2].'translations'.'br'", containsString("Argentina"))
                .body("[2].'translations'.'pt'", containsString("Argentina"))
                .body("[2].'translations'.'nl'", containsString("Argentinië"))
                .body("[2].'translations'.'hr'", containsString("Argentina"))
                .body("[2].'translations'.'fa'", containsString("آرژانتین"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/arg.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("USAN"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Union of South American Nations"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(3))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(4))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[2].'cioc'", containsString("ARG"))
                ; // Skipping assertions on the remaining 54 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_17_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Tokelau")
                .get(baseUrlOfSut + "/rest/v2/subregion/Northern%20Africa?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(7))
                .body("[0].'name'", containsString("Algeria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dz"))
                .body("[0].'alpha2Code'", containsString("DZ"))
                .body("[0].'alpha3Code'", containsString("DZA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("213"))
                .body("[0].'capital'", containsString("Algiers"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("DZ", "Dzayer", "Algérie"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(4.04E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(28.0))
                .body("[0].'latlng'[1]", numberMatches(3.0))
                .body("[0].'demonym'", containsString("Algerian"))
                .body("[0].'area'", numberMatches(2381741.0))
                .body("[0].'gini'", numberMatches(35.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("TUN", "LBY", "NER", "ESH", "MRT", "MLI", "MAR"))
                .body("[0].'nativeName'", containsString("الجزائر"))
                .body("[0].'numericCode'", containsString("012"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("DZD"))
                .body("[0].'currencies'[0].'name'", containsString("Algerian dinar"))
                .body("[0].'currencies'[0].'symbol'", containsString("د.ج"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("ar"))
                .body("[0].'languages'[0].'iso639_2'", containsString("ara"))
                .body("[0].'languages'[0].'name'", containsString("Arabic"))
                .body("[0].'languages'[0].'nativeName'", containsString("العربية"))
                .body("[0].'translations'.'de'", containsString("Algerien"))
                .body("[0].'translations'.'es'", containsString("Argelia"))
                .body("[0].'translations'.'fr'", containsString("Algérie"))
                .body("[0].'translations'.'ja'", containsString("アルジェリア"))
                .body("[0].'translations'.'it'", containsString("Algeria"))
                .body("[0].'translations'.'br'", containsString("Argélia"))
                .body("[0].'translations'.'pt'", containsString("Argélia"))
                .body("[0].'translations'.'nl'", containsString("Algerije"))
                .body("[0].'translations'.'hr'", containsString("Alžir"))
                .body("[0].'translations'.'fa'", containsString("الجزایر"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/dza.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(2))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'regionalBlocs'[1].'acronym'", containsString("AL"))
                .body("[0].'regionalBlocs'[1].'name'", containsString("Arab League"))
                .body("[0].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[1].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[1].'otherNames'", hasItems("جامعة الدول العربية", "Jāmiʻat ad-Duwal al-ʻArabīyah", "League of Arab States"))
                .body("[0].'cioc'", containsString("ALG"))
                .body("[1].'name'", containsString("Egypt"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".eg"))
                .body("[1].'alpha2Code'", containsString("EG"))
                .body("[1].'alpha3Code'", containsString("EGY"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("20"))
                .body("[1].'capital'", containsString("Cairo"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("EG", "Arab Republic of Egypt"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Northern Africa"))
                .body("[1].'population'", numberMatches(9.129E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(27.0))
                .body("[1].'latlng'[1]", numberMatches(30.0))
                .body("[1].'demonym'", containsString("Egyptian"))
                .body("[1].'area'", numberMatches(1002450.0))
                .body("[1].'gini'", numberMatches(30.8))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(3))
                .body("[1].'borders'", hasItems("ISR", "LBY", "SDN"))
                .body("[1].'nativeName'", containsString("مصر‎"))
                .body("[1].'numericCode'", containsString("818"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("EGP"))
                .body("[1].'currencies'[0].'name'", containsString("Egyptian pound"))
                .body("[1].'currencies'[0].'symbol'", containsString("£"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'[0].'iso639_1'", containsString("ar"))
                .body("[1].'languages'[0].'iso639_2'", containsString("ara"))
                .body("[1].'languages'[0].'name'", containsString("Arabic"))
                .body("[1].'languages'[0].'nativeName'", containsString("العربية"))
                .body("[1].'translations'.'de'", containsString("Ägypten"))
                .body("[1].'translations'.'es'", containsString("Egipto"))
                .body("[1].'translations'.'fr'", containsString("Égypte"))
                .body("[1].'translations'.'ja'", containsString("エジプト"))
                .body("[1].'translations'.'it'", containsString("Egitto"))
                .body("[1].'translations'.'br'", containsString("Egito"))
                .body("[1].'translations'.'pt'", containsString("Egipto"))
                .body("[1].'translations'.'nl'", containsString("Egypte"))
                .body("[1].'translations'.'hr'", containsString("Egipat"))
                .body("[1].'translations'.'fa'", containsString("مصر"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/egy.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(2))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[1].'regionalBlocs'[1].'acronym'", containsString("AL"))
                .body("[1].'regionalBlocs'[1].'name'", containsString("Arab League"))
                .body("[1].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(0))
                .body("[1].'regionalBlocs'[1].'otherNames'.size()", equalTo(3))
                .body("[1].'regionalBlocs'[1].'otherNames'", hasItems("جامعة الدول العربية", "Jāmiʻat ad-Duwal al-ʻArabīyah", "League of Arab States"))
                .body("[1].'cioc'", containsString("EGY"))
                .body("[2].'name'", containsString("Libya"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ly"))
                .body("[2].'alpha2Code'", containsString("LY"))
                .body("[2].'alpha3Code'", containsString("LBY"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("218"))
                .body("[2].'capital'", containsString("Tripoli"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("LY", "State of Libya", "Dawlat Libya"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Northern Africa"))
                .body("[2].'population'", numberMatches(6385000.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(25.0))
                .body("[2].'latlng'[1]", numberMatches(17.0))
                .body("[2].'demonym'", containsString("Libyan"))
                .body("[2].'area'", numberMatches(1759540.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(6))
                .body("[2].'borders'", hasItems("DZA", "TCD", "EGY", "NER", "SDN", "TUN"))
                .body("[2].'nativeName'", containsString("‏ليبيا"))
                .body("[2].'numericCode'", containsString("434"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("LYD"))
                .body("[2].'currencies'[0].'name'", containsString("Libyan dinar"))
                .body("[2].'currencies'[0].'symbol'", containsString("ل.د"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("ar"))
                .body("[2].'languages'[0].'iso639_2'", containsString("ara"))
                .body("[2].'languages'[0].'name'", containsString("Arabic"))
                .body("[2].'languages'[0].'nativeName'", containsString("العربية"))
                .body("[2].'translations'.'de'", containsString("Libyen"))
                .body("[2].'translations'.'es'", containsString("Libia"))
                .body("[2].'translations'.'fr'", containsString("Libye"))
                .body("[2].'translations'.'ja'", containsString("リビア"))
                .body("[2].'translations'.'it'", containsString("Libia"))
                .body("[2].'translations'.'br'", containsString("Líbia"))
                .body("[2].'translations'.'pt'", containsString("Líbia"))
                .body("[2].'translations'.'nl'", containsString("Libië"))
                .body("[2].'translations'.'hr'", containsString("Libija"))
                .body("[2].'translations'.'fa'", containsString("لیبی"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/lby.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(2))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[2].'regionalBlocs'[1].'acronym'", containsString("AL"))
                .body("[2].'regionalBlocs'[1].'name'", containsString("Arab League"))
                .body("[2].'regionalBlocs'[1].'otherAcronyms'.size()", equalTo(0))
                .body("[2].'regionalBlocs'[1].'otherNames'.size()", equalTo(3))
                .body("[2].'regionalBlocs'[1].'otherNames'", hasItems("جامعة الدول العربية", "Jāmiʻat ad-Duwal al-ʻArabīyah", "League of Arab States"))
                .body("[2].'cioc'", containsString("LBA"))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_18_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/VI?EMextraParam123=_EM_5084_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Viet Nam"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".vn"))
                .body("[0].'alpha2Code'", containsString("VN"))
                .body("[0].'alpha3Code'", containsString("VNM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("84"))
                .body("[0].'capital'", containsString("Hanoi"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("VN", "Socialist Republic of Vietnam", "Cộng hòa Xã hội chủ nghĩa Việt Nam"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("South-Eastern Asia"))
                .body("[0].'population'", numberMatches(9.27E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(16.16666666))
                .body("[0].'latlng'[1]", numberMatches(107.83333333))
                .body("[0].'demonym'", containsString("Vietnamese"))
                .body("[0].'area'", numberMatches(331212.0))
                .body("[0].'gini'", numberMatches(35.6))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+07:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("KHM", "CHN", "LAO"))
                .body("[0].'nativeName'", containsString("Việt Nam"))
                .body("[0].'numericCode'", containsString("704"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("VND"))
                .body("[0].'currencies'[0].'name'", containsString("Vietnamese đồng"))
                .body("[0].'currencies'[0].'symbol'", containsString("₫"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("vi"))
                .body("[0].'languages'[0].'iso639_2'", containsString("vie"))
                .body("[0].'languages'[0].'name'", containsString("Vietnamese"))
                .body("[0].'languages'[0].'nativeName'", containsString("Tiếng Việt"))
                .body("[0].'translations'.'de'", containsString("Vietnam"))
                .body("[0].'translations'.'es'", containsString("Vietnam"))
                .body("[0].'translations'.'fr'", containsString("Viêt Nam"))
                .body("[0].'translations'.'ja'", containsString("ベトナム"))
                .body("[0].'translations'.'it'", containsString("Vietnam"))
                .body("[0].'translations'.'br'", containsString("Vietnã"))
                .body("[0].'translations'.'pt'", containsString("Vietname"))
                .body("[0].'translations'.'nl'", containsString("Vietnam"))
                .body("[0].'translations'.'hr'", containsString("Vijetnam"))
                .body("[0].'translations'.'fa'", containsString("ویتنام"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/vnm.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("ASEAN"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Association of Southeast Asian Nations"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("VIE"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_19_getOnV2DemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/demonym/Solomon%20Islander")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Solomon Islands"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".sb"))
                .body("[0].'alpha2Code'", containsString("SB"))
                .body("[0].'alpha3Code'", containsString("SLB"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("677"))
                .body("[0].'capital'", containsString("Honiara"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("SB"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(642000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-8.0))
                .body("[0].'latlng'[1]", numberMatches(159.0))
                .body("[0].'demonym'", containsString("Solomon Islander"))
                .body("[0].'area'", numberMatches(28896.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Solomon Islands"))
                .body("[0].'numericCode'", containsString("090"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("SBD"))
                .body("[0].'currencies'[0].'name'", containsString("Solomon Islands dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Salomonen"))
                .body("[0].'translations'.'es'", containsString("Islas Salomón"))
                .body("[0].'translations'.'fr'", containsString("Îles Salomon"))
                .body("[0].'translations'.'ja'", containsString("ソロモン諸島"))
                .body("[0].'translations'.'it'", containsString("Isole Salomone"))
                .body("[0].'translations'.'br'", containsString("Ilhas Salomão"))
                .body("[0].'translations'.'pt'", containsString("Ilhas Salomão"))
                .body("[0].'translations'.'nl'", containsString("Salomonseilanden"))
                .body("[0].'translations'.'hr'", containsString("Solomonski Otoci"))
                .body("[0].'translations'.'fa'", containsString("جزایر سلیمان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/slb.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("SOL"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_20_getOnV2CapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/capital/Kampala")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Uganda"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ug"))
                .body("[0].'alpha2Code'", containsString("UG"))
                .body("[0].'alpha3Code'", containsString("UGA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("256"))
                .body("[0].'capital'", containsString("Kampala"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("UG", "Republic of Uganda", "Jamhuri ya Uganda"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(3.38607E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(1.0))
                .body("[0].'latlng'[1]", numberMatches(32.0))
                .body("[0].'demonym'", containsString("Ugandan"))
                .body("[0].'area'", numberMatches(241550.0))
                .body("[0].'gini'", numberMatches(44.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("COD", "KEN", "RWA", "SSD", "TZA"))
                .body("[0].'nativeName'", containsString("Uganda"))
                .body("[0].'numericCode'", containsString("800"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("UGX"))
                .body("[0].'currencies'[0].'name'", containsString("Ugandan shilling"))
                .body("[0].'currencies'[0].'symbol'", containsString("Sh"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'languages'[1].'iso639_1'", containsString("sw"))
                .body("[0].'languages'[1].'iso639_2'", containsString("swa"))
                .body("[0].'languages'[1].'name'", containsString("Swahili"))
                .body("[0].'languages'[1].'nativeName'", containsString("Kiswahili"))
                .body("[0].'translations'.'de'", containsString("Uganda"))
                .body("[0].'translations'.'es'", containsString("Uganda"))
                .body("[0].'translations'.'fr'", containsString("Uganda"))
                .body("[0].'translations'.'ja'", containsString("ウガンダ"))
                .body("[0].'translations'.'it'", containsString("Uganda"))
                .body("[0].'translations'.'br'", containsString("Uganda"))
                .body("[0].'translations'.'pt'", containsString("Uganda"))
                .body("[0].'translations'.'nl'", containsString("Oeganda"))
                .body("[0].'translations'.'hr'", containsString("Uganda"))
                .body("[0].'translations'.'fa'", containsString("اوگاندا"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/uga.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AU"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("African Union"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(5))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("الاتحاد الأفريقي", "Union africaine", "União Africana", "Unión Africana", "Umoja wa Afrika"))
                .body("[0].'cioc'", containsString("UGA"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_21_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/region/oceania")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(27))
                .body("[0].'name'", containsString("American Samoa"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".as"))
                .body("[0].'alpha2Code'", containsString("AS"))
                .body("[0].'alpha3Code'", containsString("ASM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Pago Pago"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AS", "Amerika Sāmoa", "Amelika Sāmoa", "Sāmoa Amelika"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(55519.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-14.33333333))
                .body("[0].'latlng'[1]", numberMatches(-170.0))
                .body("[0].'demonym'", containsString("American Samoan"))
                .body("[0].'area'", numberMatches(199.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("American Samoa"))
                .body("[0].'numericCode'", containsString("016"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("en", "sm"))
                .body("[0].'translations'.'de'", containsString("Amerikanisch-Samoa"))
                .body("[0].'translations'.'es'", containsString("Samoa Americana"))
                .body("[0].'translations'.'fr'", containsString("Samoa américaines"))
                .body("[0].'translations'.'ja'", containsString("アメリカ領サモア"))
                .body("[0].'translations'.'it'", containsString("Samoa Americane"))
                .body("[0].'relevance'", containsString("0.5"))
                .body("[1].'name'", containsString("Australia"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".au"))
                .body("[1].'alpha2Code'", containsString("AU"))
                .body("[1].'alpha3Code'", containsString("AUS"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("61"))
                .body("[1].'capital'", containsString("Canberra"))
                .body("[1].'altSpellings'.size()", equalTo(1))
                .body("[1].'altSpellings'", hasItems("AU"))
                .body("[1].'region'", containsString("Oceania"))
                .body("[1].'subregion'", containsString("Australia and New Zealand"))
                .body("[1].'population'", numberMatches(2.38688E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-27.0))
                .body("[1].'latlng'[1]", numberMatches(133.0))
                .body("[1].'demonym'", containsString("Australian"))
                .body("[1].'area'", numberMatches(7692024.0))
                .body("[1].'gini'", numberMatches(30.5))
                .body("[1].'timezones'.size()", equalTo(8))
                .body("[1].'timezones'", hasItems("UTC+05:00", "UTC+06:30", "UTC+07:00", "UTC+08:00", "UTC+09:30", "UTC+10:00", "UTC+10:30", "UTC+11:30"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Australia"))
                .body("[1].'numericCode'", containsString("036"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("AUD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("en"))
                .body("[1].'translations'.'de'", containsString("Australien"))
                .body("[1].'translations'.'es'", containsString("Australia"))
                .body("[1].'translations'.'fr'", containsString("Australie"))
                .body("[1].'translations'.'ja'", containsString("オーストラリア"))
                .body("[1].'translations'.'it'", containsString("Australia"))
                .body("[1].'relevance'", containsString("1.5"))
                .body("[2].'name'", containsString("Christmas Island"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".cx"))
                .body("[2].'alpha2Code'", containsString("CX"))
                .body("[2].'alpha3Code'", containsString("CXR"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("61"))
                .body("[2].'capital'", containsString("Flying Fish Cove"))
                .body("[2].'altSpellings'.size()", equalTo(2))
                .body("[2].'altSpellings'", hasItems("CX", "Territory of Christmas Island"))
                .body("[2].'region'", containsString("Oceania"))
                .body("[2].'subregion'", containsString("Australia and New Zealand"))
                .body("[2].'population'", numberMatches(2072.0))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-10.5))
                .body("[2].'latlng'[1]", numberMatches(105.66666666))
                .body("[2].'demonym'", containsString("Christmas Island"))
                .body("[2].'area'", numberMatches(135.0))
                .body("[2].'gini'", nullValue())
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+07:00"))
                .body("[2].'borders'.size()", equalTo(0))
                .body("[2].'nativeName'", containsString("Christmas Island"))
                .body("[2].'numericCode'", containsString("162"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("AUD"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("en"))
                .body("[2].'translations'.'de'", containsString("Weihnachtsinsel"))
                .body("[2].'translations'.'es'", containsString("Isla de Navidad"))
                .body("[2].'translations'.'fr'", containsString("Île Christmas"))
                .body("[2].'translations'.'ja'", containsString("クリスマス島"))
                .body("[2].'translations'.'it'", containsString("Isola di Natale"))
                .body("[2].'relevance'", containsString("0.5"))
                ; // Skipping assertions on the remaining 24 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_22_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/region/africa?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(60))
                .body("[0].'name'", containsString("Algeria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dz"))
                .body("[0].'alpha2Code'", containsString("DZ"))
                .body("[0].'alpha3Code'", containsString("DZA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("213"))
                .body("[0].'capital'", containsString("Algiers"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("DZ", "Dzayer", "Algérie"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(3.95E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(28.0))
                .body("[0].'latlng'[1]", numberMatches(3.0))
                .body("[0].'demonym'", containsString("Algerian"))
                .body("[0].'area'", numberMatches(2381741.0))
                .body("[0].'gini'", numberMatches(35.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("TUN", "LBY", "NER", "ESH", "MRT", "MLI", "MAR"))
                .body("[0].'nativeName'", containsString("الجزائر"))
                .body("[0].'numericCode'", containsString("012"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DZD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Algerien"))
                .body("[0].'translations'.'es'", containsString("Argelia"))
                .body("[0].'translations'.'fr'", containsString("Algérie"))
                .body("[0].'translations'.'ja'", containsString("アルジェリア"))
                .body("[0].'translations'.'it'", containsString("Algeria"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Angola"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ao"))
                .body("[1].'alpha2Code'", containsString("AO"))
                .body("[1].'alpha3Code'", containsString("AGO"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("244"))
                .body("[1].'capital'", containsString("Luanda"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("AO", "República de Angola", "ʁɛpublika de an'ɡɔla"))
                .body("[1].'region'", containsString("Africa"))
                .body("[1].'subregion'", containsString("Middle Africa"))
                .body("[1].'population'", numberMatches(2.4383301E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-12.5))
                .body("[1].'latlng'[1]", numberMatches(18.5))
                .body("[1].'demonym'", containsString("Angolan"))
                .body("[1].'area'", numberMatches(1246700.0))
                .body("[1].'gini'", numberMatches(58.6))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("COG", "COD", "ZMB", "NAM"))
                .body("[1].'nativeName'", containsString("Angola"))
                .body("[1].'numericCode'", containsString("024"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("AOA"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("pt"))
                .body("[1].'translations'.'de'", containsString("Angola"))
                .body("[1].'translations'.'es'", containsString("Angola"))
                .body("[1].'translations'.'fr'", containsString("Angola"))
                .body("[1].'translations'.'ja'", containsString("アンゴラ"))
                .body("[1].'translations'.'it'", containsString("Angola"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Benin"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".bj"))
                .body("[2].'alpha2Code'", containsString("BJ"))
                .body("[2].'alpha3Code'", containsString("BEN"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("229"))
                .body("[2].'capital'", containsString("Porto-Novo"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("BJ", "Republic of Benin", "République du Bénin"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Western Africa"))
                .body("[2].'population'", numberMatches(1.0315244E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(9.5))
                .body("[2].'latlng'[1]", numberMatches(2.25))
                .body("[2].'demonym'", containsString("Beninese"))
                .body("[2].'area'", numberMatches(112622.0))
                .body("[2].'gini'", numberMatches(38.6))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(4))
                .body("[2].'borders'", hasItems("BFA", "NER", "NGA", "TGO"))
                .body("[2].'nativeName'", containsString("Bénin"))
                .body("[2].'numericCode'", containsString("204"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("XOF"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("fr"))
                .body("[2].'translations'.'de'", containsString("Benin"))
                .body("[2].'translations'.'es'", containsString("Benín"))
                .body("[2].'translations'.'fr'", containsString("Bénin"))
                .body("[2].'translations'.'ja'", containsString("ベナン"))
                .body("[2].'translations'.'it'", containsString("Benin"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 57 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_23_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ar?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(25))
                .body("[0].'name'", containsString("Algeria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dz"))
                .body("[0].'alpha2Code'", containsString("DZ"))
                .body("[0].'alpha3Code'", containsString("DZA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("213"))
                .body("[0].'capital'", containsString("Algiers"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("DZ", "Dzayer", "Algérie"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Northern Africa"))
                .body("[0].'population'", numberMatches(3.95E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(28.0))
                .body("[0].'latlng'[1]", numberMatches(3.0))
                .body("[0].'demonym'", containsString("Algerian"))
                .body("[0].'area'", numberMatches(2381741.0))
                .body("[0].'gini'", numberMatches(35.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(7))
                .body("[0].'borders'", hasItems("TUN", "LBY", "NER", "ESH", "MRT", "MLI", "MAR"))
                .body("[0].'nativeName'", containsString("الجزائر"))
                .body("[0].'numericCode'", containsString("012"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DZD"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ar"))
                .body("[0].'translations'.'de'", containsString("Algerien"))
                .body("[0].'translations'.'es'", containsString("Argelia"))
                .body("[0].'translations'.'fr'", containsString("Algérie"))
                .body("[0].'translations'.'ja'", containsString("アルジェリア"))
                .body("[0].'translations'.'it'", containsString("Algeria"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Bahrain"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bh"))
                .body("[1].'alpha2Code'", containsString("BH"))
                .body("[1].'alpha3Code'", containsString("BHR"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("973"))
                .body("[1].'capital'", containsString("Manama"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("BH", "Kingdom of Bahrain", "Mamlakat al-Baḥrayn"))
                .body("[1].'region'", containsString("Asia"))
                .body("[1].'subregion'", containsString("Western Asia"))
                .body("[1].'population'", numberMatches(1359800.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(26.0))
                .body("[1].'latlng'[1]", numberMatches(50.55))
                .body("[1].'demonym'", containsString("Bahraini"))
                .body("[1].'area'", numberMatches(765.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+03:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("‏البحرين"))
                .body("[1].'numericCode'", containsString("048"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("BHD"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("ar"))
                .body("[1].'translations'.'de'", containsString("Bahrain"))
                .body("[1].'translations'.'es'", containsString("Bahrein"))
                .body("[1].'translations'.'fr'", containsString("Bahreïn"))
                .body("[1].'translations'.'ja'", containsString("バーレーン"))
                .body("[1].'translations'.'it'", containsString("Bahrein"))
                .body("[1].'relevance'", containsString("0"))
                .body("[2].'name'", containsString("Chad"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".td"))
                .body("[2].'alpha2Code'", containsString("TD"))
                .body("[2].'alpha3Code'", containsString("TCD"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("235"))
                .body("[2].'capital'", containsString("N'Djamena"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("TD", "Tchad", "Republic of Chad", "République du Tchad"))
                .body("[2].'region'", containsString("Africa"))
                .body("[2].'subregion'", containsString("Middle Africa"))
                .body("[2].'population'", numberMatches(1.4037E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(15.0))
                .body("[2].'latlng'[1]", numberMatches(19.0))
                .body("[2].'demonym'", containsString("Chadian"))
                .body("[2].'area'", numberMatches(1284000.0))
                .body("[2].'gini'", numberMatches(39.8))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(6))
                .body("[2].'borders'", hasItems("CMR", "CAF", "LBY", "NER", "NGA", "SSD"))
                .body("[2].'nativeName'", containsString("Tchad"))
                .body("[2].'numericCode'", containsString("148"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("XAF"))
                .body("[2].'languages'.size()", equalTo(2))
                .body("[2].'languages'", hasItems("fr", "ar"))
                .body("[2].'translations'.'de'", containsString("Tschad"))
                .body("[2].'translations'.'es'", containsString("Chad"))
                .body("[2].'translations'.'fr'", containsString("Tchad"))
                .body("[2].'translations'.'ja'", containsString("チャド"))
                .body("[2].'translations'.'it'", containsString("Ciad"))
                .body("[2].'relevance'", containsString("0"))
                ; // Skipping assertions on the remaining 22 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_24_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/lang/ay?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bolivia"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bo"))
                .body("[0].'alpha2Code'", containsString("BO"))
                .body("[0].'alpha3Code'", containsString("BOL"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("591"))
                .body("[0].'capital'", containsString("Sucre"))
                .body("[0].'altSpellings'.size()", equalTo(8))
                .body("[0].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(1.1410651E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-17.0))
                .body("[0].'latlng'[1]", numberMatches(-65.0))
                .body("[0].'demonym'", containsString("Bolivian"))
                .body("[0].'area'", numberMatches(1098581.0))
                .body("[0].'gini'", numberMatches(56.3))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ARG", "BRA", "CHL", "PRY", "PER"))
                .body("[0].'nativeName'", containsString("Bolivia"))
                .body("[0].'numericCode'", containsString("068"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("BOB", "BOV"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("es", "ay", "qu"))
                .body("[0].'translations'.'de'", containsString("Bolivien"))
                .body("[0].'translations'.'es'", containsString("Bolivia"))
                .body("[0].'translations'.'fr'", containsString("Bolivie"))
                .body("[0].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[0].'translations'.'it'", containsString("Bolivia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_25_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/az")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Azerbaijan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".az"))
                .body("[0].'alpha2Code'", containsString("AZ"))
                .body("[0].'alpha3Code'", containsString("AZE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("994"))
                .body("[0].'capital'", containsString("Baku"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AZ", "Republic of Azerbaijan", "Azərbaycan Respublikası"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(9636300.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(40.5))
                .body("[0].'latlng'[1]", numberMatches(47.5))
                .body("[0].'demonym'", containsString("Azerbaijani"))
                .body("[0].'area'", numberMatches(86600.0))
                .body("[0].'gini'", numberMatches(33.7))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+04:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("ARM", "GEO", "IRN", "RUS", "TUR"))
                .body("[0].'nativeName'", containsString("Azərbaycan"))
                .body("[0].'numericCode'", containsString("031"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("AZN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("az"))
                .body("[0].'translations'.'de'", containsString("Aserbaidschan"))
                .body("[0].'translations'.'es'", containsString("Azerbaiyán"))
                .body("[0].'translations'.'fr'", containsString("Azerbaïdjan"))
                .body("[0].'translations'.'ja'", containsString("アゼルバイジャン"))
                .body("[0].'translations'.'it'", containsString("Azerbaijan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_26_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/be")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Belarus"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".by"))
                .body("[0].'alpha2Code'", containsString("BY"))
                .body("[0].'alpha3Code'", containsString("BLR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("375"))
                .body("[0].'capital'", containsString("Minsk"))
                .body("[0].'altSpellings'.size()", equalTo(7))
                .body("[0].'altSpellings'", hasItems("BY", "Bielaruś", "Republic of Belarus", "Белоруссия", "Республика Беларусь", "Belorussiya", "Respublika Belarus’"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(9485300.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(53.0))
                .body("[0].'latlng'[1]", numberMatches(28.0))
                .body("[0].'demonym'", containsString("Belarusian"))
                .body("[0].'area'", numberMatches(207600.0))
                .body("[0].'gini'", numberMatches(26.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("LVA", "LTU", "POL", "RUS", "UKR"))
                .body("[0].'nativeName'", containsString("Белару́сь"))
                .body("[0].'numericCode'", containsString("112"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BYR"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("be", "ru"))
                .body("[0].'translations'.'de'", containsString("Weißrussland"))
                .body("[0].'translations'.'es'", containsString("Bielorrusia"))
                .body("[0].'translations'.'fr'", containsString("Biélorussie"))
                .body("[0].'translations'.'ja'", containsString("ベラルーシ"))
                .body("[0].'translations'.'it'", containsString("Bielorussia"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_27_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/bg?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bulgaria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bg"))
                .body("[0].'alpha2Code'", containsString("BG"))
                .body("[0].'alpha3Code'", containsString("BGR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("359"))
                .body("[0].'capital'", containsString("Sofia"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BG", "Republic of Bulgaria", "Република България"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(7202198.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(43.0))
                .body("[0].'latlng'[1]", numberMatches(25.0))
                .body("[0].'demonym'", containsString("Bulgarian"))
                .body("[0].'area'", numberMatches(110879.0))
                .body("[0].'gini'", numberMatches(28.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("GRC", "MKD", "ROU", "SRB", "TUR"))
                .body("[0].'nativeName'", containsString("България"))
                .body("[0].'numericCode'", containsString("100"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BGN"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("bg"))
                .body("[0].'translations'.'de'", containsString("Bulgarien"))
                .body("[0].'translations'.'es'", containsString("Bulgaria"))
                .body("[0].'translations'.'fr'", containsString("Bulgarie"))
                .body("[0].'translations'.'ja'", containsString("ブルガリア"))
                .body("[0].'translations'.'it'", containsString("Bulgaria"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_28_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/bi?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Vanuatu"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".vu"))
                .body("[0].'alpha2Code'", containsString("VU"))
                .body("[0].'alpha3Code'", containsString("VUT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("678"))
                .body("[0].'capital'", containsString("Port Vila"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("VU", "Republic of Vanuatu", "Ripablik blong Vanuatu", "République de Vanuatu"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Melanesia"))
                .body("[0].'population'", numberMatches(264652.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-16.0))
                .body("[0].'latlng'[1]", numberMatches(167.0))
                .body("[0].'demonym'", containsString("Ni-Vanuatu"))
                .body("[0].'area'", numberMatches(12189.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+11:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Vanuatu"))
                .body("[0].'numericCode'", containsString("548"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("VUV"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("bi", "en", "fr"))
                .body("[0].'translations'.'de'", containsString("Vanuatu"))
                .body("[0].'translations'.'es'", containsString("Vanuatu"))
                .body("[0].'translations'.'fr'", containsString("Vanuatu"))
                .body("[0].'translations'.'ja'", containsString("バヌアツ"))
                .body("[0].'translations'.'it'", containsString("Vanuatu"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_29_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/bn")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bangladesh"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bd"))
                .body("[0].'alpha2Code'", containsString("BD"))
                .body("[0].'alpha3Code'", containsString("BGD"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("880"))
                .body("[0].'capital'", containsString("Dhaka"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BD", "People's Republic of Bangladesh", "Gônôprôjatôntri Bangladesh"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(1.58875E8))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(24.0))
                .body("[0].'latlng'[1]", numberMatches(90.0))
                .body("[0].'demonym'", containsString("Bangladeshi"))
                .body("[0].'area'", numberMatches(147570.0))
                .body("[0].'gini'", numberMatches(32.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("MMR", "IND"))
                .body("[0].'nativeName'", containsString("Bangladesh"))
                .body("[0].'numericCode'", containsString("050"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BDT"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("bn"))
                .body("[0].'translations'.'de'", containsString("Bangladesch"))
                .body("[0].'translations'.'es'", containsString("Bangladesh"))
                .body("[0].'translations'.'fr'", containsString("Bangladesh"))
                .body("[0].'translations'.'ja'", containsString("バングラデシュ"))
                .body("[0].'translations'.'it'", containsString("Bangladesh"))
                .body("[0].'relevance'", containsString("2"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_30_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/lang/bs")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Bosnia and Herzegovina"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ba"))
                .body("[0].'alpha2Code'", containsString("BA"))
                .body("[0].'alpha3Code'", containsString("BIH"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("387"))
                .body("[0].'capital'", containsString("Sarajevo"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("BA", "Bosnia-Herzegovina", "Босна и Херцеговина"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(3791622.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(44.0))
                .body("[0].'latlng'[1]", numberMatches(18.0))
                .body("[0].'demonym'", containsString("Bosnian, Herzegovinian"))
                .body("[0].'area'", numberMatches(51209.0))
                .body("[0].'gini'", numberMatches(36.2))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("HRV", "MNE", "SRB"))
                .body("[0].'nativeName'", containsString("Bosna i Hercegovina"))
                .body("[0].'numericCode'", containsString("070"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("BAM"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("bs", "hr", "sr"))
                .body("[0].'translations'.'de'", containsString("Bosnien und Herzegowina"))
                .body("[0].'translations'.'es'", containsString("Bosnia y Herzegovina"))
                .body("[0].'translations'.'fr'", containsString("Bosnie-Herzégovine"))
                .body("[0].'translations'.'ja'", containsString("ボスニア・ヘルツェゴビナ"))
                .body("[0].'translations'.'it'", containsString("Bosnia ed Erzegovina"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Montenegro"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".me"))
                .body("[1].'alpha2Code'", containsString("ME"))
                .body("[1].'alpha3Code'", containsString("MNE"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("382"))
                .body("[1].'capital'", containsString("Podgorica"))
                .body("[1].'altSpellings'.size()", equalTo(2))
                .body("[1].'altSpellings'", hasItems("ME", "Crna Gora"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Southern Europe"))
                .body("[1].'population'", numberMatches(621207.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(42.5))
                .body("[1].'latlng'[1]", numberMatches(19.3))
                .body("[1].'demonym'", containsString("Montenegrin"))
                .body("[1].'area'", numberMatches(13812.0))
                .body("[1].'gini'", numberMatches(30.0))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(5))
                .body("[1].'borders'", hasItems("ALB", "BIH", "HRV", "KOS", "SRB"))
                .body("[1].'nativeName'", containsString("Црна Гора"))
                .body("[1].'numericCode'", containsString("499"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(4))
                .body("[1].'languages'", hasItems("sr", "bs", "sq", "hr"))
                .body("[1].'translations'.'de'", containsString("Montenegro"))
                .body("[1].'translations'.'es'", containsString("Montenegro"))
                .body("[1].'translations'.'fr'", containsString("Monténégro"))
                .body("[1].'translations'.'ja'", containsString("モンテネグロ"))
                .body("[1].'translations'.'it'", containsString("Montenegro"))
                .body("[1].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_31_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ca")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Andorra"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ad"))
                .body("[0].'alpha2Code'", containsString("AD"))
                .body("[0].'alpha3Code'", containsString("AND"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("376"))
                .body("[0].'capital'", containsString("Andorra la Vella"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AD", "Principality of Andorra", "Principat d'Andorra"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(76949.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(42.5))
                .body("[0].'latlng'[1]", numberMatches(1.5))
                .body("[0].'demonym'", containsString("Andorran"))
                .body("[0].'area'", numberMatches(468.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("FRA", "ESP"))
                .body("[0].'nativeName'", containsString("Andorra"))
                .body("[0].'numericCode'", containsString("020"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("ca"))
                .body("[0].'translations'.'de'", containsString("Andorra"))
                .body("[0].'translations'.'es'", containsString("Andorra"))
                .body("[0].'translations'.'fr'", containsString("Andorre"))
                .body("[0].'translations'.'ja'", containsString("アンドラ"))
                .body("[0].'translations'.'it'", containsString("Andorra"))
                .body("[0].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_32_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/ch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Guam"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".gu"))
                .body("[0].'alpha2Code'", containsString("GU"))
                .body("[0].'alpha3Code'", containsString("GUM"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("1"))
                .body("[0].'capital'", containsString("Hagåtña"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("GU", "Guåhån"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Micronesia"))
                .body("[0].'population'", numberMatches(159358.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(13.46666666))
                .body("[0].'latlng'[1]", numberMatches(144.78333333))
                .body("[0].'demonym'", containsString("Guamanian"))
                .body("[0].'area'", numberMatches(549.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+10:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Guam"))
                .body("[0].'numericCode'", containsString("316"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("en", "ch", "es"))
                .body("[0].'translations'.'de'", containsString("Guam"))
                .body("[0].'translations'.'es'", containsString("Guam"))
                .body("[0].'translations'.'fr'", containsString("Guam"))
                .body("[0].'translations'.'ja'", containsString("グアム"))
                .body("[0].'translations'.'it'", containsString("Guam"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Northern Mariana Islands"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".mp"))
                .body("[1].'alpha2Code'", containsString("MP"))
                .body("[1].'alpha3Code'", containsString("MNP"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("1"))
                .body("[1].'capital'", containsString("Saipan"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("MP", "Commonwealth of the Northern Mariana Islands", "Sankattan Siha Na Islas Mariånas"))
                .body("[1].'region'", containsString("Oceania"))
                .body("[1].'subregion'", containsString("Micronesia"))
                .body("[1].'population'", numberMatches(53883.0))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(15.2))
                .body("[1].'latlng'[1]", numberMatches(145.75))
                .body("[1].'demonym'", containsString("American"))
                .body("[1].'area'", numberMatches(464.0))
                .body("[1].'gini'", nullValue())
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+10:00"))
                .body("[1].'borders'.size()", equalTo(0))
                .body("[1].'nativeName'", containsString("Northern Mariana Islands"))
                .body("[1].'numericCode'", containsString("580"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("USD"))
                .body("[1].'languages'.size()", equalTo(2))
                .body("[1].'languages'", hasItems("en", "ch"))
                .body("[1].'translations'.'de'", containsString("Nördliche Marianen"))
                .body("[1].'translations'.'es'", containsString("Islas Marianas del Norte"))
                .body("[1].'translations'.'fr'", containsString("Îles Mariannes du Nord"))
                .body("[1].'translations'.'ja'", containsString("北マリアナ諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Marianne Settentrionali"))
                .body("[1].'relevance'", containsString("0.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_33_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/cs")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Czech Republic"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cz"))
                .body("[0].'alpha2Code'", containsString("CZ"))
                .body("[0].'alpha3Code'", containsString("CZE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("420"))
                .body("[0].'capital'", containsString("Prague"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("CZ", "Česká republika", "Česko"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Eastern Europe"))
                .body("[0].'population'", numberMatches(1.0537818E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(49.75))
                .body("[0].'latlng'[1]", numberMatches(15.5))
                .body("[0].'demonym'", containsString("Czech"))
                .body("[0].'area'", numberMatches(78865.0))
                .body("[0].'gini'", numberMatches(26.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("AUT", "DEU", "POL", "SVK"))
                .body("[0].'nativeName'", containsString("Česká republika"))
                .body("[0].'numericCode'", containsString("203"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("CZK"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("cs", "sk"))
                .body("[0].'translations'.'de'", containsString("Tschechische Republik"))
                .body("[0].'translations'.'es'", containsString("República Checa"))
                .body("[0].'translations'.'fr'", containsString("République tchèque"))
                .body("[0].'translations'.'ja'", containsString("チェコ"))
                .body("[0].'translations'.'it'", containsString("Repubblica Ceca"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_34_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/da")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Denmark"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".dk"))
                .body("[0].'alpha2Code'", containsString("DK"))
                .body("[0].'alpha3Code'", containsString("DNK"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("45"))
                .body("[0].'capital'", containsString("Copenhagen"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("DK", "Danmark", "Kingdom of Denmark", "Kongeriget Danmark"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[0].'population'", numberMatches(5678348.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(56.0))
                .body("[0].'latlng'[1]", numberMatches(10.0))
                .body("[0].'demonym'", containsString("Danish"))
                .body("[0].'area'", numberMatches(43094.0))
                .body("[0].'gini'", numberMatches(24.0))
                .body("[0].'timezones'.size()", equalTo(5))
                .body("[0].'timezones'", hasItems("UTC-04:00", "UTC-03:00", "UTC-01:00", "UTC", "UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("DEU"))
                .body("[0].'nativeName'", containsString("Danmark"))
                .body("[0].'numericCode'", containsString("208"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("DKK"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("da"))
                .body("[0].'translations'.'de'", containsString("Dänemark"))
                .body("[0].'translations'.'es'", containsString("Dinamarca"))
                .body("[0].'translations'.'fr'", containsString("Danemark"))
                .body("[0].'translations'.'ja'", containsString("デンマーク"))
                .body("[0].'translations'.'it'", containsString("Danimarca"))
                .body("[0].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_35_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/de")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(7))
                .body("[0].'name'", containsString("Austria"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".at"))
                .body("[0].'alpha2Code'", containsString("AT"))
                .body("[0].'alpha3Code'", containsString("AUT"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("43"))
                .body("[0].'capital'", containsString("Vienna"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("AT", "Österreich", "Osterreich", "Oesterreich"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Western Europe"))
                .body("[0].'population'", numberMatches(8602112.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(47.33333333))
                .body("[0].'latlng'[1]", numberMatches(13.33333333))
                .body("[0].'demonym'", containsString("Austrian"))
                .body("[0].'area'", numberMatches(83871.0))
                .body("[0].'gini'", numberMatches(26.0))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+01:00"))
                .body("[0].'borders'.size()", equalTo(8))
                .body("[0].'borders'", hasItems("CZE", "DEU", "HUN", "ITA", "LIE", "SVK", "SVN", "CHE"))
                .body("[0].'nativeName'", containsString("Österreich"))
                .body("[0].'numericCode'", containsString("040"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("de"))
                .body("[0].'translations'.'de'", containsString("Österreich"))
                .body("[0].'translations'.'es'", containsString("Austria"))
                .body("[0].'translations'.'fr'", containsString("Autriche"))
                .body("[0].'translations'.'ja'", containsString("オーストリア"))
                .body("[0].'translations'.'it'", containsString("Austria"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Belgium"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".be"))
                .body("[1].'alpha2Code'", containsString("BE"))
                .body("[1].'alpha3Code'", containsString("BEL"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("32"))
                .body("[1].'capital'", containsString("Brussels"))
                .body("[1].'altSpellings'.size()", equalTo(9))
                .body("[1].'altSpellings'", hasItems("BE", "België", "Belgie", "Belgien", "Belgique", "Kingdom of Belgium", "Koninkrijk België", "Royaume de Belgique", "Königreich Belgien"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Western Europe"))
                .body("[1].'population'", numberMatches(1.124833E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(50.83333333))
                .body("[1].'latlng'[1]", numberMatches(4.0))
                .body("[1].'demonym'", containsString("Belgian"))
                .body("[1].'area'", numberMatches(30528.0))
                .body("[1].'gini'", numberMatches(33.0))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+01:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("FRA", "DEU", "LUX", "NLD"))
                .body("[1].'nativeName'", containsString("België"))
                .body("[1].'numericCode'", containsString("056"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(3))
                .body("[1].'languages'", hasItems("nl", "fr", "de"))
                .body("[1].'translations'.'de'", containsString("Belgien"))
                .body("[1].'translations'.'es'", containsString("Bélgica"))
                .body("[1].'translations'.'fr'", containsString("Belgique"))
                .body("[1].'translations'.'ja'", containsString("ベルギー"))
                .body("[1].'translations'.'it'", containsString("Belgio"))
                .body("[1].'relevance'", containsString("1.5"))
                .body("[2].'name'", containsString("Germany"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".de"))
                .body("[2].'alpha2Code'", containsString("DE"))
                .body("[2].'alpha3Code'", containsString("DEU"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("49"))
                .body("[2].'capital'", containsString("Berlin"))
                .body("[2].'altSpellings'.size()", equalTo(3))
                .body("[2].'altSpellings'", hasItems("DE", "Federal Republic of Germany", "Bundesrepublik Deutschland"))
                .body("[2].'region'", containsString("Europe"))
                .body("[2].'subregion'", containsString("Western Europe"))
                .body("[2].'population'", numberMatches(8.10836E7))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(51.0))
                .body("[2].'latlng'[1]", numberMatches(9.0))
                .body("[2].'demonym'", containsString("German"))
                .body("[2].'area'", numberMatches(357114.0))
                .body("[2].'gini'", numberMatches(28.3))
                .body("[2].'timezones'.size()", equalTo(1))
                .body("[2].'timezones'", hasItems("UTC+01:00"))
                .body("[2].'borders'.size()", equalTo(9))
                .body("[2].'borders'", hasItems("AUT", "BEL", "CZE", "DNK", "FRA", "LUX", "NLD", "POL", "CHE"))
                .body("[2].'nativeName'", containsString("Deutschland"))
                .body("[2].'numericCode'", containsString("276"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'", hasItems("EUR"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'", hasItems("de"))
                .body("[2].'translations'.'de'", containsString("Deutschland"))
                .body("[2].'translations'.'es'", containsString("Alemania"))
                .body("[2].'translations'.'fr'", containsString("Allemagne"))
                .body("[2].'translations'.'ja'", containsString("ドイツ"))
                .body("[2].'translations'.'it'", containsString("Germania"))
                .body("[2].'relevance'", containsString("3"))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_36_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/dv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Maldives"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".mv"))
                .body("[0].'alpha2Code'", containsString("MV"))
                .body("[0].'alpha3Code'", containsString("MDV"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("960"))
                .body("[0].'capital'", containsString("Malé"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("MV", "Maldive Islands", "Republic of the Maldives", "Dhivehi Raajjeyge Jumhooriyya"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(341256.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(3.25))
                .body("[0].'latlng'[1]", numberMatches(73.0))
                .body("[0].'demonym'", containsString("Maldivan"))
                .body("[0].'area'", numberMatches(300.0))
                .body("[0].'gini'", numberMatches(37.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+05:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Maldives"))
                .body("[0].'numericCode'", containsString("462"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("MVR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("dv"))
                .body("[0].'translations'.'de'", containsString("Malediven"))
                .body("[0].'translations'.'es'", containsString("Maldivas"))
                .body("[0].'translations'.'fr'", containsString("Maldives"))
                .body("[0].'translations'.'ja'", containsString("モルディブ"))
                .body("[0].'translations'.'it'", containsString("Maldive"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_37_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/dz")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Bhutan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".bt"))
                .body("[0].'alpha2Code'", containsString("BT"))
                .body("[0].'alpha3Code'", containsString("BTN"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("975"))
                .body("[0].'capital'", containsString("Thimphu"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("BT", "Kingdom of Bhutan"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[0].'population'", numberMatches(763920.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(27.5))
                .body("[0].'latlng'[1]", numberMatches(90.5))
                .body("[0].'demonym'", containsString("Bhutanese"))
                .body("[0].'area'", numberMatches(38394.0))
                .body("[0].'gini'", numberMatches(38.1))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+06:00"))
                .body("[0].'borders'.size()", equalTo(2))
                .body("[0].'borders'", hasItems("CHN", "IND"))
                .body("[0].'nativeName'", containsString("ʼbrug-yul"))
                .body("[0].'numericCode'", containsString("064"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'", hasItems("BTN", "INR"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'", hasItems("dz"))
                .body("[0].'translations'.'de'", containsString("Bhutan"))
                .body("[0].'translations'.'es'", containsString("Bután"))
                .body("[0].'translations'.'fr'", containsString("Bhoutan"))
                .body("[0].'translations'.'ja'", containsString("ブータン"))
                .body("[0].'translations'.'it'", containsString("Bhutan"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_38_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/el")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(2))
                .body("[0].'name'", containsString("Cyprus"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".cy"))
                .body("[0].'alpha2Code'", containsString("CY"))
                .body("[0].'alpha3Code'", containsString("CYP"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("357"))
                .body("[0].'capital'", containsString("Nicosia"))
                .body("[0].'altSpellings'.size()", equalTo(6))
                .body("[0].'altSpellings'", hasItems("CY", "Kýpros", "Kıbrıs", "Republic of Cyprus", "Κυπριακή Δημοκρατία", "Kıbrıs Cumhuriyeti"))
                .body("[0].'region'", containsString("Europe"))
                .body("[0].'subregion'", containsString("Southern Europe"))
                .body("[0].'population'", numberMatches(858000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(35.0))
                .body("[0].'latlng'[1]", numberMatches(33.0))
                .body("[0].'demonym'", containsString("Cypriot"))
                .body("[0].'area'", numberMatches(9251.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(1))
                .body("[0].'borders'", hasItems("GBR"))
                .body("[0].'nativeName'", containsString("Κύπρος"))
                .body("[0].'numericCode'", containsString("196"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("EUR"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("el", "tr", "hy"))
                .body("[0].'translations'.'de'", containsString("Zypern"))
                .body("[0].'translations'.'es'", containsString("Chipre"))
                .body("[0].'translations'.'fr'", containsString("Chypre"))
                .body("[0].'translations'.'ja'", containsString("キプロス"))
                .body("[0].'translations'.'it'", containsString("Cipro"))
                .body("[0].'relevance'", containsString("0"))
                .body("[1].'name'", containsString("Greece"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".gr"))
                .body("[1].'alpha2Code'", containsString("GR"))
                .body("[1].'alpha3Code'", containsString("GRC"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("30"))
                .body("[1].'capital'", containsString("Athens"))
                .body("[1].'altSpellings'.size()", equalTo(4))
                .body("[1].'altSpellings'", hasItems("GR", "Elláda", "Hellenic Republic", "Ελληνική Δημοκρατία"))
                .body("[1].'region'", containsString("Europe"))
                .body("[1].'subregion'", containsString("Southern Europe"))
                .body("[1].'population'", numberMatches(1.0846979E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(39.0))
                .body("[1].'latlng'[1]", numberMatches(22.0))
                .body("[1].'demonym'", containsString("Greek"))
                .body("[1].'area'", numberMatches(131990.0))
                .body("[1].'gini'", numberMatches(34.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC+02:00"))
                .body("[1].'borders'.size()", equalTo(4))
                .body("[1].'borders'", hasItems("ALB", "BGR", "TUR", "MKD"))
                .body("[1].'nativeName'", containsString("Ελλάδα"))
                .body("[1].'numericCode'", containsString("300"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'", hasItems("EUR"))
                .body("[1].'languages'.size()", equalTo(1))
                .body("[1].'languages'", hasItems("el"))
                .body("[1].'translations'.'de'", containsString("Griechenland"))
                .body("[1].'translations'.'es'", containsString("Grecia"))
                .body("[1].'translations'.'fr'", containsString("Grèce"))
                .body("[1].'translations'.'ja'", containsString("ギリシャ"))
                .body("[1].'translations'.'it'", containsString("Grecia"))
                .body("[1].'relevance'", containsString("1.5"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_39_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_253_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/alpha/TL?" + 
                    "fields=LiIh&" + 
                    "EMextraParam123=_EM_252_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_40_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?codes=DZD")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0]", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_41_getOnV1NameWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/Paraguay?" + 
                    "fullText=false&" + 
                    "EMextraParam123=_EM_947_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Paraguay"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".py"))
                .body("[0].'alpha2Code'", containsString("PY"))
                .body("[0].'alpha3Code'", containsString("PRY"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("595"))
                .body("[0].'capital'", containsString("Asunción"))
                .body("[0].'altSpellings'.size()", equalTo(4))
                .body("[0].'altSpellings'", hasItems("PY", "Republic of Paraguay", "República del Paraguay", "Tetã Paraguái"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(7003406.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-23.0))
                .body("[0].'latlng'[1]", numberMatches(-58.0))
                .body("[0].'demonym'", containsString("Paraguayan"))
                .body("[0].'area'", numberMatches(406752.0))
                .body("[0].'gini'", numberMatches(52.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-04:00"))
                .body("[0].'borders'.size()", equalTo(3))
                .body("[0].'borders'", hasItems("ARG", "BOL", "BRA"))
                .body("[0].'nativeName'", containsString("Paraguay"))
                .body("[0].'numericCode'", containsString("600"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("PYG"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'", hasItems("es", "gn"))
                .body("[0].'translations'.'de'", containsString("Paraguay"))
                .body("[0].'translations'.'es'", containsString("Paraguay"))
                .body("[0].'translations'.'fr'", containsString("Paraguay"))
                .body("[0].'translations'.'ja'", containsString("パラグアイ"))
                .body("[0].'translations'.'it'", containsString("Paraguay"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_42_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Pakistan")
                .get(baseUrlOfSut + "/rest/v1/name/Zimbabwe?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Zimbabwe"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".zw"))
                .body("[0].'alpha2Code'", containsString("ZW"))
                .body("[0].'alpha3Code'", containsString("ZWE"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("263"))
                .body("[0].'capital'", containsString("Harare"))
                .body("[0].'altSpellings'.size()", equalTo(2))
                .body("[0].'altSpellings'", hasItems("ZW", "Republic of Zimbabwe"))
                .body("[0].'region'", containsString("Africa"))
                .body("[0].'subregion'", containsString("Eastern Africa"))
                .body("[0].'population'", numberMatches(1.3061239E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-20.0))
                .body("[0].'latlng'[1]", numberMatches(30.0))
                .body("[0].'demonym'", containsString("Zimbabwean"))
                .body("[0].'area'", numberMatches(390757.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+02:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("BWA", "MOZ", "ZAF", "ZMB"))
                .body("[0].'nativeName'", containsString("Zimbabwe"))
                .body("[0].'numericCode'", containsString("716"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'", hasItems("USD"))
                .body("[0].'languages'.size()", equalTo(3))
                .body("[0].'languages'", hasItems("en", "sn", "nd"))
                .body("[0].'translations'.'de'", containsString("Simbabwe"))
                .body("[0].'translations'.'es'", containsString("Zimbabue"))
                .body("[0].'translations'.'fr'", containsString("Zimbabwe"))
                .body("[0].'translations'.'ja'", containsString("ジンバブエ"))
                .body("[0].'translations'.'it'", containsString("Zimbabwe"))
                .body("[0].'relevance'", containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_43_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Polar?" + 
                    "fields=_EM_1303_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_44_getOnV2AllWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/all?" + 
                    "fields=translations&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'translations'.'br'", containsString("Afeganistão"))
                .body("[0].'translations'.'pt'", containsString("Afeganistão"))
                .body("[0].'translations'.'nl'", containsString("Afghanistan"))
                .body("[0].'translations'.'hr'", containsString("Afganistan"))
                .body("[0].'translations'.'fa'", containsString("افغانستان"))
                .body("[0].'translations'.'de'", containsString("Afghanistan"))
                .body("[0].'translations'.'es'", containsString("Afganistán"))
                .body("[0].'translations'.'fr'", containsString("Afghanistan"))
                .body("[0].'translations'.'ja'", containsString("アフガニスタン"))
                .body("[0].'translations'.'it'", containsString("Afghanistan"))
                .body("[1].'translations'.'br'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'pt'", containsString("Ilhas de Aland"))
                .body("[1].'translations'.'nl'", containsString("Ålandeilanden"))
                .body("[1].'translations'.'hr'", containsString("Ålandski otoci"))
                .body("[1].'translations'.'fa'", containsString("جزایر الند"))
                .body("[1].'translations'.'de'", containsString("Åland"))
                .body("[1].'translations'.'es'", containsString("Alandia"))
                .body("[1].'translations'.'fr'", containsString("Åland"))
                .body("[1].'translations'.'ja'", containsString("オーランド諸島"))
                .body("[1].'translations'.'it'", containsString("Isole Aland"))
                .body("[2].'translations'.'br'", containsString("Albânia"))
                .body("[2].'translations'.'pt'", containsString("Albânia"))
                .body("[2].'translations'.'nl'", containsString("Albanië"))
                .body("[2].'translations'.'hr'", containsString("Albanija"))
                .body("[2].'translations'.'fa'", containsString("آلبانی"))
                .body("[2].'translations'.'de'", containsString("Albanien"))
                .body("[2].'translations'.'es'", containsString("Albania"))
                .body("[2].'translations'.'fr'", containsString("Albanie"))
                .body("[2].'translations'.'ja'", containsString("アルバニア"))
                .body("[2].'translations'.'it'", containsString("Albania"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_45_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/demonym/Tuvaluan?" + 
                    "fields=translations&" + 
                    "EMextraParam123=_EM_2065_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Tuvalu"))
                .body("[0].'translations'.'pt'", containsString("Tuvalu"))
                .body("[0].'translations'.'nl'", containsString("Tuvalu"))
                .body("[0].'translations'.'hr'", containsString("Tuvalu"))
                .body("[0].'translations'.'fa'", containsString("تووالو"))
                .body("[0].'translations'.'de'", containsString("Tuvalu"))
                .body("[0].'translations'.'es'", containsString("Tuvalu"))
                .body("[0].'translations'.'fr'", containsString("Tuvalu"))
                .body("[0].'translations'.'ja'", containsString("ツバル"))
                .body("[0].'translations'.'it'", containsString("Tuvalu"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_46_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/PLN?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("48"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_47_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/capital/Philipsburg?fields=_EM_130_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_48_getOnV2SubregionWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Spanien")
                .get(baseUrlOfSut + "/rest/v2/subregion/Central%20America?" + 
                    "fields=_EM_106_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_49_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Neukaledonien")
                .get(baseUrlOfSut + "/rest/v2/lang/CAT?fields=name")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Andorra"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_50_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/AU?fields=36N")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(60))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 57 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_51_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EAEU?" + 
                    "fields=%2363&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_52_getOnV2RegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UNASUR")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'name'", containsString("Argentina"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ar"))
                .body("[0].'alpha2Code'", containsString("AR"))
                .body("[0].'alpha3Code'", containsString("ARG"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("54"))
                .body("[0].'capital'", containsString("Buenos Aires"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("AR", "Argentine Republic", "República Argentina"))
                .body("[0].'region'", containsString("Americas"))
                .body("[0].'subregion'", containsString("South America"))
                .body("[0].'population'", numberMatches(4.35904E7))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-34.0))
                .body("[0].'latlng'[1]", numberMatches(-64.0))
                .body("[0].'demonym'", containsString("Argentinean"))
                .body("[0].'area'", numberMatches(2780400.0))
                .body("[0].'gini'", numberMatches(44.5))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC-03:00"))
                .body("[0].'borders'.size()", equalTo(5))
                .body("[0].'borders'", hasItems("BOL", "BRA", "CHL", "PRY", "URY"))
                .body("[0].'nativeName'", containsString("Argentina"))
                .body("[0].'numericCode'", containsString("032"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("ARS"))
                .body("[0].'currencies'[0].'name'", containsString("Argentine peso"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("es"))
                .body("[0].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[0].'languages'[0].'name'", containsString("Spanish"))
                .body("[0].'languages'[0].'nativeName'", containsString("Español"))
                .body("[0].'languages'[1].'iso639_1'", containsString("gn"))
                .body("[0].'languages'[1].'iso639_2'", containsString("grn"))
                .body("[0].'languages'[1].'name'", containsString("Guaraní"))
                .body("[0].'languages'[1].'nativeName'", containsString("Avañe'ẽ"))
                .body("[0].'translations'.'de'", containsString("Argentinien"))
                .body("[0].'translations'.'es'", containsString("Argentina"))
                .body("[0].'translations'.'fr'", containsString("Argentine"))
                .body("[0].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[0].'translations'.'it'", containsString("Argentina"))
                .body("[0].'translations'.'br'", containsString("Argentina"))
                .body("[0].'translations'.'pt'", containsString("Argentina"))
                .body("[0].'translations'.'nl'", containsString("Argentinië"))
                .body("[0].'translations'.'hr'", containsString("Argentina"))
                .body("[0].'translations'.'fa'", containsString("آرژانتین"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/arg.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("USAN"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Union of South American Nations"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(4))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[0].'cioc'", containsString("ARG"))
                .body("[1].'name'", containsString("Bolivia (Plurinational State of)"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bo"))
                .body("[1].'alpha2Code'", containsString("BO"))
                .body("[1].'alpha3Code'", containsString("BOL"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("591"))
                .body("[1].'capital'", containsString("Sucre"))
                .body("[1].'altSpellings'.size()", equalTo(8))
                .body("[1].'altSpellings'", hasItems("BO", "Buliwya", "Wuliwya", "Plurinational State of Bolivia", "Estado Plurinacional de Bolivia", "Buliwya Mamallaqta", "Wuliwya Suyu", "Tetã Volívia"))
                .body("[1].'region'", containsString("Americas"))
                .body("[1].'subregion'", containsString("South America"))
                .body("[1].'population'", numberMatches(1.0985059E7))
                .body("[1].'latlng'.size()", equalTo(2))
                .body("[1].'latlng'[0]", numberMatches(-17.0))
                .body("[1].'latlng'[1]", numberMatches(-65.0))
                .body("[1].'demonym'", containsString("Bolivian"))
                .body("[1].'area'", numberMatches(1098581.0))
                .body("[1].'gini'", numberMatches(56.3))
                .body("[1].'timezones'.size()", equalTo(1))
                .body("[1].'timezones'", hasItems("UTC-04:00"))
                .body("[1].'borders'.size()", equalTo(5))
                .body("[1].'borders'", hasItems("ARG", "BRA", "CHL", "PRY", "PER"))
                .body("[1].'nativeName'", containsString("Bolivia"))
                .body("[1].'numericCode'", containsString("068"))
                .body("[1].'currencies'.size()", equalTo(1))
                .body("[1].'currencies'[0].'code'", containsString("BOB"))
                .body("[1].'currencies'[0].'name'", containsString("Bolivian boliviano"))
                .body("[1].'currencies'[0].'symbol'", containsString("Bs."))
                .body("[1].'languages'.size()", equalTo(3))
                .body("[1].'languages'[0].'iso639_1'", containsString("es"))
                .body("[1].'languages'[0].'iso639_2'", containsString("spa"))
                .body("[1].'languages'[0].'name'", containsString("Spanish"))
                .body("[1].'languages'[0].'nativeName'", containsString("Español"))
                .body("[1].'languages'[1].'iso639_1'", containsString("ay"))
                .body("[1].'languages'[1].'iso639_2'", containsString("aym"))
                .body("[1].'languages'[1].'name'", containsString("Aymara"))
                .body("[1].'languages'[1].'nativeName'", containsString("aymar aru"))
                .body("[1].'languages'[2].'iso639_1'", containsString("qu"))
                .body("[1].'languages'[2].'iso639_2'", containsString("que"))
                .body("[1].'languages'[2].'name'", containsString("Quechua"))
                .body("[1].'languages'[2].'nativeName'", containsString("Runa Simi"))
                .body("[1].'translations'.'de'", containsString("Bolivien"))
                .body("[1].'translations'.'es'", containsString("Bolivia"))
                .body("[1].'translations'.'fr'", containsString("Bolivie"))
                .body("[1].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[1].'translations'.'it'", containsString("Bolivia"))
                .body("[1].'translations'.'br'", containsString("Bolívia"))
                .body("[1].'translations'.'pt'", containsString("Bolívia"))
                .body("[1].'translations'.'nl'", containsString("Bolivia"))
                .body("[1].'translations'.'hr'", containsString("Bolivija"))
                .body("[1].'translations'.'fa'", containsString("بولیوی"))
                .body("[1].'flag'", containsString("https://restcountries.eu/data/bol.svg"))
                .body("[1].'regionalBlocs'.size()", equalTo(1))
                .body("[1].'regionalBlocs'[0].'acronym'", containsString("USAN"))
                .body("[1].'regionalBlocs'[0].'name'", containsString("Union of South American Nations"))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(3))
                .body("[1].'regionalBlocs'[0].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[1].'regionalBlocs'[0].'otherNames'.size()", equalTo(4))
                .body("[1].'regionalBlocs'[0].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[1].'cioc'", containsString("BOL"))
                .body("[2].'name'", containsString("Brazil"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".br"))
                .body("[2].'alpha2Code'", containsString("BR"))
                .body("[2].'alpha3Code'", containsString("BRA"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("55"))
                .body("[2].'capital'", containsString("Brasília"))
                .body("[2].'altSpellings'.size()", equalTo(4))
                .body("[2].'altSpellings'", hasItems("BR", "Brasil", "Federative Republic of Brazil", "República Federativa do Brasil"))
                .body("[2].'region'", containsString("Americas"))
                .body("[2].'subregion'", containsString("South America"))
                .body("[2].'population'", numberMatches(2.06135893E8))
                .body("[2].'latlng'.size()", equalTo(2))
                .body("[2].'latlng'[0]", numberMatches(-10.0))
                .body("[2].'latlng'[1]", numberMatches(-55.0))
                .body("[2].'demonym'", containsString("Brazilian"))
                .body("[2].'area'", numberMatches(8515767.0))
                .body("[2].'gini'", numberMatches(54.7))
                .body("[2].'timezones'.size()", equalTo(4))
                .body("[2].'timezones'", hasItems("UTC-05:00", "UTC-04:00", "UTC-03:00", "UTC-02:00"))
                .body("[2].'borders'.size()", equalTo(10))
                .body("[2].'borders'", hasItems("ARG", "BOL", "COL", "GUF", "GUY", "PRY", "PER", "SUR", "URY", "VEN"))
                .body("[2].'nativeName'", containsString("Brasil"))
                .body("[2].'numericCode'", containsString("076"))
                .body("[2].'currencies'.size()", equalTo(1))
                .body("[2].'currencies'[0].'code'", containsString("BRL"))
                .body("[2].'currencies'[0].'name'", containsString("Brazilian real"))
                .body("[2].'currencies'[0].'symbol'", containsString("R$"))
                .body("[2].'languages'.size()", equalTo(1))
                .body("[2].'languages'[0].'iso639_1'", containsString("pt"))
                .body("[2].'languages'[0].'iso639_2'", containsString("por"))
                .body("[2].'languages'[0].'name'", containsString("Portuguese"))
                .body("[2].'languages'[0].'nativeName'", containsString("Português"))
                .body("[2].'translations'.'de'", containsString("Brasilien"))
                .body("[2].'translations'.'es'", containsString("Brasil"))
                .body("[2].'translations'.'fr'", containsString("Brésil"))
                .body("[2].'translations'.'ja'", containsString("ブラジル"))
                .body("[2].'translations'.'it'", containsString("Brasile"))
                .body("[2].'translations'.'br'", containsString("Brasil"))
                .body("[2].'translations'.'pt'", containsString("Brasil"))
                .body("[2].'translations'.'nl'", containsString("Brazilië"))
                .body("[2].'translations'.'hr'", containsString("Brazil"))
                .body("[2].'translations'.'fa'", containsString("برزیل"))
                .body("[2].'flag'", containsString("https://restcountries.eu/data/bra.svg"))
                .body("[2].'regionalBlocs'.size()", equalTo(1))
                .body("[2].'regionalBlocs'[0].'acronym'", containsString("USAN"))
                .body("[2].'regionalBlocs'[0].'name'", containsString("Union of South American Nations"))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(3))
                .body("[2].'regionalBlocs'[0].'otherAcronyms'", hasItems("UNASUR", "UNASUL", "UZAN"))
                .body("[2].'regionalBlocs'[0].'otherNames'.size()", equalTo(4))
                .body("[2].'regionalBlocs'[0].'otherNames'", hasItems("Unión de Naciones Suramericanas", "União de Nações Sul-Americanas", "Unie van Zuid-Amerikaanse Naties", "South American Union"))
                .body("[2].'cioc'", containsString("BRA"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_53_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/268?" + 
                    "fields=s7ENSEvHMYR&" + 
                    "EMextraParam123=_EM_1170_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_54_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/subregion/Southern%20Europe?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(17))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".al"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".ad"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".ba"))
                ; // Skipping assertions on the remaining 14 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_55_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/TK?fields=iEr")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_56_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Polar?" + 
                    "fields=_EM_11276_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_57_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EU?fields=%2363")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(33))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 30 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_58_getOnAllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=_EM_3877_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_59_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/Dili?" + 
                    "fields=_EM_2050_XYZ_&" + 
                    "EMextraParam123=_EM_2051_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_60_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/subregion/Southern%20Europe?fields=_EM_9661_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(17))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 14 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_61_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Western%20Europe?fields=_EM_2029_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(9))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_62_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/VI?fields=_EM_5083_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_63_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/MWK?fields=_EM_3884_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_64_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/CAIS?fields=%236N")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_65_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/CARICOM?fields=%236N")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_66_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/CEFTA?fields=%236")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(7))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_67_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EEU?fields=%2363")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(5))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_68_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/EFTA?fields=%2363")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_69_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/NAFTA?" + 
                    "fields=%2363&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_70_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Syrien")
                .get(baseUrlOfSut + "/rest/v2/lang/VI?" + 
                    "fields=callingCodes&" + 
                    "EMextraParam123=_EM_5084_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("84"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_71_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/subregion/Micronesia?fields=_EM_7462_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(7))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 4 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_72_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/callingcode/678?" + 
                    "fields=NftM7Q2&" + 
                    "EMextraParam123=_EM_8647_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_73_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Syrien")
                .get(baseUrlOfSut + "/rest/v2/lang/VI?" + 
                    "fields=capital&" + 
                    "EMextraParam123=_EM_5084_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'capital'", containsString("Hanoi"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_74_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/Singaporean?" + 
                    "fields=_EM_8453_XYZ_&" + 
                    "EMextraParam123=_EM_8454_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_75_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_8131_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/currency/PLN?" + 
                    "fields=alpha3Code&" + 
                    "EMextraParam123=_EM_8130_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("POL"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_76_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_8131_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/currency/PLN?" + 
                    "fields=altSpellings&" + 
                    "EMextraParam123=_EM_8130_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("PL", "Republic of Poland", "Rzeczpospolita Polska"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_77_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/CAT?fields=region")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'region'", containsString("Europe"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_78_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/KAT?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'subregion'", containsString("Western Asia"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_79_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/KAT?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ge"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_80_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/KAT?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'translations'.'br'", containsString("Geórgia"))
                .body("[0].'translations'.'pt'", containsString("Geórgia"))
                .body("[0].'translations'.'nl'", containsString("Georgië"))
                .body("[0].'translations'.'hr'", containsString("Gruzija"))
                .body("[0].'translations'.'fa'", containsString("گرجستان"))
                .body("[0].'translations'.'de'", containsString("Georgien"))
                .body("[0].'translations'.'es'", containsString("Georgia"))
                .body("[0].'translations'.'fr'", containsString("Géorgie"))
                .body("[0].'translations'.'ja'", containsString("グルジア"))
                .body("[0].'translations'.'it'", containsString("Georgia"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_81_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/41?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("41"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_82_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/41?fields=Uzz6Z4enZ7L84TCR")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_83_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/MNT?fields=_EM_10018_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_84_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Asia?fields=PknNuSFN43zNM")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(50))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 47 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_85_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Polar?fields=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Antarctica"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".aq"))
                .body("[0].'alpha2Code'", containsString("AQ"))
                .body("[0].'alpha3Code'", containsString("ATA"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("672"))
                .body("[0].'capital'", containsString(""))
                .body("[0].'altSpellings'.size()", equalTo(0))
                .body("[0].'region'", containsString("Polar"))
                .body("[0].'subregion'", containsString(""))
                .body("[0].'population'", numberMatches(1000.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-74.65))
                .body("[0].'latlng'[1]", numberMatches(4.48))
                .body("[0].'demonym'", containsString(""))
                .body("[0].'area'", numberMatches(1.4E7))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(8))
                .body("[0].'timezones'", hasItems("UTC-03:00", "UTC+03:00", "UTC+05:00", "UTC+06:00", "UTC+07:00", "UTC+08:00", "UTC+10:00", "UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Antarctica"))
                .body("[0].'numericCode'", containsString("010"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'[0].'code'", containsString("AUD"))
                .body("[0].'currencies'[0].'name'", containsString("Australian dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'currencies'[1].'code'", containsString("GBP"))
                .body("[0].'currencies'[1].'name'", containsString("British pound"))
                .body("[0].'currencies'[1].'symbol'", containsString("£"))
                .body("[0].'languages'.size()", equalTo(2))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'languages'[1].'iso639_1'", containsString("ru"))
                .body("[0].'languages'[1].'iso639_2'", containsString("rus"))
                .body("[0].'languages'[1].'name'", containsString("Russian"))
                .body("[0].'languages'[1].'nativeName'", containsString("Русский"))
                .body("[0].'translations'.'de'", containsString("Antarktika"))
                .body("[0].'translations'.'es'", containsString("Antártida"))
                .body("[0].'translations'.'fr'", containsString("Antarctique"))
                .body("[0].'translations'.'ja'", containsString("南極大陸"))
                .body("[0].'translations'.'it'", containsString("Antartide"))
                .body("[0].'translations'.'br'", containsString("Antártida"))
                .body("[0].'translations'.'pt'", containsString("Antárctida"))
                .body("[0].'translations'.'nl'", containsString("Antarctica"))
                .body("[0].'translations'.'hr'", containsString("Antarktika"))
                .body("[0].'translations'.'fa'", containsString("جنوبگان"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/ata.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString(""));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_86_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/Nepalese?" + 
                    "fields=_EM_10219_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_87_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/PA?fields=%2363")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(4))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_88_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/SAARC?fields=%2363")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_89_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Tansania")
                .get(baseUrlOfSut + "/rest/v2/callingcode/220?" + 
                    "fields=_EM_7845_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_90_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/Bucharest?" + 
                    "fields=jVLs&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_91_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/TRY?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'subregion'", containsString("Western Asia"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_92_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/SICA?fields=%2363")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_93_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/Apia?fields=q5SndV")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_94_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UNASUL?fields=%1B63")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_95_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/UGX?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ug"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_96_getOnAllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=tcfF5x")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_97_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/KAT?fields=alpha2Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha2Code'", containsString("GE"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_98_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/KAT?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'alpha3Code'", containsString("GEO"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_99_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/NIO?fields=name")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Nicaragua"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_100_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Central%20America?fields=c2HCfJxtRvoQcl9s")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(8))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 5 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_101_getOnAllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=eT7v")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_102_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/258?fields=capital")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'capital'", containsString("Maputo"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_103_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/SV?fields=_EM_24070_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_104_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/965?fields=_EM_26384_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_105_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/Pretoria?fields=vXvtry9Y24bxE4ZW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_106_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Europe?fields=region")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(53))
                .body("[0].'region'", containsString("Europe"))
                .body("[1].'region'", containsString("Europe"))
                .body("[2].'region'", containsString("Europe"))
                ; // Skipping assertions on the remaining 50 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_107_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Europe?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(53))
                .body("[0].'subregion'", containsString("Northern Europe"))
                .body("[1].'subregion'", containsString("Southern Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                ; // Skipping assertions on the remaining 50 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_108_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/Tadzhik?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'altSpellings'.size()", equalTo(5))
                .body("[0].'altSpellings'", hasItems("TJ", "Toçikiston", "Republic of Tajikistan", "Ҷумҳурии Тоҷикистон", "Çumhuriyi Toçikiston"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_109_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/Fakaofo?fields=JBrT")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_110_getOnAllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=JC5Lyd3")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_111_getOnAllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=region")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'region'", containsString("Asia"))
                .body("[1].'region'", containsString("Europe"))
                .body("[2].'region'", containsString("Europe"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_112_getOnAllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("[0].'subregion'", containsString("Southern Asia"))
                .body("[1].'subregion'", containsString("Northern Europe"))
                .body("[2].'subregion'", containsString("Southern Europe"))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_113_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Polynesia?fields=_EM_34809_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(10))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_114_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/Tadzhik?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("992"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_115_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/OM?fields=LdXM7dlb6_LXLY")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/all
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_116_getOnAllReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/all -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/all?fields=Y7")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(250))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 247 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_117_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_126_XYZ_&" + 
                    "codes=OM&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_118_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/692?fields=_EM_35195_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_119_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_16522_XYZ_&" + 
                    "codes=Bo")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_120_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/Panama?" + 
                    "fields=oHhP8wXX&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_121_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/Tuvalu?" + 
                    "fullText=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Tuvalu"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".tv"))
                .body("[0].'alpha2Code'", containsString("TV"))
                .body("[0].'alpha3Code'", containsString("TUV"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("688"))
                .body("[0].'capital'", containsString("Funafuti"))
                .body("[0].'altSpellings'.size()", equalTo(1))
                .body("[0].'altSpellings'", hasItems("TV"))
                .body("[0].'region'", containsString("Oceania"))
                .body("[0].'subregion'", containsString("Polynesia"))
                .body("[0].'population'", numberMatches(10640.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(-8.0))
                .body("[0].'latlng'[1]", numberMatches(178.0))
                .body("[0].'demonym'", containsString("Tuvaluan"))
                .body("[0].'area'", numberMatches(26.0))
                .body("[0].'gini'", nullValue())
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+12:00"))
                .body("[0].'borders'.size()", equalTo(0))
                .body("[0].'nativeName'", containsString("Tuvalu"))
                .body("[0].'numericCode'", containsString("798"))
                .body("[0].'currencies'.size()", equalTo(2))
                .body("[0].'currencies'[0].'code'", containsString("AUD"))
                .body("[0].'currencies'[0].'name'", containsString("Australian dollar"))
                .body("[0].'currencies'[0].'symbol'", containsString("$"))
                .body("[0].'currencies'[1].'code'", containsString("TVD[G]"))
                .body("[0].'currencies'[1].'name'", containsString("Tuvaluan dollar"))
                .body("[0].'currencies'[1].'symbol'", containsString("$"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("en"))
                .body("[0].'languages'[0].'iso639_2'", containsString("eng"))
                .body("[0].'languages'[0].'name'", containsString("English"))
                .body("[0].'languages'[0].'nativeName'", containsString("English"))
                .body("[0].'translations'.'de'", containsString("Tuvalu"))
                .body("[0].'translations'.'es'", containsString("Tuvalu"))
                .body("[0].'translations'.'fr'", containsString("Tuvalu"))
                .body("[0].'translations'.'ja'", containsString("ツバル"))
                .body("[0].'translations'.'it'", containsString("Tuvalu"))
                .body("[0].'translations'.'br'", containsString("Tuvalu"))
                .body("[0].'translations'.'pt'", containsString("Tuvalu"))
                .body("[0].'translations'.'nl'", containsString("Tuvalu"))
                .body("[0].'translations'.'hr'", containsString("Tuvalu"))
                .body("[0].'translations'.'fa'", containsString("تووالو"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/tuv.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(0))
                .body("[0].'cioc'", containsString("TUV"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_122_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/nairobi?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'subregion'", containsString("Eastern Africa"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_123_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/subregion/western%20europe?fields=_EM_10014_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(9))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 6 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_124_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UNASUR?fields=region")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'region'", containsString("Americas"))
                .body("[1].'region'", containsString("Americas"))
                .body("[2].'region'", containsString("Americas"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_125_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UNASUR?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'subregion'", containsString("South America"))
                .body("[1].'subregion'", containsString("South America"))
                .body("[2].'subregion'", containsString("South America"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_126_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/USAN?fields=topLevelDomain")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".ar"))
                .body("[1].'topLevelDomain'.size()", equalTo(1))
                .body("[1].'topLevelDomain'", hasItems(".bo"))
                .body("[2].'topLevelDomain'.size()", equalTo(1))
                .body("[2].'topLevelDomain'", hasItems(".br"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_127_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/UZAN?fields=translations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(15))
                .body("[0].'translations'.'br'", containsString("Argentina"))
                .body("[0].'translations'.'pt'", containsString("Argentina"))
                .body("[0].'translations'.'nl'", containsString("Argentinië"))
                .body("[0].'translations'.'hr'", containsString("Argentina"))
                .body("[0].'translations'.'fa'", containsString("آرژانتین"))
                .body("[0].'translations'.'de'", containsString("Argentinien"))
                .body("[0].'translations'.'es'", containsString("Argentina"))
                .body("[0].'translations'.'fr'", containsString("Argentine"))
                .body("[0].'translations'.'ja'", containsString("アルゼンチン"))
                .body("[0].'translations'.'it'", containsString("Argentina"))
                .body("[1].'translations'.'br'", containsString("Bolívia"))
                .body("[1].'translations'.'pt'", containsString("Bolívia"))
                .body("[1].'translations'.'nl'", containsString("Bolivia"))
                .body("[1].'translations'.'hr'", containsString("Bolivija"))
                .body("[1].'translations'.'fa'", containsString("بولیوی"))
                .body("[1].'translations'.'de'", containsString("Bolivien"))
                .body("[1].'translations'.'es'", containsString("Bolivia"))
                .body("[1].'translations'.'fr'", containsString("Bolivie"))
                .body("[1].'translations'.'ja'", containsString("ボリビア多民族国"))
                .body("[1].'translations'.'it'", containsString("Bolivia"))
                .body("[2].'translations'.'br'", containsString("Brasil"))
                .body("[2].'translations'.'pt'", containsString("Brasil"))
                .body("[2].'translations'.'nl'", containsString("Brazilië"))
                .body("[2].'translations'.'hr'", containsString("Brazil"))
                .body("[2].'translations'.'fa'", containsString("برزیل"))
                .body("[2].'translations'.'de'", containsString("Brasilien"))
                .body("[2].'translations'.'es'", containsString("Brasil"))
                .body("[2].'translations'.'fr'", containsString("Brésil"))
                .body("[2].'translations'.'ja'", containsString("ブラジル"))
                .body("[2].'translations'.'it'", containsString("Brasile"))
                ; // Skipping assertions on the remaining 12 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_128_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/AL?fields=alpha2Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(22))
                .body("[0].'alpha2Code'", containsString("DZ"))
                .body("[1].'alpha2Code'", containsString("BH"))
                .body("[2].'alpha2Code'", containsString("KM"))
                ; // Skipping assertions on the remaining 19 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_129_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/AL?fields=alpha3Code")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(22))
                .body("[0].'alpha3Code'", containsString("DZA"))
                .body("[1].'alpha3Code'", containsString("BHR"))
                .body("[2].'alpha3Code'", containsString("COM"))
                ; // Skipping assertions on the remaining 19 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_130_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/AL?fields=altSpellings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(22))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("DZ", "Dzayer", "Algérie"))
                .body("[1].'altSpellings'.size()", equalTo(3))
                .body("[1].'altSpellings'", hasItems("BH", "Kingdom of Bahrain", "Mamlakat al-Baḥrayn"))
                .body("[2].'altSpellings'.size()", equalTo(5))
                .body("[2].'altSpellings'", hasItems("KM", "Union of the Comoros", "Union des Comores", "Udzima wa Komori", "al-Ittiḥād al-Qumurī"))
                ; // Skipping assertions on the remaining 19 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_131_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/AL?fields=callingCodes")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(22))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("213"))
                .body("[1].'callingCodes'.size()", equalTo(1))
                .body("[1].'callingCodes'", hasItems("973"))
                .body("[2].'callingCodes'.size()", equalTo(1))
                .body("[2].'callingCodes'", hasItems("269"))
                ; // Skipping assertions on the remaining 19 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_132_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/7?fields=t11")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_133_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/76?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'subregion'", containsString("Central Asia"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_134_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/77?fields=subregion")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'subregion'", containsString("Central Asia"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_135_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/81?fields=t11")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_136_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/82?fields=t11")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_137_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/Nepal?" + 
                    "fields=kDHp0Sl&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_138_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/uZ?" + 
                    "fields=4IO8A4O&" + 
                    "fullText=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_139_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/aS?" + 
                    "fields=_EM_28058_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(32))
                .body("'[0]'.isEmpty()", is(true))
                .body("'[1]'.isEmpty()", is(true))
                .body("'[2]'.isEmpty()", is(true))
                ; // Skipping assertions on the remaining 29 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_140_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/Zimbabwe?" + 
                    "fields=_EM_2468_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_141_getOnV2NameWithQueryParamsFullTextEmptyFieldsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7154_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/name/Jordan?" + 
                    "fields=&" + 
                    "fullText=true&" + 
                    "EMextraParam123=_EM_7153_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("Jordan"))
                .body("[0].'topLevelDomain'.size()", equalTo(1))
                .body("[0].'topLevelDomain'", hasItems(".jo"))
                .body("[0].'alpha2Code'", containsString("JO"))
                .body("[0].'alpha3Code'", containsString("JOR"))
                .body("[0].'callingCodes'.size()", equalTo(1))
                .body("[0].'callingCodes'", hasItems("962"))
                .body("[0].'capital'", containsString("Amman"))
                .body("[0].'altSpellings'.size()", equalTo(3))
                .body("[0].'altSpellings'", hasItems("JO", "Hashemite Kingdom of Jordan", "al-Mamlakah al-Urdunīyah al-Hāshimīyah"))
                .body("[0].'region'", containsString("Asia"))
                .body("[0].'subregion'", containsString("Western Asia"))
                .body("[0].'population'", numberMatches(9531712.0))
                .body("[0].'latlng'.size()", equalTo(2))
                .body("[0].'latlng'[0]", numberMatches(31.0))
                .body("[0].'latlng'[1]", numberMatches(36.0))
                .body("[0].'demonym'", containsString("Jordanian"))
                .body("[0].'area'", numberMatches(89342.0))
                .body("[0].'gini'", numberMatches(35.4))
                .body("[0].'timezones'.size()", equalTo(1))
                .body("[0].'timezones'", hasItems("UTC+03:00"))
                .body("[0].'borders'.size()", equalTo(4))
                .body("[0].'borders'", hasItems("IRQ", "ISR", "SAU", "SYR"))
                .body("[0].'nativeName'", containsString("الأردن"))
                .body("[0].'numericCode'", containsString("400"))
                .body("[0].'currencies'.size()", equalTo(1))
                .body("[0].'currencies'[0].'code'", containsString("JOD"))
                .body("[0].'currencies'[0].'name'", containsString("Jordanian dinar"))
                .body("[0].'currencies'[0].'symbol'", containsString("د.ا"))
                .body("[0].'languages'.size()", equalTo(1))
                .body("[0].'languages'[0].'iso639_1'", containsString("ar"))
                .body("[0].'languages'[0].'iso639_2'", containsString("ara"))
                .body("[0].'languages'[0].'name'", containsString("Arabic"))
                .body("[0].'languages'[0].'nativeName'", containsString("العربية"))
                .body("[0].'translations'.'de'", containsString("Jordanien"))
                .body("[0].'translations'.'es'", containsString("Jordania"))
                .body("[0].'translations'.'fr'", containsString("Jordanie"))
                .body("[0].'translations'.'ja'", containsString("ヨルダン"))
                .body("[0].'translations'.'it'", containsString("Giordania"))
                .body("[0].'translations'.'br'", containsString("Jordânia"))
                .body("[0].'translations'.'pt'", containsString("Jordânia"))
                .body("[0].'translations'.'nl'", containsString("Jordanië"))
                .body("[0].'translations'.'hr'", containsString("Jordan"))
                .body("[0].'translations'.'fa'", containsString("اردن"))
                .body("[0].'flag'", containsString("https://restcountries.eu/data/jor.svg"))
                .body("[0].'regionalBlocs'.size()", equalTo(1))
                .body("[0].'regionalBlocs'[0].'acronym'", containsString("AL"))
                .body("[0].'regionalBlocs'[0].'name'", containsString("Arab League"))
                .body("[0].'regionalBlocs'[0].'otherAcronyms'.size()", equalTo(0))
                .body("[0].'regionalBlocs'[0].'otherNames'.size()", equalTo(3))
                .body("[0].'regionalBlocs'[0].'otherNames'", hasItems("جامعة الدول العربية", "Jāmiʻat ad-Duwal al-ʻArabīyah", "League of Arab States"))
                .body("[0].'cioc'", containsString("JOR"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_142_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/Namibia?" + 
                    "fields=_EM_8270_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (200) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_143_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/Morocco?" + 
                    "fields=_EM_26023_XYZ_&" + 
                    "fullText=false")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("'[0]'.isEmpty()", is(true));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_144_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha/_EM_0_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_145_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/currency/4r32w7DIK2?EMextraParam123=_EM_35_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_146_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_547_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/alpha/%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_147_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3303_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/lang/%5CL?EMextraParam123=_EM_3302_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_148_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/region/Po%5Car?EMextraParam123=_EM_2361_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_149_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v1/currency/N%5CD?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_150_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/capital/Di%5Ci?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_151_getOnV1CallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/callingcode/6%5C7")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_152_getOnV1SubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/subregion/Australia%20and%20New%20%5Cealand")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_153_getOnV1AlphaWithQueryParamsEmptyCodesReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/alpha?" + 
                    "codes=&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_154_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_19_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/currency/0YU0OWZ6rXtR4BV")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_155_getOnV2SubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/Australia%20and%20New%20%5Cealand")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_156_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/WilleUsta%5C?fields=InD1UP")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_157_getOnV2CallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/callingcode/M%5C0")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_158_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/PZ%5Car?fields=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_159_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/%5CJD?fields=_EM_11038_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_160_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Myanmar")
                .get(baseUrlOfSut + "/rest/v2/alpha/%5CR?" + 
                    "fields=pVL3vOlQL&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_161_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/_EM_4216_XYZ_?fields=topLevelDomain")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_162_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha/_EM_7806_XYZ_?fields=_EM_7473_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_163_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/lang/KA%5C?fields=alpha3Code")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_164_getOnV1NameWithQueryParamFullTextReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/name/Polan%5C?fullText=true")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_165_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/Ta%5Czhik?fields=I")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_166_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/_EM_29609_XYZ_?fields=MxsYLk")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/alpha
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_167_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/alpha?" + 
                    "fields=_EM_126_XYZ_&" + 
                    "codes=_EM_178_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'message'", containsString("Bad Request"));
    }
    
    
    /**
    * Calls:
    * (400) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_168_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/name/S%5Covenia?" + 
                    "fullText=true&" + 
                    "EMextraParam123=_EM_11137_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_169_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_129_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/currency/IRQ?EMextraParam123=_EM_128_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_170_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Tokelau")
                .get(baseUrlOfSut + "/rest/v1/alpha/ZRI")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_171_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/callingcode/_EM_6_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_172_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Nördliche Marianen")
                .get(baseUrlOfSut + "/rest/v1/capital/_EM_8_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_173_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/region/_EM_9_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_174_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_13_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/subregion/_EM_11_XYZ_?EMextraParam123=_EM_12_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_175_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_2020_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_176_getOnV2LangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/lang/ox1iAGDSx")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/regionalbloc/{regionalbloc}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_177_getOnRegionalblocReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/regionalbloc/{regionalbloc} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_29_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/regionalbloc/Asia?" + 
                    "fields=OWLzTy8XLRWUE&" + 
                    "EMextraParam123=_EM_28_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_178_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Singapur")
                .get(baseUrlOfSut + "/rest/v1/region/_EM_958_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_179_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/_EM_2695_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/lang/{lang}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_180_getOnLangReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/lang/{lang} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v1/lang/w0TlIG?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_181_getOnV2NameWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/name/Vietnamese%20đồng?fields=_EM_20_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_182_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_23_XYZ_?" + 
                    "fields=_EM_22_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_183_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_61_XYZ_?EMextraParam123=_EM_62_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_184_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/MIO?fields=region")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/alpha/{alphacode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_185_getOnAlphaReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/alpha/{alphacode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/alpha/KND?fields=_EM_27253_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_186_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Akericas?fields=name")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_187_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/subregion/South-=astern%20Asia?fields=translations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/currency/{currency}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_188_getOnCurrencReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/currency/{currency} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/currency/UEK?fields=alpha2Code")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_189_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/Ameri_as?fields=_EM_26964_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v1/name/{name}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_190_getOnNameReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v1/name/{name} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_212_XYZ_")
                .get(baseUrlOfSut + "/rest/v1/name/_EM_210_XYZ_?" + 
                    "fullText=true&" + 
                    "EMextraParam123=_EM_211_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/callingcode/{callingcode}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_191_getOnCallingcodReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/callingcode/{callingcode} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/rest/v2/callingcode/_EM_7724_XYZ_?fields=region")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_192_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2474_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_3473_XYZ_?fields=translations")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_193_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/_EM_10588_XYZ_?" + 
                    "fields=_EM_5400_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/subregion/{subregion}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_194_getOnSubregionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/subregion/{subregion} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "Spanien")
                .get(baseUrlOfSut + "/rest/v2/subregion/_EM_1727_XYZ_?fields=region")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/demonym/{demonym}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_195_getOnDemonymReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/demonym/{demonym} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3764_XYZ_")
                .get(baseUrlOfSut + "/rest/v2/demonym/_EM_3944_XYZ_?" + 
                    "fields=ZL3dA&" + 
                    "EMextraParam123=_EM_3763_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_196_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/_EM_11901_XYZ_?fields=_EM_11851_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/region/{region}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_197_getOnRegionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/region/{region} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/region/_EM_15910_XYZ_?fields=_EM_15836_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/rest/v2/capital/{capital}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_198_getOnCapitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/rest/v2/capital/{capital} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/rest/v2/capital/_EM_27254_XYZ_?fields=WCRN_6n")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'message'", containsString("Not Found"));
    }


}
