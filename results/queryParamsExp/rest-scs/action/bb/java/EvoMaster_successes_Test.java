import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-12-25T13:35:00.564-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 13 tests
 * <br>
*  Covered targets: 45
 * <br>
*  Used time: 0h 15m 19s
 * <br>
*  Needed budget for current results: 20%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    /**
    * Calls:
    * (200) GET:/api/title/{sex}/{title}
    */
    @Test(timeout = 60000)
    public void test_0_getOnTitlReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/title/ixYV9jAZXcJDB/YWgWkDAF8MNzq")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-1"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/pat/{txt}/{pat}
    */
    @Test(timeout = 60000)
    public void test_1_getOnPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/pat/UrP4zM/Fw4B257JXZZubX5S")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/pat/{txt}
    */
    @Test(timeout = 60000)
    public void test_2_getOnApiPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/pat/zERZLW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("none"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/ordered4/{w}/{x}/{z}/{y}
    */
    @Test(timeout = 60000)
    public void test_3_getOnOrdered4ReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/ordered4/JvrydqBmrGN/S6dJr2yPlGUKPRx/MFWFQ64XKE/TQPmkivn")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/filesuffix/{directory}/{file}
    */
    @Test(timeout = 60000)
    public void test_4_getOnFilesuffixReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/filesuffix/mXD/i_ckswZHCjwHgh")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/dateparse/{dayname}/{monthname}
    */
    @Test(timeout = 60000)
    public void test_5_getOnDateparsReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/dateparse/o3VW7G2kH1icjb/J0ND_iQeU")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/cookie/{name}/{val}/{site}
    */
    @Test(timeout = 60000)
    public void test_6_getOnCookiReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/cookie/LU/PU_WeDNtPMn/WHAHiglt9V")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/v2/api-docs
    */
    @Test(timeout = 60000)
    public void test_7_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/notypevar/{i}/{s}
    */
    @Test(timeout = 60000)
    public void test_8_getOnNotypevarReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/notypevar/799/EL0")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("3"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/costfuns/{i}/{s}
    */
    @Test(timeout = 60000)
    public void test_9_getOnCostfunReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/costfuns/95/VLv")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/notypevar/{i}/{s}
    */
    @Test(timeout = 60000)
    public void test_10_getOnNotypevarReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/notypevar/-1314412540/E15dHA")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/costfuns/{i}/{s}
    */
    @Test(timeout = 60000)
    public void test_11_getOnCostfunReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/costfuns/-356980329/zXQc")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/calc/{op}/{arg1}/{arg2}
    */
    @Test(timeout = 60000)
    public void test_12_getOnCalcReturnsContent() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/calc/lY8Nle9Pw2Ft4X/0.5467776013359866/0.3186351502448256")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.0"));
    }


}
