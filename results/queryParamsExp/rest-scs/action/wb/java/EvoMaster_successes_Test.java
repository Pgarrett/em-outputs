import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-28T22:55:21.729-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 48 tests
 * <br>
*  Covered targets: 178
 * <br>
*  Used time: 0h 10m 1s
 * <br>
*  Needed budget for current results: 75%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.restscs.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    @Test(timeout = 60000)
    public void test_1_getOnOrdered4ReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2_XYZ_")
                .get(baseUrlOfSut + "/api/ordered4/_EM_0_XYZ_/uaQe/_EM_1_XYZ_/8")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
    }
    
    
    @Test(timeout = 60000)
    public void test_2_getOnFilesuffixReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/filesuffix/_EM_15_XYZ_/_EM_16_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_3_getOnApiPatReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/f")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("none"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4_getOnText2txtWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/text2txt/two/_EM_6269_XYZ_/_EM_7194_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
    }
    
    
    @Test(timeout = 60000)
    public void test_5_getOnText2txtWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/text2txt/you/_EM_6269_XYZ_/tbiaFoCYudFNfrk?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("u"));
    }
    
    
    @Test(timeout = 60000)
    public void test_6_getOnCostfunWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/costfuns/-52707463/29T94L8jpj?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
    }
    
    
    @Test(timeout = 60000)
    public void test_7_getOnDateparsWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/TUe/_EM_25794_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
    }
    
    
    @Test(timeout = 60000)
    public void test_8_getOnDateparsWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/Sat/nov")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("12"));
    }
    
    
    @Test(timeout = 60000)
    public void test_9_getOnDateparsWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1278_XYZ_")
                .get(baseUrlOfSut + "/api/dateparse/qrp/feb?EMextraParam123=_EM_1277_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
    }
    
    
    @Test(timeout = 60000)
    public void test_10_getOnDateparsWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/dateparse/f7CJ3XQWMBb/may?EMextraParam123=_EM_2621_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("5"));
    }
    
    
    @Test(timeout = 60000)
    public void test_11_getOnDateparsWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_943_XYZ_")
                .get(baseUrlOfSut + "/api/dateparse/kQI/oct?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
    }
    
    
    @Test(timeout = 60000)
    public void test_12_getOnNotypevarWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/notypevar/920/_EM_17_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("3"));
    }
    
    
    @Test(timeout = 60000)
    public void test_13_getOnNotypevarWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/notypevar/-1401118633/urrtSESMqNcb?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
    }
    
    
    @Test(timeout = 60000)
    public void test_14_getOnText2txtWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/are/fevFt1RdcjB07/F12rTR_YVs3p")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("r"));
    }
    
    
    @Test(timeout = 60000)
    public void test_15_getOnCookiWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/cookie/userid/_EM_8553_XYZ_/_EM_18542_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_16_getOnCookiWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/cookie/session/_EM_8553_XYZ_/_EM_18541_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
    }
    
    
    @Test(timeout = 60000)
    public void test_17_getOnCostfunWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/costfuns/404/_EM_39_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
    }
    
    
    @Test(timeout = 60000)
    public void test_18_getOnDateparsWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/mon/_EM_32530_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
    }
    
    
    @Test(timeout = 60000)
    public void test_19_getOnDateparsWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1278_XYZ_")
                .get(baseUrlOfSut + "/api/dateparse/_EM_6351_XYZ_/jun?EMextraParam123=_EM_1277_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("6"));
    }
    
    
    @Test(timeout = 60000)
    public void test_20_getOnDateparsWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/wed/_EM_28848_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
    }
    
    
    @Test(timeout = 60000)
    public void test_21_getOnDateparsWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/_EM_7421_XYZ_/mar?EMextraParam123=_EM_1277_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("3"));
    }
    
    
    @Test(timeout = 60000)
    public void test_22_getOnDateparsWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1278_XYZ_")
                .get(baseUrlOfSut + "/api/dateparse/UUM_601Y_UYZ_/jan?EMextraParam123=_EM_1277_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
    }
    
    
    @Test(timeout = 60000)
    public void test_23_getOnDateparsWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/_EM_2320_XYZ_/apr?EMextraParam123=_EM_1911_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("4"));
    }
    
    
    @Test(timeout = 60000)
    public void test_24_getOnDateparsWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/_EM_2799_XYZ_/jun?EMextraParam123=_EM_1277_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("6"));
    }
    
    
    @Test(timeout = 60000)
    public void test_25_getOnDateparsWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/_EM_5360_XYZ_/aug?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("8"));
    }
    
    
    @Test(timeout = 60000)
    public void test_26_getOnDateparsWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/_EM_2409_XYZ_/sep")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("9"));
    }
    
    
    @Test(timeout = 60000)
    public void test_27_getOnPatWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/_9gPj97l4hpWV/_EM_7087_XYZ_a?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_28_getOnTitlWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/male/_EM_19629_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-1"));
    }
    
    
    @Test(timeout = 60000)
    public void test_29_getOnTitlWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/none/sir")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-1"));
    }
    
    
    @Test(timeout = 60000)
    public void test_30_getOnDateparsWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/B2Nufwl_dPt/_EM_4530_XYZ_?EMextraParam123=_EM_4471_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_31_getOnTitlWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/male/rev")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
    }
    
    
    @Test(timeout = 60000)
    public void test_32_getOnCalcWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/calc/_EM_3_XYZ_/0.43454823445701973/0.8258126221298961")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_33_getOnCalcWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/e/-1580555.4053155452/-6896.633233208852")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2.718281828459045"));
    }
    
    
    @Test(timeout = 60000)
    public void test_34_getOnCalcWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/sqrt/8.988465674311579E307/216719.3857873846?EMextraParam123=_EM_4527_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("9.480751908109176E153"));
    }
    
    
    @Test(timeout = 60000)
    public void test_35_getOnCalcWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/log/0.6108683926933671/0.4649384182727?EMextraParam123=_EM_670_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-0.49287373958558267"));
    }
    
    
    @Test(timeout = 60000)
    public void test_36_getOnCalcWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4528_XYZ_")
                .get(baseUrlOfSut + "/api/calc/sine/8.988465674311579E307/216719.3857873846?EMextraParam123=_EM_4527_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.9999969223519041"));
    }
    
    
    @Test(timeout = 60000)
    public void test_37_getOnCalcWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/calc/cosine/0.0/-6938.388966850993")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1.0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_38_getOnCalcWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/tangent/0.0/-6938.388966850993")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_39_getOnCalcWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/calc/divide/-1.4373410084286882/-6938.388966850993?EMextraParam123=_EM_4_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2.0715774444121852E-4"));
    }
    
    
    @Test(timeout = 60000)
    public void test_40_getOnCalcWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/jE7d/-1.2781128965110362E7/151694.14480947738")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_41_getOnCalcWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/_EM_5057_XYZ_/0.0/0.0?EMextraParam123=_EM_670_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_42_getOnCalcWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/_EM_5564_XYZ_/0.9909706775947651/-2271624.182625244")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_43_getOnTitlWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/prof")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_44_getOnTitlWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/lady")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_45_getOnTitlWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/miss")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_46_getOnTitlWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/mrs")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_47_getOnTitlWithQueryParamReturnsContent() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/ms")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
    }


}
