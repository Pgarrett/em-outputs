import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-12-25T15:42:58.985-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 48 tests
 * <br>
*  Covered targets: 117
 * <br>
*  Used time: 0h 15m 1s
 * <br>
*  Needed budget for current results: 89%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.restscs.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_0_getOnText2txtReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/text2txt/{word1}/{word2}/{word3} -> GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/_EM_10430_XYZ_/MyXNL5ZYunN9/_EM_10431_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_1_getOnText2txtReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/text2txt/{word1}/{word2}/{word3} -> GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/see/XvyoK25I/Ir7M")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_2_getOnText2txtReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/text2txt/{word1}/{word2}/{word3} -> GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/bY/the/_EM_44446_XUZ3")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_3_getOnText2txtReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/text2txt/{word1}/{word2}/{word3} -> GET on path '/api/text2txt/{word1}/{word2}/{word3}' defines a response schema but no response body found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/42/I/C3PoGqSuj9")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_4_getOnText2txtReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/text2txt/{word1}/{word2}/{word3} -> Response status 400 not defined for path '/api/text2txt/{word1}/{word2}/{word3}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2575_XYZ_")
                .get(baseUrlOfSut + "/api/text2txt/fptt/_EM_6176_XYZ_/%5CeBWBu@5QT")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/title/{sex}/{title}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_5_getOnTitlReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/title/{sex}/{title} -> Response status 400 not defined for path '/api/title/{sex}/{title}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/ujlBIe/8%5Ci5HJJ8grEq")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_6_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> Response status 400 not defined for path '/api/pat/{txt}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/mP4%5CQKv")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/pat/{txt}/{pat}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_7_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt}/{pat} -> Response status 400 not defined for path '/api/pat/{txt}/{pat}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/pat/Eki%5Cp@YldJUlWUUU/XNI")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/ordered4/{w}/{x}/{z}/{y}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_8_getOnOrdered4ReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/ordered4/{w}/{x}/{z}/{y} -> Response status 400 not defined for path '/api/ordered4/{w}/{x}/{z}/{y}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/R7aHHr/%5C96za5/R_9hylgw89UwfZ/_EM_19486_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/filesuffix/{directory}/{file}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_9_getOnFilesuffixReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/filesuffix/{directory}/{file} -> Response status 400 not defined for path '/api/filesuffix/{directory}/{file}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/filesuffix/jxo%5CcUUVP/960r8VnE3AQUpB")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/cookie/{name}/{val}/{site}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_10_getOnCookiReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/cookie/{name}/{val}/{site} -> Response status 400 not defined for path '/api/cookie/{name}/{val}/{site}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/cookie/userid/%5C%60%5EPn_fPv/CLmkT")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/costfuns/{i}/{s}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_11_getOnCostfunReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/costfuns/{i}/{s} -> Response status 400 not defined for path '/api/costfuns/{i}/{s}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/costfuns/-1532819445/%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/dateparse/{dayname}/{monthname}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_12_getOnDateparsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/dateparse/{dayname}/{monthname} -> Response status 400 not defined for path '/api/dateparse/{dayname}/{monthname}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/%5Cz/NL1JQg55GGpwswB")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/notypevar/{i}/{s}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_13_getOnNotypevarReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/notypevar/{i}/{s} -> Response status 400 not defined for path '/api/notypevar/{i}/{s}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/notypevar/8441/2cyn%5CfY26Tf")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (400) GET:/api/calc/{op}/{arg1}/{arg2}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_14_getOnCalcReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/calc/{op}/{arg1}/{arg2} -> Response status 400 not defined for path '/api/calc/{op}/{arg1}/{arg2}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/ic1ou_%5CJ/1.48011855086067E7/-2.4466063652322854?EMextraParam123=_EM_634_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/text2txt/{word1}/{word2}/{word3}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_15_getOnText2txtReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/text2txt/{word1}/{word2}/{word3} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/fptt/UEqEE7XmdV/ZYBWB%C2%85@5CQ?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/text2txt/fptt/UEqEE7XmdV/ZYBWB%C2%85@5CQ"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}/{pat}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_16_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt}/{pat} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/pat/_EM_1011_XYZ_/_%C2%85l81")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/_EM_1011_XYZ_/_%C2%85l81"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_17_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/gopher//:x4/aed'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/gopher//:x4/aed")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/gopher//:x4/aed"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/ordered4/{w}/{x}/{z}/{y}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_18_getOnOrdered4ReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/ordered4/{w}/{x}/{z}/{y} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/%602oYH/;TtM3f/fy%3ESf/VY6hQ")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/ordered4/%602oYH/;TtM3f/fy%3ESf/VY6hQ"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/filesuffix/{directory}/{file}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_19_getOnFilesuffixReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/filesuffix/{directory}/{file} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/filesuffix/_EM_13453_XYZ_/;3")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/filesuffix/_EM_13453_XYZ_/;3"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_20_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/http//:b/n5'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/http//:b/n5")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/http//:b/n5"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_21_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/afs//:fu/h'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/afs//:fu/h")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/afs//:fu/h"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_22_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/gopher//:fu/h1'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/gopher//:fu/h1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/gopher//:fu/h1"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_23_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/gopher//:gu/h1'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/gopher//:gu/h1")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/gopher//:gu/h1"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_24_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/gopher//:gu/h2'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/gopher//:gu/h2")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/gopher//:gu/h2"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_25_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/http//:h6/ib'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/http//:h6/ib")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/http//:h6/ib"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/title/{sex}/{title}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_26_getOnTitlReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/title/{sex}/{title} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/wmyB/;")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/title/wmyB/;"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_27_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/http//:pp/d62'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/http//:pp/d62")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/http//:pp/d62"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_28_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/ftp//:_/jd'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/ftp//:_/jd")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/ftp//:_/jd"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_29_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/afs//:ov/n5'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/afs//:ov/n5")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/afs//:ov/n5"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_30_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/afs//:pv/n5'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/afs//:pv/n5")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/afs//:pv/n5"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_31_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/http//:v1f/d8'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/http//:v1f/d8")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/http//:v1f/d8"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_32_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/ftp//:s/r4'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/ftp//:s/r4")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/ftp//:s/r4"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_33_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/ftp//:s4/r5'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/ftp//:s4/r5")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/ftp//:s4/r5"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_34_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/afs//:s4/r5'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/afs//:s4/r5")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/afs//:s4/r5"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_35_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/afs//:s4/r6'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/afs//:s4/r6")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/afs//:s4/r6"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_36_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/gopher//:s5/s6'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/gopher//:s5/s6")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/gopher//:s5/s6"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_37_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/ftp//:_h/e3'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/ftp//:_h/e3")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/ftp//:_h/e3"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_38_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/http//:o4s/t3s'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/http//:o4s/t3s")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/http//:o4s/t3s"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_39_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/ftp//:o4s/t3s'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/ftp//:o4s/t3s")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/ftp//:o4s/t3s"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_40_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/ftp//:o4s/ts'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/ftp//:o4s/ts")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/ftp//:o4s/ts"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_41_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/gopher//:x8/d'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/gopher//:x8/d")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/gopher//:x8/d"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_42_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/ftp//:s/nc'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/ftp//:s/nc")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/ftp//:s/nc"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/pat/{txt}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_43_getOnPatReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/pat/{txt} -> No API path found that matches request '/api/pat/gopher//:i0/i0'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/gopher//:i0/i0")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/gopher//:i0/i0"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/dateparse/{dayname}/{monthname}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_44_getOnDateparsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/dateparse/{dayname}/{monthname} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/;/eT3_zxDUww")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/dateparse/;/eT3_zxDUww"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/notypevar/{i}/{s}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_45_getOnNotypevarReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/notypevar/{i}/{s} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/notypevar/957/;")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/notypevar/957/;"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/calc/{op}/{arg1}/{arg2}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_46_getOnCalcReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/calc/{op}/{arg1}/{arg2} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5348_XYZ_")
                .get(baseUrlOfSut + "/api/calc/;RfDWf/0.4189864392892505/0.0?EMextraParam123=_EM_5347_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/calc/;RfDWf/0.4189864392892505/0.0"));
    }
    
    
    /**
    * Calls:
    * (404) GET:/api/cookie/{name}/{val}/{site}
    * Found 1 potential fault of type-code 200
    */
    @Test(timeout = 60000)
    public void test_47_getOnCookiReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/cookie/{name}/{val}/{site} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/cookie/userid/am/;ahk%5Ehe")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/cookie/userid/am/;ahk%5Ehe"));
    }


}
