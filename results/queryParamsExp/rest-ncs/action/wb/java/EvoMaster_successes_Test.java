import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-12-25T15:24:27.206-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 14 tests
 * <br>
*  Covered targets: 79
 * <br>
*  Used time: 0h 15m 0s
 * <br>
*  Needed budget for current results: 88%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.restncs.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * Calls:
    * (200) GET:/v2/api-docs
    */
    @Test(timeout = 60000)
    public void test_0_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/bessj/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_1_getOnBessjReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/bessj/99/0.23168216978007838")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(2.250800840975064E-249));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/bessj/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_2_getOnBessjReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/bessj/8/-8.0")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.22345498635390812));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/expint/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_3_getOnExpintReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/expint/369/0.09958488169277413")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.0024591509452920246));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/gammq/{a}/{x}
    */
    @Test(timeout = 60000)
    public void test_4_getOnGammqReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_6_XYZ_")
                .get(baseUrlOfSut + "/api/gammq/0.1643768050297716/0.5798814591228677?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.08473449842852743));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/remainder/{a}/{b}
    */
    @Test(timeout = 60000)
    public void test_5_getOnRemaindReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/remainder/579/181?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(36.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/remainder/{a}/{b}
    */
    @Test(timeout = 60000)
    public void test_6_getOnRemaindReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/remainder/-1004/125?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(-4.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/remainder/{a}/{b}
    */
    @Test(timeout = 60000)
    public void test_7_getOnRemaindReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_84_XYZ_")
                .get(baseUrlOfSut + "/api/remainder/156/-1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(0.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_8_getOnFisherReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/fisher/120/357/0.5496301938281042?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(8.040682578771943E-5));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_9_getOnFisherReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/fisher/-523471/294/-0.7100822572684645")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(1.0));
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test(timeout = 60000)
    public void test_10_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_2_XYZ_")
                .get(baseUrlOfSut + "/api/triangle/-1366164472/571/817?EMextraParam123=_EM_1_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(0.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test(timeout = 60000)
    public void test_11_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/triangle/84/768/-1112690547?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(0.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/triangle/{a}/{b}/{c}
    */
    @Test(timeout = 60000)
    public void test_12_getOnTrianglReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/triangle/26/-171966454/-951767474")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(0.0))
                .body("'resultAsDouble'", nullValue());
    }
    
    
    /**
    * Calls:
    * (200) GET:/api/fisher/{m}/{n}/{x}
    */
    @Test(timeout = 60000)
    public void test_13_getOnFisherReturnsObject() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/fisher/458/-4193555/0.6535057078453146?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", nullValue())
                .body("'resultAsDouble'", numberMatches(0.33330954172351634));
    }


}
