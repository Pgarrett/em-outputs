import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-06T23:10:38.845-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 14 tests
 * <br>
*  Covered targets: 46
 * <br>
*  Used time: 0h 10m 2s
 * <br>
*  Needed budget for current results: 99%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.tsdes.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("NEWS_ENTITY"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_deleteOnNewReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/news/NRSZcxfGE9x?EMextraParam123=_EM_1_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_1_postOnNewsWithQueryParamsReturns400() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .body(" { " + 
                    " \"country\": \"_EM_4836_XYZ_\", " + 
                    " \"creationTime\": \"2017-03-02T23:38:01.859Z\", " + 
                    " \"id\": \"_EM_4837_XYZ_\", " + 
                    " \"newsId\": \"pOCx\", " + 
                    " \"text\": \"GMXqu6P01m\" " + 
                    " } ")
                .post(baseUrlOfSut + "/news?authorId=_ZrVVKfYn")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_2_putOnNewReturns400() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorId\": \"mjMnj24j\", " + 
                    " \"creationTime\": \"1955-13-27T16:15:20.963Z\", " + 
                    " \"text\": \"mcgX3nMmQ9n\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/acMXR47Kwv45JaD?" + 
                    "country=jFUfPTYFG&" + 
                    "authorId=mjMnj24j")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("JSON parse error: Cannot deserialize value of type `java.time.ZonedDateTime` from String \"1955-13-27T16:15:20.963Z\": Failed to deserialize java.time.ZonedDateTime: (java.time.format.DateTimeParseException) Text '1955-13-27T16:15:20.963Z' could not be parsed: Invalid value for MonthOfYear (valid values 1 - 12): 13; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.ZonedDateTime` from String \"1955-13-27T16:15:20.963Z\": Failed to deserialize java.time.ZonedDateTime: (java.time.format.DateTimeParseException) Text '1955-13-27T16:15:20.963Z' could not be parsed: Invalid value for MonthOfYear (valid values 1 - 12): 13\n at [Source: (ByteArrayInputStream); line: 1, column: 40] (through reference chain: org.tsdes.spring.examples.news.dto.NewsDto[\"creationTime\"])"))
                .body("'path'", containsString("/news/acMXR47Kwv45JaD"));
    }
    
    
    @Test(timeout = 60000)
    public void test_3_postOnNewsWithQueryParamsReturns400() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .contentType("application/json;charset=UTF-8")
                .body(" { " + 
                    " \"creationTime\": \"1969-00-29T05:03:28Z\", " + 
                    " \"id\": \"US4yoiQ9s2QY8LxR\", " + 
                    " \"newsId\": \"uEo5GK2gMNl\" " + 
                    " } ")
                .post(baseUrlOfSut + "/news")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("JSON parse error: Cannot deserialize value of type `java.time.ZonedDateTime` from String \"1969-00-29T05:03:28Z\": Failed to deserialize java.time.ZonedDateTime: (java.time.format.DateTimeParseException) Text '1969-00-29T05:03:28Z' could not be parsed: Invalid value for MonthOfYear (valid values 1 - 12): 0; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.time.ZonedDateTime` from String \"1969-00-29T05:03:28Z\": Failed to deserialize java.time.ZonedDateTime: (java.time.format.DateTimeParseException) Text '1969-00-29T05:03:28Z' could not be parsed: Invalid value for MonthOfYear (valid values 1 - 12): 0\n at [Source: (ByteArrayInputStream); line: 1, column: 17] (through reference chain: org.tsdes.spring.examples.news.dto.NewsDto[\"creationTime\"])"))
                .body("'path'", containsString("/news"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4_putOnTextReturns400() throws Exception {
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "_EM_1301_XYZ_")
                .contentType("text/plain")
                .body()
                .put(baseUrlOfSut + "/news/250/text?EMextraParam123=_EM_1404_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'message'", containsString("Required request body is missing: public org.springframework.http.ResponseEntity<java.lang.Object> org.tsdes.spring.examples.news.api.NewsRestApi.updateText(java.lang.Long,java.lang.String)"))
                .body("'path'", containsString("/news/250/text"));
    }
    
    
    @Test(timeout = 60000)
    public void test_5_getOnNewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news/_EM_0_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_6_deleteOnNewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/news/50?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_7_getOnNewReturns404UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 81L)
                .d("ID", "579")
                .d("AUTHOR_ID", "\"\"")
                .d("COUNTRY", "\"_EM_11644_XYZ_\"")
                .d("CREATION_TIME", "\"1986-02-10 01:14:29\"")
                .d("TEXT", "\"0yarQnUv5\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/news/PaasNWTk?" + 
                    "country=m3z6B_pPSRM3HV&" + 
                    "authorId=8LOqFs")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_8_putOnNewReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"authorId\": \"NxEB9y\", " + 
                    " \"country\": \"aBoGOS6h6\", " + 
                    " \"creationTime\": \"2015-01-15T07:37:43.127Z\", " + 
                    " \"text\": \"Lh4Jzw1loWLGvh\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/V?" + 
                    "EMextraParam123=42&" + 
                    "country=aBoGOS6h6")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_9_putOnNewReturns404UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 282L)
                .d("ID", "621")
                .d("AUTHOR_ID", "\"_EM_4333_XYZ_\"")
                .d("COUNTRY", "\"fIJ_jZVs4G\"")
                .d("CREATION_TIME", "\"1992-05-04 12:15:25\"")
                .d("TEXT", "\"oRYtATLgd6Qw6Fq\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"text\": \"RDfXO_r\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/Ot?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_10_putOnTextReturns404() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1301_XYZ_")
                .contentType("text/plain")
                .body("UJQP0Mim")
                .put(baseUrlOfSut + "/news/804/text?EMextraParam123=_EM_1300_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_11_putOnNewReturns405UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 458L)
                .d("ID", "636")
                .d("AUTHOR_ID", "\"aUzDIQSWM\"")
                .d("COUNTRY", "\"0gNil3VIbg\"")
                .d("CREATION_TIME", "\"1924-07-08 09:35:28\"")
                .d("TEXT", "\"Qb\"")
            .and().insertInto("NEWS_ENTITY", 367L)
                .d("ID", "998")
                .d("AUTHOR_ID", "\"YR9_3t5roBPUopo\"")
                .d("COUNTRY", "\"Saint Helena\"")
                .d("CREATION_TIME", "\"1982-08-29 23:14:50\"")
                .d("TEXT", "\"_EM_6059_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .put(baseUrlOfSut + "/news/;98")
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(405.0))
                .body("'error'", containsString("Method Not Allowed"))
                .body("'message'", containsString("Request method 'PUT' not supported"))
                .body("'path'", containsString("/news/;98"));
    }
    
    
    @Test(timeout = 60000)
    public void test_12_deleteOnNewReturns405UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("NEWS_ENTITY", 282L)
                .d("ID", "8813")
                .d("AUTHOR_ID", "\"Dn\"")
                .d("COUNTRY", "\"fIJ_jZVs4\"")
                .d("CREATION_TIME", "\"1990-05-01 12:15:25\"")
                .d("TEXT", "\"oRYtATLgd6Qw6Fq\"")
            .and().insertInto("NEWS_ENTITY", 249L)
                .d("ID", "947")
                .d("AUTHOR_ID", "\"_EM_6796_XYZ_\"")
                .d("COUNTRY", "\"_EM_6797_XYZ_\"")
                .d("CREATION_TIME", "\"2010-01-30 07:40:30\"")
                .d("TEXT", "\"_EM_4334_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/vnd.tsdes.news+json;charset=UTF-8;version=2")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/news/;47?" + 
                    "country=cnLUNuLkB&" + 
                    "authorId=OlOo")
                .then()
                .statusCode(405)
                .assertThat()
                .contentType("application/vnd.tsdes.news+json")
                .body("'status'", numberMatches(405.0))
                .body("'error'", containsString("Method Not Allowed"))
                .body("'message'", containsString("Request method 'DELETE' not supported"))
                .body("'path'", containsString("/news/;47"));
    }
    
    
    @Test(timeout = 60000)
    public void test_13_putOnNewReturns409() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"country\": \"IkjM\", " + 
                    " \"creationTime\": \"2003-07-19T00:35:38.438Z\", " + 
                    " \"id\": \"VH5NGI\", " + 
                    " \"newsId\": \"6\", " + 
                    " \"text\": \"K\" " + 
                    " } ")
                .put(baseUrlOfSut + "/news/VH5NGI?EMextraParam123=42")
                .then()
                .statusCode(409)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
