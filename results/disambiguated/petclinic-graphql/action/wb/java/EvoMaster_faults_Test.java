import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-06T22:22:55.159-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 21 tests
 * <br>
*  Covered targets: 41
 * <br>
*  Used time: 0h 10m 5s
 * <br>
*  Needed budget for current results: 57%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.springframework.samples.petclinic.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("owners","pets","specialties","types","vet_specialties","visits"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_mutationOnRemoveSpecialtyReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    removeSpecialty  ( input:{specialtyId:863})    {specialties{name}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/repository/springdatajpa/SpringDataSpecialtyRepositoryImpl_38_delete
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_1_mutationOnAddSpecialtyReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    addSpecialty  ( input:{name:\\\"_EM_769_XYZ_\\\"})    {specialty{id}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_143_addSpecialty
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_2_mutationOnUpdatePetReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updatePet  ( input:{petId:861, typeId:null})    {pet{name,type{name}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_122_updatePet
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_3_mutationOnUpdatePetReturnsErrorUsingSql() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updatePet  ( input:{petId:865, typeId:48})    {pet{name,type{name}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_119_updatePet
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_4_mutationOnUpdateSpecialtyReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateSpecialty  ( input:{specialtyId:487, name:\\\"_EM_403_XYZ_\\\"})    {specialty{id}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_149_updateSpecialty
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_5_queryOnOwnerReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owner  (id : 153)  {firstName,city}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Query_66_owner
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot return null for non-nullable type: 'Owner' within parent 'Query' (/owner)"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("owner"))
                .body("'errors'[0].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[0].'locations'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_6_queryOnOwnersReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owners  (orders : [{}, {order:DESC}, {}, {field:lastName, order:null}])  {address,city,telephone}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/repository/springdatajpa/SpringDataOwnerRepositoryImpl_35_findAllByFilterOrder
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_7_mutationOnUpdateOwnerReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateOwner  ( input:{ownerId:116, firstName:\\\"RQZiYJN\\\", address:\\\"__7uiY6E91\\\", city:\\\"OMRSDn\\\"})    {owner{firstName,address,city}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_68_updateOwner
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_8_mutationOnUpdateOwnerReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateOwner  ( input:{ownerId:295, firstName:\\\"N2NfCiXqfIC\\\", lastName:null, telephone:null})    {owner{id,firstName,lastName,address,city,pets{id,name,birthDate,type{name}}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_72_updateOwner
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_9_mutationOnUpdateOwnerReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateOwner  ( input:{ownerId:786, firstName:null, lastName:null, address:null, telephone:null})    {owner{firstName,telephone}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_87_updateOwner
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_10_queryOnSpecialtiesReturnsErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("specialties", 803L)
                .d("name", "NULL")
            .and().insertInto("owners", 804L)
                .d("first_name", "NULL")
                .d("last_name", "\"_EM_2303_XYZ_\"")
                .d("address", "NULL")
                .d("city", "NULL")
                .d("telephone", "\"\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  specialties  {name}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/model/NamedEntity_39_getName
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot return null for non-nullable type: 'String' within parent 'Specialty' (/specialties[0]/name)"))
                .body("'errors'[0].'path'.size()", equalTo(3))
                .body("'errors'[0].'path'[0]", containsString("specialties"))
                .body("'errors'[0].'path'[1]", numberMatches(0.0))
                .body("'errors'[0].'path'[2]", containsString("name"))
                .body("'errors'[0].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[0].'locations'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_11_mutationOnAddOwnerReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    addOwner  ( input:{firstName:\\\"P3Yk9qz2El\\\", lastName:\\\"_EM_1513_XYZ_\\\", address:\\\"6in\\\", city:\\\"_EM_2738_XYZ_\\\", telephone:\\\"naOLi4fZfA\\\"})    {owner{firstName,lastName,pets{id,name,birthDate,type{id},visits{totalCount}}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_60_addOwner
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_12_queryOnPetReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { pet  (id : 474)  {id,birthDate,owner{id,lastName,city},visits{visits{id}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Query_70_pet
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot return null for non-nullable type: 'Pet' within parent 'Query' (/pet)"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("pet"))
                .body("'errors'[0].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[0].'locations'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_13_mutationOnUpdatePetReturnsErrorUsingSql() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updatePet  ( input:{petId:865, name:\\\"_EM_1548_XYZ_\\\", typeId:48})    {pet{name,type{name}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_114_updatePet
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_14_mutationOnUpdateOwnerReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateOwner  ( input:{ownerId:864, firstName:null, city:\\\"MpfyNU6URXbDr6Z\\\"})    {owner{firstName,telephone,pets{birthDate,visits{totalCount}}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_80_updateOwner
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_15_mutationOnUpdateOwnerReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateOwner  ( input:{ownerId:979, lastName:\\\"_EM_2574_XYZ_\\\", address:null, city:null, telephone:null})    {owner{id,lastName,telephone}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_76_updateOwner
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_16_queryOnOwnersReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owners  (orders : [])  {id,firstName,lastName}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/types/OwnerOrder_80_buildOrderJpaQuery
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_17_queryOnOwnersReturnsErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 308L)
                .d("first_name", "\"coh\"")
                .d("last_name", "\"VKMvGQ5BS6c\"")
                .d("address", "NULL")
                .d("city", "\"_EM_2441_XYZ_\"")
                .d("telephone", "\"oR?1wB4\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owners  ( filter:{address:null, city:null},orders : null)  {lastName,address,city,telephone,pets{id,type{name},visits{totalCount}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/model/Owner_94_getPets
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot return null for non-nullable type: 'String' within parent 'Owner' (/owners[0]/address)"))
                .body("'errors'[0].'path'.size()", equalTo(3))
                .body("'errors'[0].'path'[0]", containsString("owners"))
                .body("'errors'[0].'path'[1]", numberMatches(0.0))
                .body("'errors'[0].'path'[2]", containsString("address"))
                .body("'errors'[0].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[0].'locations'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_18_mutationOnUpdateOwnerReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateOwner  ( input:{ownerId:255, firstName:null, lastName:null, address:null, city:null, telephone:\\\"OqrHidzViK\\\"})    {owner{id,lastName,city,telephone}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_84_updateOwner
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_19_queryOnOwnersReturnsErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 308L)
                .d("first_name", "\"cph\"")
                .d("last_name", "\"VKMvGQ5BS6\"")
                .d("address", "NULL")
                .d("city", "\"jJgwR\u0080r6ZVh\"")
                .d("telephone", "\"oRA1wB4\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owners  ( filter:{address:null, city:null})  {id,firstName,lastName,address,city,telephone}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/model/Owner_73_getTelephone
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot return null for non-nullable type: 'String' within parent 'Owner' (/owners[0]/address)"))
                .body("'errors'[0].'path'.size()", equalTo(3))
                .body("'errors'[0].'path'[0]", containsString("owners"))
                .body("'errors'[0].'path'[1]", numberMatches(0.0))
                .body("'errors'[0].'path'[2]", containsString("address"))
                .body("'errors'[0].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[0].'locations'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_20_queryOnOwnersReturnsErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 308L)
                .d("first_name", "\"cph\"")
                .d("last_name", "\"VKMvGQ5BS6\"")
                .d("address", "NULL")
                .d("city", "\"_EM_2439_XYZ_\"")
                .d("telephone", "\"oR?1wB4\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owners  ( filter:{address:null, city:null})  {id,firstName,lastName,address,city}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/model/Owner_65_getCity
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot return null for non-nullable type: 'String' within parent 'Owner' (/owners[0]/address)"))
                .body("'errors'[0].'path'.size()", equalTo(3))
                .body("'errors'[0].'path'[0]", containsString("owners"))
                .body("'errors'[0].'path'[1]", numberMatches(0.0))
                .body("'errors'[0].'path'[2]", containsString("address"))
                .body("'errors'[0].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[0].'locations'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }


}
