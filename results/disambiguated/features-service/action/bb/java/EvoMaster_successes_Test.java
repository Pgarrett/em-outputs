import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-06T20:45:48.490-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 19 tests
 * <br>
*  Covered targets: 65
 * <br>
*  Used time: 0h 11m 9s
 * <br>
*  Needed budget for current results: 79%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_getOnProductFeaturesReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/v/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_1_getOnConfigurFeaturesReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/ELEARNING_SITE/configurations/9E/features")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_2_getOnConfigurationsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/xfIBTu/configurations")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_3_getOnProductsReturns183Elements() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(183))
                .body("", hasItems("rpEhfVqX", "ELEARNING_SITE", "ELEARNING_SITE", "ELEARNING_SITE", "ELEARNING_SITE", "ELEARNING_SITE", "ELEARNING_SITE", "ELEARNING_SITE", "ELEARNING_SITE", "rpEhfVqX", "v", "v", "v", "ELEARNING_SITE", "ELEARNING_SITE", "ELEARNING_SITE", "v", "v", "ELEARNING_SITE", "igMwggdEzzh3", "ELEARNING_SITE", "ELEARNING_SITE", "rpEhfVqX", "dOx", "v", "rpEhfVqX", "v", "v", "v", "rpEhfVqX", "rpEhfVqX", "rpEhfVqX", "rpEhfVqX", "rpEhfVqX", "v", "eY3a0ug4FhD4ty", "ELEARNING_SITE", "v", "rpEhfVqX", "ELEARNING_SITE", "v", "eY3a0ug4FhD4ty", "X_kiQPmWGfXuUvL", "rpEhfVqX", "bJN4U5cmPw60", "eY3a0ug4FhD4ty", "ELEARNING_SITE", "dOx", "eY3a0ug4FhD4ty", "_IgKvJfXs8ARQLC", "bJN4U5cmPw60", "eY3a0ug4FhD4ty", "rpEhfVqX", "dOx", "X_kiQPmWGfXuUvL", "eY3a0ug4FhD4ty", "X_kiQPmWGfXuUvL", "MoVT0fooY1jOg9V", "7nPhfeXk", "igMwggdEzzh3", "eY3a0ug4FhD4ty", "dOx", "igMwggdEzzh3", "X_kiQPmWGfXuUvL", "rpEhfVqX", "aMQvsY2HMdPfMyM", "ELEARNING_SITE", "bJN4U5cmPw60", "ELEARNING_SITE", "X_kiQPmWGfXuUvL", "eY3a0ug4FhD4ty", "_IgKvJfXs8ARQLC", "v", "ELEARNING_SITE", "MoVT0fooY1jOg9V", "p9cVTFwnAJt", "igMwggdEzzh3", "ELEARNING_SITE", "eY3a0ug4FhD4ty", "_IgKvJfXs8ARQLC", "bJN4U5cmPw60", "7nPhfeXk", "ELEARNING_SITE", "aMQvsY2HMdPfMyM", "_IgKvJfXs8ARQLC", "rpEhfVqX", "p9cVTFwnAJt", "p9cVTFwnAJt", "MoVT0fooY1jOg9V", "dOx", "v", "v", "MoVT0fooY1jOg9V", "_IgKvJfXs8ARQLC", "igMwggdEzzh3", "bJN4U5cmPw60", "7nPhfeXk", "v", "MoVT0fooY1jOg9V", "_IgKvJfXs8ARQLC", "X_kiQPmWGfXuUvL", "iB36Ij4RgM6Qp", "v", "NbOI", "igMwggdEzzh3", "0rMarw_8nsUoBG", "igMwggdEzzh3", "W_eFek36kbWR88F8", "ELEARNING_SITE", "_IgKvJfXs8ARQLC", "p9cVTFwnAJt", "aMQvsY2HMdPfMyM", "v3ErhA0G2Aoa", "igMwggdEzzh3", "bJN4U5cmPw60", "Ol_OQad_k", "aMQvsY2HMdPfMyM", "MoVT0fooY1jOg9V", "dOx", "ELEARNING_SITE", "p9cVTFwnAJt", "q", "aMQvsY2HMdPfMyM", "NbOI", "bJN4U5cmPw60", "NbOI", "NbOI", "v3ErhA0G2Aoa", "0rMarw_8nsUoBG", "v", "0rMarw_8nsUoBG", "OCiqPBziN", "q", "v3ErhA0G2Aoa", "v3ErhA0G2Aoa", "Ol_OQad_k", "p9cVTFwnAJt", "X_kiQPmWGfXuUvL", "bJN4U5cmPw60", "dOx", "NbOI", "0rMarw_8nsUoBG", "v", "OCiqPBziN", "OCiqPBziN", "LYpzYu", "eY3a0ug4FhD4ty", "ZSNj_jAN4y", "rpEhfVqX", "opY", "eY3a0ug4FhD4ty", "bJN4U5cmPw60", "ZSNj_jAN4y", "ZSNj_jAN4y", "ZSNj_jAN4y", "iB36Ij4RgM6Qp", "v", "X_kiQPmWGfXuUvL", "opY", "B4BXk792KDBui", "aMQvsY2HMdPfMyM", "5W3HeOFjcutZ1YD", "dMFfbTKpbPGF", "v", "dOx", "LYpzYu", "W_eFek36kbWR88F8", "NbOI", "_IgKvJfXs8ARQLC", "rpEhfVqX", "7nPhfeXk", "ZSNj_jAN4y", "7EgWsumOO0xgsuO", "LYpzYu", "v3ErhA0G2Aoa", "B4BXk792KDBui", "p9cVTFwnAJt", "ZSNj_jAN4y", "rpEhfVqX", "ELEARNING_SITE", "v", "ELEARNING_SITE", "v"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4_getOnProductReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/v")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("v"))
                .body("'features'.size()", equalTo(0))
                .body("'constraints'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_5_getOnConfigurReturnsObject() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/products/ELEARNING_SITE/configurations/hmp9u")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("hmp9u"))
                .body("'valid'", equalTo(true))
                .body("'activedFeatures'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_6_getOnSwagger_jsonReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/swagger.json")
                .then()
                .statusCode(200);
    }
    
    
    @Test(timeout = 60000)
    public void test_7_putOnFeaturReturns200() throws Exception {
        
        given().accept("application/json")
                .contentType("application/x-www-form-urlencoded")
                .body("description=_VuLU_")
                .put(baseUrlOfSut + "/products/rpEhfVqX/features/6DiUgZu")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", containsString("6DiUgZu"))
                .body("'description'", containsString("_VuLU_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_8_postOnProductReturns201() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/rpEhfVqX")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_9_postOnConfigurReturns201() throws Exception {
        
        given().accept("*/*")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE/configurations/hmp9u")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_10_postOnRequiresReturns201() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("sourceFeature=CtKIR8fPmpyf")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE/constraints/requires")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_11_postOnExcludesReturns201() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE/constraints/excludes")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_12_postOnFeaturReturns201() throws Exception {
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(baseUrlOfSut + "/products/ELEARNING_SITE/features/8VxZ")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_13_deleteOnFeaturReturns204() throws Exception {
        
        String location_productName = "";
        
        ValidatableResponse res_0 = given().accept("*/*")
                .post(baseUrlOfSut + "/products/rpEhfVqX")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        location_productName = res_0.extract().header("location");
        assertTrue(isValidURIorEmpty(location_productName));
        
        given().accept("*/*")
                .contentType("application/x-www-form-urlencoded")
                .body("")
                .post(resolveLocation(location_productName, baseUrlOfSut + "/products/ELEARNING_SITE/features/8VxZ"))
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .delete(resolveLocation(location_productName, baseUrlOfSut + "/products/v/features/8VxZ"))
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_14_deleteOnConfigurReturns204() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE/configurations/ZhxxnmVA4bM8")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_15_getOnConfigurReturns204() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/products/arWT0sX/configurations/c0M68aiPqgd1")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_16_deleteOnProductReturns204() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/ELEARNING_SITE")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_17_deleteOnConstraintReturns204() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/leT0tBheCKkM/constraints/427")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_18_deleteOnConstraintReturns204() throws Exception {
        
        given().accept("*/*")
                .delete(baseUrlOfSut + "/products/MoVT0fooY1jOg9V/constraints/-990618938")
                .then()
                .statusCode(204)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
