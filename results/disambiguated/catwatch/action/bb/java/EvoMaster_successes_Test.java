import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-06T20:57:45.731-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 13 tests
 * <br>
*  Covered targets: 120
 * <br>
*  Used time: 0h 11m 40s
 * <br>
*  Needed budget for current results: 98%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_getOnHealth_jsonReturnsObject() throws Exception {
        
        given().accept("application/vnd.spring-boot.actuator.v1+json")
                .get(baseUrlOfSut + "/health.json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.spring-boot.actuator.v1+json")
                .body("'status'", containsString("UP"));
    }
    
    
    @Test(timeout = 60000)
    public void test_1_getOnHealthReturnsObject() throws Exception {
        
        given().accept("application/vnd.spring-boot.actuator.v1+json")
                .get(baseUrlOfSut + "/health")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/vnd.spring-boot.actuator.v1+json")
                .body("'status'", containsString("UP"));
    }
    
    
    @Test(timeout = 60000)
    public void test_2_getOnExportReturnsObject() throws Exception {
        
        given().accept("application/json;charset=utf-8")
                .get(baseUrlOfSut + "/export")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'contributors'.size()", equalTo(0))
                .body("'projects'.size()", equalTo(0))
                .body("'statistics'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_3_getOnApi_docsReturnsObject() throws Exception {
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
    }
    
    
    @Test(timeout = 60000)
    public void test_4_getOnStatisticsLanguagesReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/languages")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_5_getOnStatisticsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics?organizations=_ferf")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_6_getOnLanguagesWithQueryParamsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/languages?organizations=S1Py2g3VHkNm")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_7_getOnLanguagesWithQueryParamsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=YfbTxUh7J&" + 
                    "offset=764")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_8_getOnLanguagesWithQueryParamsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=XQMaGjxaM&" + 
                    "limit=830&" + 
                    "offset=193")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_9_getOnLanguagesWithQueryParamsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=OhpyWu52Qu6YwrGc&" + 
                    "limit=954&" + 
                    "offset=738&" + 
                    "q=n")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_10_getOnProjectsWithQueryParamsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/projects?" + 
                    "offset=286&" + 
                    "start_date=1998-01-08T16%3A52%3A07Z&" + 
                    "sortBy=bakKfxaP2iF02t&" + 
                    "q=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_11_getOnProjectsWithQueryParamsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/projects?" + 
                    "offset=893&" + 
                    "end_date=2023-01-22T01%3A04%3A33.572%2B22%3A26&" + 
                    "sortBy=IES3J2KstAMl&" + 
                    "q=W1g5Se5ASMMT5&" + 
                    "language=Q0kZDmReLigP")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_12_getOnProjectsWithQueryParamsReturnsEmptyList() throws Exception {
        
        given().accept("application/json")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=1&" + 
                    "limit=747&" + 
                    "offset=908&" + 
                    "start_date=2022-12-29T22%3A07%3A46Z&" + 
                    "end_date=2023-12-29T13%3A29%3A02.564Z")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }


}
