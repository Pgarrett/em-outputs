import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-06T20:57:45.702-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 31 tests
 * <br>
*  Covered targets: 167
 * <br>
*  Used time: 0h 11m 40s
 * <br>
*  Needed budget for current results: 98%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static String baseUrlOfSut = "http://localhost:8080";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_postOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. POST:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .post(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(999.0))
                .body("'error'", containsString("None"))
                .body("'message'", containsString("No message available"));
    }
    
    
    @Test(timeout = 60000)
    public void test_1_patchOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. PATCH:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PATCH:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .patch(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(999.0))
                .body("'error'", containsString("None"))
                .body("'message'", containsString("No message available"));
    }
    
    
    @Test(timeout = 60000)
    public void test_2_headOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. HEAD:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. HEAD:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .head(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_3_getOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .get(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(999.0))
                .body("'error'", containsString("None"))
                .body("'message'", containsString("No message available"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4_deleteOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. DELETE:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .delete(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(999.0))
                .body("'error'", containsString("None"))
                .body("'message'", containsString("No message available"));
    }
    
    
    @Test(timeout = 60000)
    public void test_5_putOnErrorShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. PUT:/error
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/error -> Response status 500 not defined for path '/error'.
        given().accept("*/*")
                .put(baseUrlOfSut + "/error")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(999.0))
                .body("'error'", containsString("None"))
                .body("'message'", containsString("No message available"));
    }
    
    
    @Test(timeout = 60000)
    public void test_6_getOnProjectsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/statistics/projects
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 500 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/projects?organizations=Lc")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/projects"));
    }
    
    
    @Test(timeout = 60000)
    public void test_7_getOnStatisticsContributorsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/statistics/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 500 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/contributors?organizations=eRSNpZD")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_8_getOnLanguagesShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/languages
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/languages -> Response status 500 not defined for path '/languages'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=DEcmAL&" + 
                    "limit=451&" + 
                    "offset=-1149996945&" + 
                    "q=t")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("-1149996945"))
                .body("'path'", containsString("/languages"));
    }
    
    
    @Test(timeout = 60000)
    public void test_9_getOnContributorsWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=&" + 
                    "offset=25&" + 
                    "end_date=MDZiq")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"MDZiq\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_10_getOnContributorsWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=S9mOy&" + 
                    "limit=331&" + 
                    "start_date=Df&" + 
                    "end_date=VfG_FgbxGhdt")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"VfG_FgbxGhdt\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_11_getOnContributorsWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=1ci7ovAj6vUDkf&" + 
                    "limit=734&" + 
                    "sortBy=rAE&" + 
                    "q=pXp_s2fOoK")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("sortBy must be empty or have a valid value but was rAE. Valid values are organizationalCommitsCount,organizationalProjectsCount,personalCommitsCount,personalProjectsCount,organizationName,name"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_12_getOnContributorsWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=XoGVayz9fHuPMan&" + 
                    "limit=782&" + 
                    "offset=672&" + 
                    "q=xO3pCYoQuRBJw5f6")
                .then()
                .statusCode(500)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.UnsupportedOperationException"))
                .body("'message'", containsString("this parameter configuration is not implemented yet .. start date, end date required atm"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_13_optionsOnErrorReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. OPTIONS:/error -> OPTIONS on path '/error' defines a response schema but no response body found.
        given().accept("*/*")
                .options(baseUrlOfSut + "/error")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_14_getOnConfigReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/github.login'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.database.driverClassName'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.datasource.platform'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.datasource.url'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.datasource.username'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.jpa.database'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .get(baseUrlOfSut + "/config")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'cache.path'", containsString("target/cache"))
                .body("'cache.size'", containsString("50"))
                .body("'endpoints.enabled'", containsString("false"))
                .body("'endpoints.health.enabled'", containsString("true"))
                .body("'github.login'", nullValue())
                .body("'organization.list'", containsString("zalando,zalando-stups,zalando-incubator"))
                .body("'schedule'", containsString("0 1 8 * * *"))
                .body("'scoring.project'", containsString("function(project) {var daysSinceLastPush = 0;if (project.lastPushed) {var tokens = project.lastPushed.split(\" \");var day = tokens[2];var month = tokens[1];var year = tokens[5];var lastPushedDate = new Date(day + ' ' + month + ' ' + year);var millisInDay = 86400000;daysSinceLastPush = Math.floor((new Date() - lastPushedDate) / millisInDay);}var maintainersPenalty = 0;if (project.maintainers.length < 2) {maintainersPenalty = 100;}return project.starsCount * 3 + project.forksCount * 2 + project.contributorsCount * 5 - daysSinceLastPush - maintainersPenalty}"))
                .body("'spring.database.driverClassName'", nullValue())
                .body("'spring.datasource.platform'", nullValue())
                .body("'spring.datasource.url'", nullValue())
                .body("'spring.datasource.username'", nullValue())
                .body("'spring.jpa.database'", nullValue())
                .body("'spring.jpa.hibernate.ddl-auto'", containsString("update"));
    }
    
    
    @Test(timeout = 60000)
    public void test_15_getOnProjectsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 400 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=GjY3o5AA31tLxRP&" + 
                    "end_date=vlO2IaMgCCrIwOV")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string vlO2IaMgCCrIwOV."));
    }
    
    
    @Test(timeout = 60000)
    public void test_16_getOnLanguagesWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/languages -> Response status 400 not defined for path '/statistics/languages'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/languages?end_date=Oh54")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string Oh54."));
    }
    
    
    @Test(timeout = 60000)
    public void test_17_getOnContributorsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 400 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=1&" + 
                    "start_date=AHYLmlo")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string AHYLmlo."));
    }
    
    
    @Test(timeout = 60000)
    public void test_18_getOnProjectsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 400 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "start_date=2PMiPc&" + 
                    "end_date=7Z")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string 2PMiPc."));
    }
    
    
    @Test(timeout = 60000)
    public void test_19_getOnContributorsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 400 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=cojGv0gsR&" + 
                    "end_date=Z8Vtta")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string Z8Vtta."));
    }
    
    
    @Test(timeout = 60000)
    public void test_20_getOnStatisticsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics -> Response status 400 not defined for path '/statistics'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics?end_date=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for endDate"));
    }
    
    
    @Test(timeout = 60000)
    public void test_21_getOnLanguagesWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/languages -> Response status 400 not defined for path '/statistics/languages'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=JJxP72EB8lm&" + 
                    "end_date=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string ."));
    }
    
    
    @Test(timeout = 60000)
    public void test_22_getOnStatisticsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics -> Response status 400 not defined for path '/statistics'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=&" + 
                    "start_date=_GLvzswdKffmTyCv")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for stardDate"));
    }
    
    
    @Test(timeout = 60000)
    public void test_23_getOnContributorsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 400 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/statistics/contributors?end_date=9MGe9vA5BZFrj3Qc")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string 9MGe9vA5BZFrj3Qc."));
    }
    
    
    @Test(timeout = 60000)
    public void test_24_getOnProjectsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/projects -> Response status 400 not defined for path '/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=tlCn91tLiPqb2XX5&" + 
                    "offset=170&" + 
                    "start_date=2019-01-14T08%3A60%3A10%2B13%3A20")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"))
                .body("'message'", containsString("Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '2019-01-14T08:60:10+13:20'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [2019-01-14T08:60:10+13:20]"))
                .body("'path'", containsString("/projects"));
    }
    
    
    @Test(timeout = 60000)
    public void test_25_getOnProjectsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/projects -> Response status 400 not defined for path '/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/projects?end_date=1979-03-00T-1%3A35%3A11.303Z")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"))
                .body("'message'", containsString("Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '1979-03-00T-1:35:11.303Z'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [1979-03-00T-1:35:11.303Z]"))
                .body("'path'", containsString("/projects"));
    }
    
    
    @Test(timeout = 60000)
    public void test_26_getOnProjectsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/projects -> Response status 400 not defined for path '/projects'.
        given().accept("application/json")
                .get(baseUrlOfSut + "/projects?" + 
                    "start_date=1998-10-26T24%3A12%3A07.258-06%3A06&" + 
                    "end_date=2027-00-29T09%3A28%3A34%2B22%3A27&" + 
                    "sortBy=HFglsDANbqPk8&" + 
                    "language=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"))
                .body("'message'", containsString("Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '1998-10-26T24:12:07.258-06:06'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [1998-10-26T24:12:07.258-06:06]"))
                .body("'path'", containsString("/projects"));
    }
    
    
    @Test(timeout = 60000)
    public void test_27_getOnInitReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/init -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .get(baseUrlOfSut + "/init")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    @Test(timeout = 60000)
    public void test_28_getOnDeleteReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/delete -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .get(baseUrlOfSut + "/delete")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    @Test(timeout = 60000)
    public void test_29_postOnImportReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/import -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"name\": \"yerlAQH5\", " + 
                    " \"organizationName\": \"\", " + 
                    " \"organizationalCommitsCount\": 645, " + 
                    " \"organizationalProjectsCount\": 660, " + 
                    " \"snapshotDate\": \"2042-13-04T07:35:02-09:23\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 114, " + 
                    " \"key\": { " + 
                    " \"organizationId\": 320, " + 
                    " \"snapshotDate\": \"1948-10-30T11:09:39.011Z\" " + 
                    " }, " + 
                    " \"personalProjectsCount\": 33 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 859, " + 
                    " \"key\": { " + 
                    " \"id\": 130, " + 
                    " \"snapshotDate\": \"1999-10-20T16:48:37Z\" " + 
                    " }, " + 
                    " \"name\": \"HC\", " + 
                    " \"organizationId\": 5719126526580524951, " + 
                    " \"organizationalProjectsCount\": 936702927, " + 
                    " \"personalProjectsCount\": 654 " + 
                    " }, " + 
                    " { " + 
                    " \"key\": { " + 
                    " \"id\": 493, " + 
                    " \"organizationId\": 173, " + 
                    " \"snapshotDate\": \"1935-09-29T01:-1:09.042-13:26\" " + 
                    " }, " + 
                    " \"name\": \"z9t\", " + 
                    " \"organizationName\": \"kA\", " + 
                    " \"organizationalCommitsCount\": 616, " + 
                    " \"organizationalProjectsCount\": 797, " + 
                    " \"snapshotDate\": \"1906-04-21T08:14:50Z\" " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 592, " + 
                    " \"key\": { " + 
                    " \"organizationId\": 89, " + 
                    " \"snapshotDate\": \"2037-00-18T07:50:11.331+15:24\" " + 
                    " }, " + 
                    " \"loginId\": \"63D87pNLVfnFgZ\", " + 
                    " \"organizationalCommitsCount\": 280, " + 
                    " \"organizationalProjectsCount\": 875, " + 
                    " \"personalCommitsCount\": 133, " + 
                    " \"snapshotDate\": \"2065-03-27T00:55:30.515+07:25\" " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [ " + 
                    " { " + 
                    " \"allContributorsCount\": 520, " + 
                    " \"membersCount\": 134, " + 
                    " \"programLanguagesCount\": 63, " + 
                    " \"tagsCount\": 999 " + 
                    " }, " + 
                    " { " + 
                    " \"allContributorsCount\": 746, " + 
                    " \"externalContributorsCount\": 474, " + 
                    " \"key\": {}, " + 
                    " \"membersCount\": 678, " + 
                    " \"programLanguagesCount\": 825, " + 
                    " \"snapshotDate\": \"1998-10-32T22:22:10+03:45\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }
    
    
    @Test(timeout = 60000)
    public void test_30_postOnScoring_projectReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/config/scoring.project -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "")
                .contentType("application/json")
                .post(baseUrlOfSut + "/config/scoring.project")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }


}
