import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-06T22:37:36.046-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 55 tests
 * <br>
*  Covered targets: 391
 * <br>
*  Used time: 0h 13m 21s
 * <br>
*  Needed budget for current results: 96%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.zalando.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONTRIBUTOR","LANGUAGE_LIST","MAINTAINERS","PROJECT","STATISTICS"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_getOnStatisticsContributorsShowsFaults_100_200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 75L)
                .d("COMMITS_COUNT", "686")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "\"ROpJg1BJ\"")
                .d("FORKS_COUNT", "97")
                .d("GIT_HUB_PROJECT_ID", "260")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "\"_EM_771_XYZ_\"")
                .d("ORGANIZATION_NAME", "\"\"")
                .d("PRIMARY_LANGUAGE", "NULL")
                .d("SCORE", "789")
                .d("SNAPSHOT_DATE", "\"2071-04-03 01:08:02\"")
                .d("STARS_COUNT", "NULL")
                .d("URL", "\"_EM_500_XYZ_\"")
                .d("TITLE", "\"0bAhsZn\"")
                .d("IMAGE", "\"z_F\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "807")
            .and().insertInto("STATISTICS", 76L)
                .d("ID", "373")
                .d("SNAPSHOT_DATE", "\"1977-10-09 01:08:28\"")
                .d("ALL_CONTRIBUTORS_COUNT", "692")
                .d("ALL_FORKS_COUNT", "960")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"_qquBGwxCnmMCAn\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "696")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .and().insertInto("CONTRIBUTOR", 77L)
                .d("ID", "863")
                .d("ORGANIZATION_ID", "435")
                .d("SNAPSHOT_DATE", "\"1928-06-18 00:04:53\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "-1676609845")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "686")
                .d("PERSONAL_COMMITS_COUNT", "71")
                .d("PERSONAL_PROJECTS_COUNT", "436")
                .d("URL", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/StatisticsApi_165_statisticsContributorGet GET:/statistics/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 500 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "start_date=2071-08-24T01%3A42%3A55%2B05%3A45&" + 
                    "q=zOhB&" + 
                    "limit=457")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/StatisticsApi_165_statisticsContributorGet
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_1_getOnProjectsShowsFaults_100_200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 75L)
                .d("COMMITS_COUNT", "686")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "\"ROpJg1BJ\"")
                .d("FORKS_COUNT", "97")
                .d("GIT_HUB_PROJECT_ID", "260")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "\"_EM_771_XYZ_\"")
                .d("ORGANIZATION_NAME", "\"\"")
                .d("PRIMARY_LANGUAGE", "NULL")
                .d("SCORE", "789")
                .d("SNAPSHOT_DATE", "\"2071-04-03 01:08:02\"")
                .d("STARS_COUNT", "NULL")
                .d("URL", "\"_EM_500_XYZ_\"")
                .d("TITLE", "\"0bAhsZn\"")
                .d("IMAGE", "\"z_F\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "807")
            .and().insertInto("STATISTICS", 76L)
                .d("ID", "373")
                .d("SNAPSHOT_DATE", "\"1977-10-09 01:08:28\"")
                .d("ALL_CONTRIBUTORS_COUNT", "692")
                .d("ALL_FORKS_COUNT", "960")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"_qquBGwxCnmMCAn\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "696")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .and().insertInto("CONTRIBUTOR", 77L)
                .d("ID", "863")
                .d("ORGANIZATION_ID", "435")
                .d("SNAPSHOT_DATE", "\"1928-06-18 00:04:53\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "-1676609845")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "686")
                .d("PERSONAL_COMMITS_COUNT", "71")
                .d("PERSONAL_PROJECTS_COUNT", "436")
                .d("URL", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/StatisticsApi_132_statisticsProjectGet GET:/statistics/projects
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 500 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("X-Organizations", "Y")
                .get(baseUrlOfSut + "/statistics/projects?end_date=2007-08-06T06%3A39%3A38Z")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/StatisticsApi_132_statisticsProjectGet
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/projects"));
    }
    
    
    @Test(timeout = 60000)
    public void test_2_getOnContributorsWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/ContributorsApi_128_contributorsGet GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=_EM_9_XYZ_&" + 
                    "limit=326")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/ContributorsApi_128_contributorsGet
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.UnsupportedOperationException"))
                .body("'message'", containsString("this parameter configuration is not implemented yet .. start date, end date required atm"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_3_getOnContributorsWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/ContributorsApi_221_validate GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=DgvMSLvMFfbTxITy&" + 
                    "limit=553&" + 
                    "start_date=j6pIzgFSSXDj&" + 
                    "end_date=3vka9XfVl4P5cD5z&" + 
                    "sortBy=_EM_159_XYZ_")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/ContributorsApi_221_validate
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("sortBy must be empty or have a valid value but was _EM_159_XYZ_. Valid values are organizationalCommitsCount,organizationalProjectsCount,personalCommitsCount,personalProjectsCount,organizationName,name"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4_getOnContributorsWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601 GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=9_e48b5k&" + 
                    "offset=898&" + 
                    "start_date=UrX8wvMjTy6zx&" + 
                    "sortBy=organizationalcommitscount&" + 
                    "q=zinHJj")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"UrX8wvMjTy6zx\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_5_getOnContributorsWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601 GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=gakykiC8s2iZ5&" + 
                    "limit=553&" + 
                    "start_date=Wc5jNpkfmB5YqLdn&" + 
                    "end_date=XmwyAJ8l&" + 
                    "sortBy=&" + 
                    "q=CRbWeLlrXrNYN8q4")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"XmwyAJ8l\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_6_getOnContributorsWithQueryParamsShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/ContributorsApi_221_validate GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=3kdFEhqyp&" + 
                    "limit=553&" + 
                    "offset=898&" + 
                    "start_date=1jVu&" + 
                    "end_date=sXQ8Vj&" + 
                    "sortBy=OrD7U8g3")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/ContributorsApi_221_validate
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IllegalArgumentException"))
                .body("'message'", containsString("sortBy must be empty or have a valid value but was OrD7U8g3. Valid values are organizationalCommitsCount,organizationalProjectsCount,personalCommitsCount,personalProjectsCount,organizationName,name"))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_7_getOnContributorsShowsFaults_100_200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 75L)
                .d("COMMITS_COUNT", "686")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "\"ROpJg1BJ\"")
                .d("FORKS_COUNT", "97")
                .d("GIT_HUB_PROJECT_ID", "260")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "\"_EM_771_XYZ_\"")
                .d("ORGANIZATION_NAME", "\"\"")
                .d("PRIMARY_LANGUAGE", "NULL")
                .d("SCORE", "789")
                .d("SNAPSHOT_DATE", "\"2071-04-03 01:08:02\"")
                .d("STARS_COUNT", "NULL")
                .d("URL", "\"_EM_500_XYZ_\"")
                .d("TITLE", "\"0bAhsZn\"")
                .d("IMAGE", "\"z_F\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "807")
            .and().insertInto("STATISTICS", 76L)
                .d("ID", "373")
                .d("SNAPSHOT_DATE", "\"1977-10-09 01:08:28\"")
                .d("ALL_CONTRIBUTORS_COUNT", "692")
                .d("ALL_FORKS_COUNT", "960")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"_qquBGwxCnmMCAn\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "696")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .and().insertInto("CONTRIBUTOR", 77L)
                .d("ID", "863")
                .d("ORGANIZATION_ID", "435")
                .d("SNAPSHOT_DATE", "\"1928-06-18 00:04:53\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "-1676609845")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "686")
                .d("PERSONAL_COMMITS_COUNT", "71")
                .d("PERSONAL_PROJECTS_COUNT", "436")
                .d("URL", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601 GET:/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 500 not defined for path '/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=&" + 
                    "limit=457&" + 
                    "offset=183&" + 
                    "start_date=2071-08-24T01%3A42%3A55%2B05%3A45&" + 
                    "end_date=2007-08-06T06%3A39%3A38Z&" + 
                    "sortBy=")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/config/DateUtil_15_iso8601
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.RuntimeException"))
                .body("'message'", containsString("java.text.ParseException: Unparseable date: \"2071-08-24T01:42:55+05:45\""))
                .body("'path'", containsString("/contributors"));
    }
    
    
    @Test(timeout = 60000)
    public void test_8_getOnFetchShowsFaults_100_200UsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 75L)
                .d("COMMITS_COUNT", "686")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "\"ROpJg1BJ\"")
                .d("FORKS_COUNT", "97")
                .d("GIT_HUB_PROJECT_ID", "260")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "\"_EM_771_XYZ_\"")
                .d("ORGANIZATION_NAME", "\"\"")
                .d("PRIMARY_LANGUAGE", "NULL")
                .d("SCORE", "789")
                .d("SNAPSHOT_DATE", "\"2071-04-03 01:08:02\"")
                .d("STARS_COUNT", "NULL")
                .d("URL", "\"_EM_500_XYZ_\"")
                .d("TITLE", "\"0bAhsZn\"")
                .d("IMAGE", "\"z_F\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "807")
            .and().insertInto("STATISTICS", 76L)
                .d("ID", "373")
                .d("SNAPSHOT_DATE", "\"1977-10-09 01:08:28\"")
                .d("ALL_CONTRIBUTORS_COUNT", "692")
                .d("ALL_FORKS_COUNT", "960")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"_qquBGwxCnmMCAn\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "696")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .and().insertInto("CONTRIBUTOR", 77L)
                .d("ID", "863")
                .d("ORGANIZATION_ID", "435")
                .d("SNAPSHOT_DATE", "\"1928-06-18 00:04:53\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "-1676609845")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "686")
                .d("PERSONAL_COMMITS_COUNT", "71")
                .d("PERSONAL_PROJECTS_COUNT", "436")
                .d("URL", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/StatisticsApi_132_statisticsProjectGet GET:/statistics/projects
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 500 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("X-Organizations", "Y")
                .get(baseUrlOfSut + "/statistics/projects?end_date=2007-08-06T06%3A39%3A38Z")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/StatisticsApi_132_statisticsProjectGet
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/projects"));
        
        // Fault100. HTTP Status 500. org/zalando/catwatch/backend/web/StatisticsApi_165_statisticsContributorGet GET:/statistics/contributors
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 500 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "start_date=2071-08-24T01%3A42%3A55%2B05%3A45&" + 
                    "q=zOhB&" + 
                    "limit=457")
                .then()
                .statusCode(500)// org/zalando/catwatch/backend/web/StatisticsApi_165_statisticsContributorGet
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'exception'", containsString("java.lang.IndexOutOfBoundsException"))
                .body("'message'", containsString("toIndex = 10"))
                .body("'path'", containsString("/statistics/contributors"));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=&" + 
                    "limit=457&" + 
                    "offset=183&" + 
                    "end_date=2007-08-06T06%3A39%3A38Z&" + 
                    "q=zOhB&" + 
                    "language=NZqiRn3VWLUOi")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "_qquBGwxCnmMCAn")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "start_date=2071-08-24T01%3A42%3A55%2B05%3A45&" + 
                    "end_date=2007-08-06T06%3A39%3A38Z&" + 
                    "q=zOhB&" + 
                    "sortBy=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/config/scoring.project -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"z\" ")
                .post(baseUrlOfSut + "/config/scoring.project")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/contributors/0/key/snapshotDate'] String "1928-06-18T00:04:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/contributors/0/name'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/contributors/0/organizationName'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/contributors/0/snapshotDate'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/contributors/0/url'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/contributorsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/lastPushed'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/primaryLanguage'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/snapshotDate'] String "2071-04-03T01:08:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/starsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/allSizeCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/allStarsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/externalContributorsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/key/snapshotDate'] String "1977-10-09T01:08:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/membersCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/privateProjectCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/publicProjectCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/snapshotDate'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/tagsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/teamsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'contributors'.size()", equalTo(1))
                .body("'contributors'[0].'key'.'organizationId'", numberMatches(435.0))
                .body("'contributors'[0].'key'.'snapshotDate'", containsString("1928-06-18T00:04:53"))
                .body("'contributors'[0].'loginId'", containsString(""))
                .body("'contributors'[0].'name'", nullValue())
                .body("'contributors'[0].'url'", nullValue())
                .body("'contributors'[0].'organizationalCommitsCount'", numberMatches(-1.676609845E9))
                .body("'contributors'[0].'personalCommitsCount'", numberMatches(71.0))
                .body("'contributors'[0].'personalProjectsCount'", numberMatches(436.0))
                .body("'contributors'[0].'organizationalProjectsCount'", numberMatches(686.0))
                .body("'contributors'[0].'organizationName'", nullValue())
                .body("'contributors'[0].'organizationId'", numberMatches(435.0))
                .body("'contributors'[0].'snapshotDate'", numberMatches(-1.310846107E12))
                .body("'projects'.size()", equalTo(1))
                .body("'projects'[0].'languageList'.size()", equalTo(0))
                .body("'projects'[0].'gitHubProjectId'", numberMatches(260.0))
                .body("'projects'[0].'snapshotDate'", containsString("2071-04-03T01:08:02"))
                .body("'projects'[0].'name'", containsString("_EM_771_XYZ_"))
                .body("'projects'[0].'title'", containsString("0bAhsZn"))
                .body("'projects'[0].'image'", containsString("z_F"))
                .body("'projects'[0].'organizationName'", containsString(""))
                .body("'projects'[0].'url'", containsString("_EM_500_XYZ_"))
                .body("'projects'[0].'description'", containsString("ROpJg1BJ"))
                .body("'projects'[0].'starsCount'", nullValue())
                .body("'projects'[0].'commitsCount'", numberMatches(686.0))
                .body("'projects'[0].'forksCount'", numberMatches(97.0))
                .body("'projects'[0].'contributorsCount'", nullValue())
                .body("'projects'[0].'externalContributorsCount'", numberMatches(807.0))
                .body("'projects'[0].'score'", numberMatches(789.0))
                .body("'projects'[0].'lastPushed'", nullValue())
                .body("'projects'[0].'primaryLanguage'", nullValue())
                .body("'projects'[0].'maintainers'.size()", equalTo(0))
                .body("'statistics'.size()", equalTo(1))
                .body("'statistics'[0].'key'.'snapshotDate'", containsString("1977-10-09T01:08:28"))
                .body("'statistics'[0].'privateProjectCount'", nullValue())
                .body("'statistics'[0].'publicProjectCount'", nullValue())
                .body("'statistics'[0].'membersCount'", nullValue())
                .body("'statistics'[0].'teamsCount'", nullValue())
                .body("'statistics'[0].'allContributorsCount'", numberMatches(692.0))
                .body("'statistics'[0].'externalContributorsCount'", nullValue())
                .body("'statistics'[0].'allStarsCount'", nullValue())
                .body("'statistics'[0].'allForksCount'", numberMatches(960.0))
                .body("'statistics'[0].'allSizeCount'", nullValue())
                .body("'statistics'[0].'programLanguagesCount'", numberMatches(696.0))
                .body("'statistics'[0].'tagsCount'", nullValue())
                .body("'statistics'[0].'organizationName'", containsString("_qquBGwxCnmMCAn"))
                .body("'statistics'[0].'snapshotDate'", numberMatches(2.45218108E11));
        
        try{
            given().accept("*/*")
                    .header("x-EMextraHeader123", "")
                    .get(baseUrlOfSut + "/fetch");
        } catch(Exception e){
        }
    }
    
    
    @Test(timeout = 60000)
    public void test_9_getOnConfigWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/github.login'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.database.driverClassName'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.datasource.platform'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> [Path '/spring.jpa.database'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_8_XYZ_")
                .get(baseUrlOfSut + "/config?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'cache.path'", containsString("target/cache"))
                .body("'cache.size'", containsString("50"))
                .body("'endpoints.enabled'", containsString("false"))
                .body("'endpoints.health.enabled'", containsString("true"))
                .body("'github.login'", nullValue())
                .body("'organization.list'", containsString("zalando,zalando-stups,zalando-incubator"))
                .body("'schedule'", containsString("0 1 8 * * *"))
                .body("'scoring.project'", containsString("function(project) {var daysSinceLastPush = 0;if (project.lastPushed) {var tokens = project.lastPushed.split(\" \");var day = tokens[2];var month = tokens[1];var year = tokens[5];var lastPushedDate = new Date(day + ' ' + month + ' ' + year);var millisInDay = 86400000;daysSinceLastPush = Math.floor((new Date() - lastPushedDate) / millisInDay);}var maintainersPenalty = 0;if (project.maintainers.length < 2) {maintainersPenalty = 100;}return project.starsCount * 3 + project.forksCount * 2 + project.contributorsCount * 5 - daysSinceLastPush - maintainersPenalty}"))
                .body("'spring.database.driverClassName'", nullValue())
                .body("'spring.datasource.platform'", nullValue())
                .body("'spring.datasource.url'", containsString("jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;"))
                .body("'spring.datasource.username'", containsString("sa"))
                .body("'spring.jpa.database'", nullValue())
                .body("'spring.jpa.hibernate.ddl-auto'", containsString("update"));
    }
    
    
    @Test(timeout = 60000)
    public void test_10_getOnExportWithQueryParamsReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 38L)
                .d("ID", "716")
                .d("ORGANIZATION_ID", "890")
                .d("SNAPSHOT_DATE", "\"2025-01-21 10:02:46\"")
                .d("NAME", "\"I\"")
                .d("ORGANIZATION_NAME", "\"_EM_499_XYZ_\"")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "NULL")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "NULL")
                .d("PERSONAL_COMMITS_COUNT", "NULL")
                .d("PERSONAL_PROJECTS_COUNT", "571")
                .d("URL", "NULL")
            .and().insertInto("STATISTICS", 39L)
                .d("ID", "-5007619243627351040")
                .d("SNAPSHOT_DATE", "\"2070-01-13 13:13:40\"")
                .d("ALL_CONTRIBUTORS_COUNT", "545")
                .d("ALL_FORKS_COUNT", "960")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "1370195257")
                .d("ORGANIZATION_NAME", "\"890\"")
                .d("PRIVATE_PROJECT_COUNT", "997")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .and().insertInto("PROJECT", 40L)
                .d("COMMITS_COUNT", "686")
                .d("CONTRIBUTORS_COUNT", "40")
                .d("DESCRIPTION", "\"ROpJg1BJ\"")
                .d("FORKS_COUNT", "NULL")
                .d("GIT_HUB_PROJECT_ID", "761")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "\"890\"")
                .d("PRIMARY_LANGUAGE", "\"bNdBIGz1uAkI8GUn\"")
                .d("SCORE", "507")
                .d("SNAPSHOT_DATE", "NULL")
                .d("STARS_COUNT", "653")
                .d("URL", "\"_EM_500_XYZ_\"")
                .d("TITLE", "NULL")
                .d("IMAGE", "\"vCvWQ5BSJ\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "841")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/contributors/0/key/snapshotDate'] String "2025-01-21T10:02:46" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/contributors/0/organizationalCommitsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/contributors/0/organizationalProjectsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/contributors/0/personalCommitsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/contributors/0/snapshotDate'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/contributors/0/url'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/forksCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/lastPushed'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/name'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/snapshotDate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/title'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/allSizeCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/allStarsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/externalContributorsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/key/snapshotDate'] String "2070-01-13T13:13:40" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/programLanguagesCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/publicProjectCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/snapshotDate'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/tagsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/teamsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'contributors'.size()", equalTo(1))
                .body("'contributors'[0].'key'.'organizationId'", numberMatches(890.0))
                .body("'contributors'[0].'key'.'snapshotDate'", containsString("2025-01-21T10:02:46"))
                .body("'contributors'[0].'loginId'", containsString(""))
                .body("'contributors'[0].'name'", containsString("I"))
                .body("'contributors'[0].'url'", nullValue())
                .body("'contributors'[0].'organizationalCommitsCount'", nullValue())
                .body("'contributors'[0].'personalCommitsCount'", nullValue())
                .body("'contributors'[0].'personalProjectsCount'", numberMatches(571.0))
                .body("'contributors'[0].'organizationalProjectsCount'", nullValue())
                .body("'contributors'[0].'organizationName'", containsString("_EM_499_XYZ_"))
                .body("'contributors'[0].'organizationId'", numberMatches(890.0))
                .body("'contributors'[0].'snapshotDate'", numberMatches(1.737464566E12))
                .body("'projects'.size()", equalTo(1))
                .body("'projects'[0].'languageList'.size()", equalTo(0))
                .body("'projects'[0].'gitHubProjectId'", numberMatches(761.0))
                .body("'projects'[0].'snapshotDate'", nullValue())
                .body("'projects'[0].'name'", nullValue())
                .body("'projects'[0].'title'", nullValue())
                .body("'projects'[0].'image'", containsString("vCvWQ5BSJ"))
                .body("'projects'[0].'organizationName'", containsString("890"))
                .body("'projects'[0].'url'", containsString("_EM_500_XYZ_"))
                .body("'projects'[0].'description'", containsString("ROpJg1BJ"))
                .body("'projects'[0].'starsCount'", numberMatches(653.0))
                .body("'projects'[0].'commitsCount'", numberMatches(686.0))
                .body("'projects'[0].'forksCount'", nullValue())
                .body("'projects'[0].'contributorsCount'", numberMatches(40.0))
                .body("'projects'[0].'externalContributorsCount'", numberMatches(841.0))
                .body("'projects'[0].'score'", numberMatches(507.0))
                .body("'projects'[0].'lastPushed'", nullValue())
                .body("'projects'[0].'primaryLanguage'", containsString("bNdBIGz1uAkI8GUn"))
                .body("'projects'[0].'maintainers'.size()", equalTo(0))
                .body("'statistics'.size()", equalTo(1))
                .body("'statistics'[0].'key'.'snapshotDate'", containsString("2070-01-13T13:13:40"))
                .body("'statistics'[0].'privateProjectCount'", numberMatches(997.0))
                .body("'statistics'[0].'publicProjectCount'", nullValue())
                .body("'statistics'[0].'membersCount'", numberMatches(1.370195257E9))
                .body("'statistics'[0].'teamsCount'", nullValue())
                .body("'statistics'[0].'allContributorsCount'", numberMatches(545.0))
                .body("'statistics'[0].'externalContributorsCount'", nullValue())
                .body("'statistics'[0].'allStarsCount'", nullValue())
                .body("'statistics'[0].'allForksCount'", numberMatches(960.0))
                .body("'statistics'[0].'allSizeCount'", nullValue())
                .body("'statistics'[0].'programLanguagesCount'", nullValue())
                .body("'statistics'[0].'tagsCount'", nullValue())
                .body("'statistics'[0].'organizationName'", containsString("890"))
                .body("'statistics'[0].'snapshotDate'", numberMatches(3.15685522E12));
    }
    
    
    @Test(timeout = 60000)
    public void test_11_getOnExportWithQueryParamsReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 75L)
                .d("COMMITS_COUNT", "686")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "\"ROpJg1BJ\"")
                .d("FORKS_COUNT", "97")
                .d("GIT_HUB_PROJECT_ID", "260")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "\"_EM_771_XYZ_\"")
                .d("ORGANIZATION_NAME", "\"\"")
                .d("PRIMARY_LANGUAGE", "NULL")
                .d("SCORE", "789")
                .d("SNAPSHOT_DATE", "\"2071-04-03 01:08:02\"")
                .d("STARS_COUNT", "NULL")
                .d("URL", "\"_EM_500_XYZ_\"")
                .d("TITLE", "\"0bAhsZn\"")
                .d("IMAGE", "\"z_F\"")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "807")
            .and().insertInto("STATISTICS", 76L)
                .d("ID", "373")
                .d("SNAPSHOT_DATE", "\"1977-10-09 01:08:28\"")
                .d("ALL_CONTRIBUTORS_COUNT", "692")
                .d("ALL_FORKS_COUNT", "960")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"_qquBGwxCnmMCAn\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "696")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .and().insertInto("CONTRIBUTOR", 77L)
                .d("ID", "863")
                .d("ORGANIZATION_ID", "435")
                .d("SNAPSHOT_DATE", "\"1928-06-18 00:04:53\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "-1676609845")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "686")
                .d("PERSONAL_COMMITS_COUNT", "71")
                .d("PERSONAL_PROJECTS_COUNT", "436")
                .d("URL", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/contributors/0/key/snapshotDate'] String "1928-06-18T00:04:53" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/contributors/0/name'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/contributors/0/organizationName'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/contributors/0/snapshotDate'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/contributors/0/url'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/contributorsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/lastPushed'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/primaryLanguage'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/snapshotDate'] String "2071-04-03T01:08:02" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/starsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/allSizeCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/allStarsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/externalContributorsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/key/snapshotDate'] String "1977-10-09T01:08:28" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/membersCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/privateProjectCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/publicProjectCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/snapshotDate'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/tagsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/teamsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'contributors'.size()", equalTo(1))
                .body("'contributors'[0].'key'.'organizationId'", numberMatches(435.0))
                .body("'contributors'[0].'key'.'snapshotDate'", containsString("1928-06-18T00:04:53"))
                .body("'contributors'[0].'loginId'", containsString(""))
                .body("'contributors'[0].'name'", nullValue())
                .body("'contributors'[0].'url'", nullValue())
                .body("'contributors'[0].'organizationalCommitsCount'", numberMatches(-1.676609845E9))
                .body("'contributors'[0].'personalCommitsCount'", numberMatches(71.0))
                .body("'contributors'[0].'personalProjectsCount'", numberMatches(436.0))
                .body("'contributors'[0].'organizationalProjectsCount'", numberMatches(686.0))
                .body("'contributors'[0].'organizationName'", nullValue())
                .body("'contributors'[0].'organizationId'", numberMatches(435.0))
                .body("'contributors'[0].'snapshotDate'", numberMatches(-1.310846107E12))
                .body("'projects'.size()", equalTo(1))
                .body("'projects'[0].'languageList'.size()", equalTo(0))
                .body("'projects'[0].'gitHubProjectId'", numberMatches(260.0))
                .body("'projects'[0].'snapshotDate'", containsString("2071-04-03T01:08:02"))
                .body("'projects'[0].'name'", containsString("_EM_771_XYZ_"))
                .body("'projects'[0].'title'", containsString("0bAhsZn"))
                .body("'projects'[0].'image'", containsString("z_F"))
                .body("'projects'[0].'organizationName'", containsString(""))
                .body("'projects'[0].'url'", containsString("_EM_500_XYZ_"))
                .body("'projects'[0].'description'", containsString("ROpJg1BJ"))
                .body("'projects'[0].'starsCount'", nullValue())
                .body("'projects'[0].'commitsCount'", numberMatches(686.0))
                .body("'projects'[0].'forksCount'", numberMatches(97.0))
                .body("'projects'[0].'contributorsCount'", nullValue())
                .body("'projects'[0].'externalContributorsCount'", numberMatches(807.0))
                .body("'projects'[0].'score'", numberMatches(789.0))
                .body("'projects'[0].'lastPushed'", nullValue())
                .body("'projects'[0].'primaryLanguage'", nullValue())
                .body("'projects'[0].'maintainers'.size()", equalTo(0))
                .body("'statistics'.size()", equalTo(1))
                .body("'statistics'[0].'key'.'snapshotDate'", containsString("1977-10-09T01:08:28"))
                .body("'statistics'[0].'privateProjectCount'", nullValue())
                .body("'statistics'[0].'publicProjectCount'", nullValue())
                .body("'statistics'[0].'membersCount'", nullValue())
                .body("'statistics'[0].'teamsCount'", nullValue())
                .body("'statistics'[0].'allContributorsCount'", numberMatches(692.0))
                .body("'statistics'[0].'externalContributorsCount'", nullValue())
                .body("'statistics'[0].'allStarsCount'", nullValue())
                .body("'statistics'[0].'allForksCount'", numberMatches(960.0))
                .body("'statistics'[0].'allSizeCount'", nullValue())
                .body("'statistics'[0].'programLanguagesCount'", numberMatches(696.0))
                .body("'statistics'[0].'tagsCount'", nullValue())
                .body("'statistics'[0].'organizationName'", containsString("_qquBGwxCnmMCAn"))
                .body("'statistics'[0].'snapshotDate'", numberMatches(2.45218108E11));
    }
    
    
    @Test(timeout = 60000)
    public void test_12_getOnExportWithQueryParamsReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 61L)
                .d("ID", "583")
                .d("SNAPSHOT_DATE", "\"2010-01-19 11:12:52\"")
                .d("ALL_CONTRIBUTORS_COUNT", "NULL")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "656")
                .d("ORGANIZATION_NAME", "\"22xf4z7rR8\"")
                .d("PRIVATE_PROJECT_COUNT", "997")
                .d("PROGRAM_LANGUAGES_COUNT", "696")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "711")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "135")
            .and().insertInto("PROJECT", 63L)
                .d("GIT_HUB_PROJECT_ID", "575")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/commitsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/contributorsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/description'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/externalContributorsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/forksCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/image'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/lastPushed'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/name'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/organizationName'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/primaryLanguage'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/score'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/snapshotDate'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/starsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/title'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/projects/0/url'] Instance type (null) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/allContributorsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/allForksCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/allSizeCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/allStarsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/key/snapshotDate'] String "2010-01-19T11:12:52" is invalid against requested date format(s) [yyyy-MM-dd'T'HH:mm:ssZ, yyyy-MM-dd'T'HH:mm:ss.[0-9]{1,12}Z]
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/publicProjectCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/snapshotDate'] Instance type (integer) does not match any allowed primitive type (allowed: ["string"])
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> [Path '/statistics/0/teamsCount'] Instance type (null) does not match any allowed primitive type (allowed: ["integer"])
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'contributors'.size()", equalTo(0))
                .body("'projects'.size()", equalTo(1))
                .body("'projects'[0].'languageList'.size()", equalTo(0))
                .body("'projects'[0].'gitHubProjectId'", numberMatches(575.0))
                .body("'projects'[0].'snapshotDate'", nullValue())
                .body("'projects'[0].'name'", nullValue())
                .body("'projects'[0].'title'", nullValue())
                .body("'projects'[0].'image'", nullValue())
                .body("'projects'[0].'organizationName'", nullValue())
                .body("'projects'[0].'url'", nullValue())
                .body("'projects'[0].'description'", nullValue())
                .body("'projects'[0].'starsCount'", nullValue())
                .body("'projects'[0].'commitsCount'", nullValue())
                .body("'projects'[0].'forksCount'", nullValue())
                .body("'projects'[0].'contributorsCount'", nullValue())
                .body("'projects'[0].'externalContributorsCount'", nullValue())
                .body("'projects'[0].'score'", nullValue())
                .body("'projects'[0].'lastPushed'", nullValue())
                .body("'projects'[0].'primaryLanguage'", nullValue())
                .body("'projects'[0].'maintainers'.size()", equalTo(0))
                .body("'statistics'.size()", equalTo(1))
                .body("'statistics'[0].'key'.'snapshotDate'", containsString("2010-01-19T11:12:52"))
                .body("'statistics'[0].'privateProjectCount'", numberMatches(997.0))
                .body("'statistics'[0].'publicProjectCount'", nullValue())
                .body("'statistics'[0].'membersCount'", numberMatches(656.0))
                .body("'statistics'[0].'teamsCount'", nullValue())
                .body("'statistics'[0].'allContributorsCount'", nullValue())
                .body("'statistics'[0].'externalContributorsCount'", numberMatches(135.0))
                .body("'statistics'[0].'allStarsCount'", nullValue())
                .body("'statistics'[0].'allForksCount'", nullValue())
                .body("'statistics'[0].'allSizeCount'", nullValue())
                .body("'statistics'[0].'programLanguagesCount'", numberMatches(696.0))
                .body("'statistics'[0].'tagsCount'", numberMatches(711.0))
                .body("'statistics'[0].'organizationName'", containsString("22xf4z7rR8"))
                .body("'statistics'[0].'snapshotDate'", numberMatches(1.263910372E12));
    }
    
    
    @Test(timeout = 60000)
    public void test_13_getOnFetchWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/fetch -> Response status 400 not defined for path '/fetch'.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/fetch?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
    }
    
    
    @Test(timeout = 60000)
    public void test_14_getOnDeleteWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/delete -> Response status 400 not defined for path '/delete'.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/delete?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
    }
    
    
    @Test(timeout = 60000)
    public void test_15_getOnConfigWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> Response status 400 not defined for path '/config'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/config?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
    }
    
    
    @Test(timeout = 60000)
    public void test_16_postOnImportWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/import -> Response status 400 not defined for path '/import'.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"key\": { " + 
                    " \"snapshotDate\": \"1966-13-19T00:37:12.142Z\" " + 
                    " }, " + 
                    " \"name\": \"_EM_202_XYZ_\", " + 
                    " \"organizationId\": -520471389, " + 
                    " \"organizationalCommitsCount\": 928, " + 
                    " \"organizationalProjectsCount\": 618, " + 
                    " \"personalProjectsCount\": 632 " + 
                    " }, " + 
                    " { " + 
                    " \"id\": 337, " + 
                    " \"key\": { " + 
                    " \"id\": 899, " + 
                    " \"organizationId\": 38, " + 
                    " \"snapshotDate\": \"1930-04-00T14:57:48.261+07:55\" " + 
                    " }, " + 
                    " \"name\": \"x_6VY\", " + 
                    " \"organizationId\": 6192110753639617443, " + 
                    " \"organizationName\": \"9eTBV_wd0DWP4\", " + 
                    " \"organizationalCommitsCount\": 301, " + 
                    " \"organizationalProjectsCount\": 453, " + 
                    " \"personalCommitsCount\": 672, " + 
                    " \"personalProjectsCount\": 1098916934, " + 
                    " \"snapshotDate\": \"2073-04-26T03:05:15.167Z\" " + 
                    " }, " + 
                    " { " + 
                    " \"organizationId\": 500, " + 
                    " \"organizationalCommitsCount\": 897, " + 
                    " \"organizationalProjectsCount\": 132, " + 
                    " \"personalProjectsCount\": 139, " + 
                    " \"snapshotDate\": \"2042-08-05T01:52:07Z\" " + 
                    " } " + 
                    " ], " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"image\": \"_EM_205_XYZ_\", " + 
                    " \"languageList\": [ " + 
                    " \"_EM_206_XYZ_\" " + 
                    " ], " + 
                    " \"lastPushed\": \"CmOC\", " + 
                    " \"name\": \"6opZdFwvcMWA1Wf\", " + 
                    " \"primaryLanguage\": \"_EM_209_XYZ_\", " + 
                    " \"snapshotDate\": \"2046-04-15T18:40:49+07:17\", " + 
                    " \"url\": \"_EM_211_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"gitHubProjectId\": 865, " + 
                    " \"name\": \"A7Pr\", " + 
                    " \"primaryLanguage\": \"_EM_217_XYZ_\", " + 
                    " \"score\": 845, " + 
                    " \"starsCount\": 229, " + 
                    " \"title\": \"_EM_218_XYZ_\", " + 
                    " \"url\": \"fQCRiyZtJ7lm9nU\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
    }
    
    
    @Test(timeout = 60000)
    public void test_17_postOnScoring_projectWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/config/scoring.project -> Response status 400 not defined for path '/config/scoring.project'.
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "K7")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"K7\" ")
                .post(baseUrlOfSut + "/config/scoring.project?access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
    }
    
    
    @Test(timeout = 60000)
    public void test_18_getOnLanguagesReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 35L)
                .d("ID", "629")
                .d("SNAPSHOT_DATE", "\"2014-06-10 23:15:28\"")
                .d("ALL_CONTRIBUTORS_COUNT", "535")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "352")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"ASeddvikABXO\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "520")
                .d("PUBLIC_PROJECT_COUNT", "390")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "-725208566")
            .and().insertInto("CONTRIBUTOR", 36L)
                .d("ID", "386")
                .d("ORGANIZATION_ID", "289")
                .d("SNAPSHOT_DATE", "\"2000-04-06 02:33:08\"")
                .d("NAME", "\"_EM_437_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "469")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "296")
                .d("PERSONAL_COMMITS_COUNT", "808")
                .d("PERSONAL_PROJECTS_COUNT", "NULL")
                .d("URL", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/languages -> Response status 400 not defined for path '/languages'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=ASeddvikABXO&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
    }
    
    
    @Test(timeout = 60000)
    public void test_19_getOnLanguagesWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/languages -> Response status 400 not defined for path '/statistics/languages'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=Uiz9sq7hjjAk1f&" + 
                    "start_date=5PzmoBbnvrAmGA&" + 
                    "end_date=tdId")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string 5PzmoBbnvrAmGA."));
    }
    
    
    @Test(timeout = 60000)
    public void test_20_getOnStatisticsContributorsReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTRIBUTOR", 43L)
                .d("ID", "822")
                .d("ORGANIZATION_ID", "51")
                .d("SNAPSHOT_DATE", "\"2087-10-01 12:38:42\"")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "\"890\"")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "872")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "134")
                .d("PERSONAL_COMMITS_COUNT", "807")
                .d("PERSONAL_PROJECTS_COUNT", "NULL")
                .d("URL", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 400 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=51&" + 
                    "start_date=&" + 
                    "offset=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string ."));
    }
    
    
    @Test(timeout = 60000)
    public void test_21_getOnStatisticsLanguagesReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 35L)
                .d("ID", "629")
                .d("SNAPSHOT_DATE", "\"2014-06-10 23:15:28\"")
                .d("ALL_CONTRIBUTORS_COUNT", "535")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "352")
                .d("MEMBERS_COUNT", "NULL")
                .d("ORGANIZATION_NAME", "\"ASeddvikABXO\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "520")
                .d("PUBLIC_PROJECT_COUNT", "390")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "-725208566")
            .and().insertInto("CONTRIBUTOR", 36L)
                .d("ID", "386")
                .d("ORGANIZATION_ID", "289")
                .d("SNAPSHOT_DATE", "\"2000-04-06 02:33:08\"")
                .d("NAME", "\"_EM_437_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "469")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "296")
                .d("PERSONAL_COMMITS_COUNT", "808")
                .d("PERSONAL_PROJECTS_COUNT", "NULL")
                .d("URL", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/languages -> Response status 400 not defined for path '/statistics/languages'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=ASeddvikABXO&" + 
                    "end_date=4D58&" + 
                    "limit=DVMBsoA9TJQztqq")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string 4D58."));
    }
    
    
    @Test(timeout = 60000)
    public void test_22_getOnStatisticsWithQueryParamsReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 49L)
                .d("ID", "811")
                .d("SNAPSHOT_DATE", "\"1942-03-04 20:34:49\"")
                .d("ALL_CONTRIBUTORS_COUNT", "NULL")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "409")
                .d("ALL_STARS_COUNT", "538")
                .d("MEMBERS_COUNT", "1370195257")
                .d("ORGANIZATION_NAME", "\"YtemrvKJ96Mp5\"")
                .d("PRIVATE_PROJECT_COUNT", "982")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "740")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "-1459272416")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics -> Response status 400 not defined for path '/statistics'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "end_date=aOwqFFLs&" + 
                    "sortBy=ue7X")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Invalid date format for endDate"));
    }
    
    
    @Test(timeout = 60000)
    public void test_23_getOnContributorsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> Response status 400 not defined for path '/statistics/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("X-Organizations", "bH1h46vis6cSc")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=gakykiC8s2iZ5&" + 
                    "end_date=XmwyAJ8l&" + 
                    "access_token=&" + 
                    "q=CRbWeLlrXrNYN8q4&" + 
                    "offset=6q_apnW4Fb3&" + 
                    "limit=MfFKqP87NnB2&" + 
                    "sortBy=_EM_813_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
    }
    
    
    @Test(timeout = 60000)
    public void test_24_getOnProjectsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> Response status 400 not defined for path '/statistics/projects'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "start_date=pLd1hP69O_cKQ_D&" + 
                    "end_date=&" + 
                    "q=_Eyc3O_g7Ef&" + 
                    "limit=piJgKh6DPV3fKI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body(containsString("Couldn't parse date string pLd1hP69O_cKQ_D."));
    }
    
    
    @Test(timeout = 60000)
    public void test_25_getOnContributorsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> Response status 400 not defined for path '/contributors'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=DgvMSLvMFfbTxITy&" + 
                    "limit=553&" + 
                    "start_date=j6pIzgFSSXDj&" + 
                    "end_date=3vka9XfVl4P5cD5z&" + 
                    "sortBy=_EM_159_XYZ_&" + 
                    "q=mLf&" + 
                    "access_token=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("invalid_request"))
                .body("'error_description'", containsString("Access Token not valid"));
    }
    
    
    @Test(timeout = 60000)
    public void test_26_getOnProjectsReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 23L)
                .d("COMMITS_COUNT", "489")
                .d("CONTRIBUTORS_COUNT", "745")
                .d("DESCRIPTION", "NULL")
                .d("FORKS_COUNT", "NULL")
                .d("GIT_HUB_PROJECT_ID", "NULL")
                .d("LAST_PUSHED", "NULL")
                .d("NAME", "NULL")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIMARY_LANGUAGE", "\"CA\"")
                .d("SCORE", "79")
                .d("SNAPSHOT_DATE", "\"1942-10-09 03:56:47\"")
                .d("STARS_COUNT", "649")
                .d("URL", "\"bqB9QrwQfTkuKfsE\"")
                .d("TITLE", "\"_EM_351_XYZ_\"")
                .d("IMAGE", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "854")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/projects -> Response status 400 not defined for path '/projects'.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "organizations=xV&" + 
                    "offset=741&" + 
                    "start_date=2037-08-29T22%3A32%3A54.596Z&" + 
                    "end_date=1946-00-27T14%3A21%3A30-19%3A46")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'exception'", containsString("org.springframework.web.method.annotation.MethodArgumentTypeMismatchException"))
                .body("'message'", containsString("Failed to convert value of type 'java.lang.String' to required type 'java.util.Date'; nested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@io.swagger.annotations.ApiParam @org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.util.Date] for value '1946-00-27T14:21:30-19:46'; nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [1946-00-27T14:21:30-19:46]"))
                .body("'path'", containsString("/projects"));
    }
    
    
    @Test(timeout = 60000)
    public void test_27_getOnDeleteWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/delete -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/delete")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    @Test(timeout = 60000)
    public void test_28_getOnInitWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/init -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init?" + 
                    "q=pt&" + 
                    "limit=_EM_585_XYZ_&" + 
                    "start_date=wcfP5LRYDo")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    @Test(timeout = 60000)
    public void test_29_getOnInitWithQueryParamsReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 49L)
                .d("ID", "811")
                .d("SNAPSHOT_DATE", "\"1942-03-04 20:34:49\"")
                .d("ALL_CONTRIBUTORS_COUNT", "NULL")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "409")
                .d("ALL_STARS_COUNT", "538")
                .d("MEMBERS_COUNT", "1370195257")
                .d("ORGANIZATION_NAME", "\"YtemrvKJ96Mp5\"")
                .d("PRIVATE_PROJECT_COUNT", "982")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "740")
                .d("TEAMS_COUNT", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "-1459272416")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/init -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init?" + 
                    "end_date=aOwqFFLs&" + 
                    "offset=psoWb1uvfS&" + 
                    "organizations=YtemrvKJ96Mp5&" + 
                    "language=_EM_556_XYZ_&" + 
                    "start_date=mB2avlSxVdC6")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("unauthorized"))
                .body("'error_description'", containsString("Full authentication is required to access this resource"));
    }
    
    
    @Test(timeout = 60000)
    public void test_30_getOnDeleteWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/delete -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/delete?access_token=u_p530tSE2KFqo")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_31_getOnFetchWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/fetch -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/fetch?access_token=5xUBTEUkbZOS")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_32_getOnExportReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/export -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/export?" + 
                    "EMextraParam123=_EM_12_XYZ_&" + 
                    "access_token=_EM_121_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_33_getOnConfigWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/config -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "H7CyfuiJu5K8k6n")
                .get(baseUrlOfSut + "/config?" + 
                    "EMextraParam123=_EM_232_XYZ_&" + 
                    "access_token=BZ")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_34_postOnScoring_projectWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/config/scoring.project -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "4su0X5neDZq3")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .post(baseUrlOfSut + "/config/scoring.project?access_token=di4st7RiWzM")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_35_postOnImportWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/import -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"contributors\": [ " + 
                    " { " + 
                    " \"id\": 276, " + 
                    " \"key\": { " + 
                    " \"id\": -1869422334320053351 " + 
                    " }, " + 
                    " \"loginId\": \"_EM_21_XYZ_\", " + 
                    " \"organizationId\": 190, " + 
                    " \"organizationName\": \"_EM_22_XYZ_\", " + 
                    " \"organizationalProjectsCount\": 620, " + 
                    " \"personalCommitsCount\": 701, " + 
                    " \"url\": \"gOwQAOAvPN\" " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"_EM_24_XYZ_\", " + 
                    " \"organizationId\": 886, " + 
                    " \"organizationalCommitsCount\": 329, " + 
                    " \"personalCommitsCount\": 101, " + 
                    " \"personalProjectsCount\": 574 " + 
                    " } " + 
                    " ], " + 
                    " \"statistics\": [] " + 
                    " } ")
                .post(baseUrlOfSut + "/import")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }
    
    
    @Test(timeout = 60000)
    public void test_36_postOnImportWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/import -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"projects\": [ " + 
                    " { " + 
                    " \"commitsCount\": 937, " + 
                    " \"gitHubProjectId\": 267, " + 
                    " \"image\": \"vCvWQ5BSJ\", " + 
                    " \"lastPushed\": \"_EM_683_XYZ_\", " + 
                    " \"maintainers\": [ " + 
                    " \"6W3rzAgrMCm\", " + 
                    " \"_EM_684_XYZ_\", " + 
                    " \"jYwHP\" " + 
                    " ], " + 
                    " \"name\": \"_EM_685_XYZ_\", " + 
                    " \"score\": 974528056, " + 
                    " \"snapshotDate\": \"2062-04-00T02:18:14.568Z\", " + 
                    " \"starsCount\": 653, " + 
                    " \"url\": \"nWBBYx93eud9XV\" " + 
                    " }, " + 
                    " { " + 
                    " \"commitsCount\": 686, " + 
                    " \"contributorsCount\": 475, " + 
                    " \"description\": \"HcXO_53a3hzDZ\", " + 
                    " \"externalContributorsCount\": 22, " + 
                    " \"languageList\": [ " + 
                    " \"EDI\" " + 
                    " ], " + 
                    " \"maintainers\": [], " + 
                    " \"name\": \"Pvad9Pg3\", " + 
                    " \"organizationName\": \"8\", " + 
                    " \"score\": 147, " + 
                    " \"title\": \"XrjHuOq\", " + 
                    " \"url\": \"flycbLcon9\" " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 274, " + 
                    " \"externalContributorsCount\": 394, " + 
                    " \"languageList\": [ " + 
                    " \"hB_9ZSfMIulVSgfq\", " + 
                    " \"A5xmFUSmK6H\", " + 
                    " \"\", " + 
                    " \"Gf4Hx\" " + 
                    " ], " + 
                    " \"lastPushed\": \"FneW_iJ\", " + 
                    " \"maintainers\": [ " + 
                    " \"_EM_688_XYZ_\" " + 
                    " ], " + 
                    " \"primaryLanguage\": \"mZbR8Wut\", " + 
                    " \"score\": 163969804, " + 
                    " \"snapshotDate\": \"1925-06-28T11:23:07.050Z\", " + 
                    " \"starsCount\": 653 " + 
                    " }, " + 
                    " { " + 
                    " \"contributorsCount\": 216, " + 
                    " \"description\": \"xGjAAUpDcgyfto\", " + 
                    " \"externalContributorsCount\": 622, " + 
                    " \"lastPushed\": \"Z2cdF06Ajy\", " + 
                    " \"maintainers\": [ " + 
                    " \"k\", " + 
                    " \"_EM_691_XYZ_\", " + 
                    " \"_EM_692_XYZ_\", " + 
                    " \"zoizT\", " + 
                    " \"28pd3M\" " + 
                    " ], " + 
                    " \"name\": \"_EM_693_XYZ_\", " + 
                    " \"title\": \"_EM_694_XYZ_\", " + 
                    " \"url\": \"ghxrG\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/import?access_token=ePlWVF5")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_37_postOnScoring_projectReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PROJECT", 53L)
                .d("COMMITS_COUNT", "686")
                .d("CONTRIBUTORS_COUNT", "NULL")
                .d("DESCRIPTION", "\"CPMTsw\"")
                .d("FORKS_COUNT", "NULL")
                .d("GIT_HUB_PROJECT_ID", "880")
                .d("LAST_PUSHED", "\"gw_gvShsjWiC\"")
                .d("NAME", "\"I\"")
                .d("ORGANIZATION_NAME", "\"Q0gog\"")
                .d("PRIMARY_LANGUAGE", "\"2p6k\"")
                .d("SCORE", "NULL")
                .d("SNAPSHOT_DATE", "\"2024-03-16 10:40:06\"")
                .d("STARS_COUNT", "309")
                .d("URL", "\"_EM_500_XYZ_\"")
                .d("TITLE", "\"rHyag8a\"")
                .d("IMAGE", "NULL")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "706")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/config/scoring.project -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("X-Organizations", "_EM_563_XYZ_")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .post(baseUrlOfSut + "/config/scoring.project")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body(containsString("This endpoint is deactivated."));
    }
    
    
    @Test(timeout = 60000)
    public void test_38_getOnContributorsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_199_XYZ_")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=J1TP6R&" + 
                    "start_date=5Rs223J2&" + 
                    "end_date=kpblGX9tj&" + 
                    "access_token=EkzKO")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_39_getOnLanguagesWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/languages -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=_EM_167_XYZ_&" + 
                    "limit=-208461195&" + 
                    "q=5Fh&" + 
                    "EMextraParam123=42&" + 
                    "access_token=YFlqly")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_40_getOnLanguagesWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/languages -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/languages?" + 
                    "organizations=OnQo4_Yzp&" + 
                    "limit=604&" + 
                    "offset=960&" + 
                    "q=K1&" + 
                    "access_token=_EM_225_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_41_getOnStatisticsWithQueryParamsReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 69L)
                .d("ID", "460")
                .d("SNAPSHOT_DATE", "\"1984-01-01 01:07:39\"")
                .d("ALL_CONTRIBUTORS_COUNT", "NULL")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "672")
                .d("MEMBERS_COUNT", "656")
                .d("ORGANIZATION_NAME", "\"jlgxDhW\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "926")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "568")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "access_token=kQYOWly9n07xygi&" + 
                    "q=8IA0n&" + 
                    "offset=CWOzfBebm&" + 
                    "limit=_EM_704_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_42_getOnInitWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/init -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init?" + 
                    "access_token=BWWkCKXroZA3&" + 
                    "end_date=i_znALuVX8ci6l&" + 
                    "q=pt&" + 
                    "offset=_EM_584_XYZ_&" + 
                    "organizations=VklxPDG&" + 
                    "limit=_EM_585_XYZ_&" + 
                    "sortBy=7mYt&" + 
                    "language=k63HzjTjuf&" + 
                    "start_date=wcfP5LRYDo")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_43_getOnStatisticsWithQueryParamsReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 41L)
                .d("ID", "557")
                .d("SNAPSHOT_DATE", "\"1921-05-14 21:46:15\"")
                .d("ALL_CONTRIBUTORS_COUNT", "272")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "490")
                .d("ALL_STARS_COUNT", "744")
                .d("MEMBERS_COUNT", "267")
                .d("ORGANIZATION_NAME", "\"rfO4whu5w\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "629")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "835")
            .and().insertInto("CONTRIBUTOR", 42L)
                .d("ID", "853")
                .d("ORGANIZATION_ID", "207")
                .d("SNAPSHOT_DATE", "\"1975-07-18 04:43:53\"")
                .d("NAME", "\"_EM_505_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "397")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "-1136030460")
                .d("PERSONAL_COMMITS_COUNT", "NULL")
                .d("PERSONAL_PROJECTS_COUNT", "826003432")
                .d("URL", "\"_EM_506_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "organizations=rfO4whu5w&" + 
                    "start_date=HxZ6hWNI&" + 
                    "end_date=3le&" + 
                    "access_token=lSE_0vKH6MNYu&" + 
                    "q=mDotmVd&" + 
                    "offset=&" + 
                    "limit=9N34Kn&" + 
                    "sortBy=W_Jb")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_44_getOnStatisticsWithQueryParamsReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 60L)
                .d("ID", "720")
                .d("SNAPSHOT_DATE", "\"2011-02-04 04:11:42\"")
                .d("ALL_CONTRIBUTORS_COUNT", "557")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "NULL")
                .d("ALL_STARS_COUNT", "NULL")
                .d("MEMBERS_COUNT", "225")
                .d("ORGANIZATION_NAME", "NULL")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "654")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "72")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics?" + 
                    "start_date=XOwg7DzkjEOU&" + 
                    "end_date=_EM_586_XYZ_&" + 
                    "access_token=n0dAqBZif8Q&" + 
                    "offset=_EM_588_XYZ_&" + 
                    "sortBy=Km")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_45_getOnContributorsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/contributors -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("X-Organizations", "WA6PoXDqs_1JZJa")
                .get(baseUrlOfSut + "/statistics/contributors?" + 
                    "organizations=3kdFEhqyp&" + 
                    "end_date=sXQ8Vj&" + 
                    "access_token=q8IihVqy4a&" + 
                    "q=yvB&" + 
                    "offset=50ADE6ADslA5&" + 
                    "limit=rfYnXsI&" + 
                    "sortBy=OrD7U8g3")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_46_getOnInitWithQueryParamsReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 41L)
                .d("ID", "557")
                .d("SNAPSHOT_DATE", "\"1921-05-14 21:46:15\"")
                .d("ALL_CONTRIBUTORS_COUNT", "272")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "490")
                .d("ALL_STARS_COUNT", "744")
                .d("MEMBERS_COUNT", "267")
                .d("ORGANIZATION_NAME", "\"rfO4whu5w\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "629")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "835")
            .and().insertInto("CONTRIBUTOR", 42L)
                .d("ID", "853")
                .d("ORGANIZATION_ID", "207")
                .d("SNAPSHOT_DATE", "\"1975-07-18 04:43:53\"")
                .d("NAME", "\"_EM_505_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "397")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "-1136030460")
                .d("PERSONAL_COMMITS_COUNT", "NULL")
                .d("PERSONAL_PROJECTS_COUNT", "826003432")
                .d("URL", "\"_EM_506_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/init -> No response body is expected but one was found.
        given().accept("application/json;charset=utf-8")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/init?" + 
                    "access_token=_EM_512_XYZ_&" + 
                    "end_date=cUZ95pTJbRB&" + 
                    "q=mOqLOHHJJ&" + 
                    "offset=_EM_513_XYZ_&" + 
                    "organizations=ypyQ8CyeAjsvA&" + 
                    "limit=_EM_514_XYZ_&" + 
                    "sortBy=Vg3&" + 
                    "language=Rv7NYtiHSJ55")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_47_getOnProjectsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "P6dpKqoB")
                .header("X-Organizations", "K7")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "end_date=YNzM0r6mf1ZPA&" + 
                    "access_token=vvBrsKYS&" + 
                    "q=MX&" + 
                    "offset=tZtwSwEsHQqnGD4&" + 
                    "sortBy=vCU9f8&" + 
                    "language=4DxNrmJpYVcYFyvv")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_48_getOnProjectsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "start_date=1jVu&" + 
                    "access_token=q8IihVqy4a&" + 
                    "q=yvB&" + 
                    "sortBy=OrD7U8g3")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_49_getOnProjectsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/projects -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .header("x-organizations", "3GUUyR7MUcvRjA5")
                .get(baseUrlOfSut + "/statistics/projects?" + 
                    "organizations=ySJodfMeaUQ5T&" + 
                    "start_date=BSw4j_aee&" + 
                    "access_token=BbM&" + 
                    "q=HjnCHEGOSE&" + 
                    "offset=22xFNsUMW&" + 
                    "limit=Zi0U4")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_50_getOnContributorsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=TiosQvfcSxK&" + 
                    "limit=587&" + 
                    "offset=-1723405212&" + 
                    "start_date=GVUf&" + 
                    "EMextraParam123=42&" + 
                    "access_token=6Hmmk30oa")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_51_getOnContributorsWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=&" + 
                    "limit=-7635&" + 
                    "offset=936&" + 
                    "q=KSVS4&" + 
                    "access_token=Jyhvy")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_52_getOnLanguagesWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/statistics/languages -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/statistics/languages?" + 
                    "organizations=_EM_603_XYZ_&" + 
                    "end_date=VtM&" + 
                    "access_token=_EM_616_XYZ_&" + 
                    "q=LECJqL7P8w&" + 
                    "offset=S_&" + 
                    "limit=V7Um&" + 
                    "sortBy=rHI&" + 
                    "language=_EM_605_XYZ_")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_53_getOnContributorsReturnsSchemaInvalidResponseUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("STATISTICS", 41L)
                .d("ID", "557")
                .d("SNAPSHOT_DATE", "\"1921-05-14 21:46:15\"")
                .d("ALL_CONTRIBUTORS_COUNT", "272")
                .d("ALL_FORKS_COUNT", "NULL")
                .d("ALL_SIZE_COUNT", "490")
                .d("ALL_STARS_COUNT", "744")
                .d("MEMBERS_COUNT", "267")
                .d("ORGANIZATION_NAME", "\"rfO4whu5w\"")
                .d("PRIVATE_PROJECT_COUNT", "NULL")
                .d("PROGRAM_LANGUAGES_COUNT", "NULL")
                .d("PUBLIC_PROJECT_COUNT", "NULL")
                .d("TAGS_COUNT", "NULL")
                .d("TEAMS_COUNT", "629")
                .d("EXTERNAL_CONTRIBUTORS_COUNT", "835")
            .and().insertInto("CONTRIBUTOR", 42L)
                .d("ID", "853")
                .d("ORGANIZATION_ID", "207")
                .d("SNAPSHOT_DATE", "\"1975-07-18 04:43:53\"")
                .d("NAME", "\"_EM_505_XYZ_\"")
                .d("ORGANIZATION_NAME", "NULL")
                .d("ORGANIZATIONAL_COMMITS_COUNT", "397")
                .d("ORGANIZATIONAL_PROJECTS_COUNT", "-1136030460")
                .d("PERSONAL_COMMITS_COUNT", "NULL")
                .d("PERSONAL_PROJECTS_COUNT", "826003432")
                .d("URL", "\"_EM_506_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/contributors -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/contributors?" + 
                    "organizations=207&" + 
                    "limit=74&" + 
                    "offset=812&" + 
                    "end_date=_EM_508_XYZ_&" + 
                    "sortBy=_EM_509_XYZ_&" + 
                    "q=zctz5u0rfnlXF&" + 
                    "access_token=oCr_oQoG%5C")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }
    
    
    @Test(timeout = 60000)
    public void test_54_getOnProjectsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/projects -> No response body is expected but one was found.
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/projects?" + 
                    "limit=551&" + 
                    "offset=-31805&" + 
                    "start_date=1953-05-06T13%3A12%3A60.990-08%3A22&" + 
                    "end_date=2057-08-09T13%3A40%3A01.558-10%3A25&" + 
                    "access_token=Ru4JD5juJmJNQO6")
                .then()
                .statusCode(403)
                .assertThat()
                .contentType("application/json")
                .body("'error'", containsString("access_denied"))
                .body("'error_description'", containsString("Unable to obtain a new access token for resource 'null'. The provider manager is not configured to support it."));
    }


}
