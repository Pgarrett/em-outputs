import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.mongo.dsl.MongoDsl.mongo;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-06T23:33:10.158-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 112 tests
 * <br>
*  Covered targets: 303
 * <br>
*  Used time: 0h 10m 23s
 * <br>
*  Needed budget for current results: 91%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.cbioportal.session_service.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_getOnSessionShowsFaults_100_200UsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"1grSD1dHe98be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"_EM_2999_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"lAs]UgWUUfCCU\", \"type\":\"group\", \"_id\":{\"$oid\":\"36e6f302eeee41c58939eb5a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_3702_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UUeYUIjXU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"lG7JSaAXzAOB\", \"checksum\":\"AKZDOts\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Io\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f2e66336c2d34a4644f18d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"XTa7mrKhpsZ0gRT\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"group\", \"_id\":{\"$oid\":\"6adf5981eff0cad2bd9d59ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"\", \"checksum\":\"AA9WkYl1qM_T\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"9yqiuS1YbkW\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"6adf7bcc78dcce13d7c12d0a\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"fFoxfloXFhdohVsU\", \"checksum\":\"IWwG\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"4\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"1e5e1caf5c9aa41bbb8dd783\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault100. HTTP Status 500. framework_code GET:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/K/group/IKQ4oQ45Oh;")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/K/group/IKQ4oQ45Oh;"));
    }
    
    
    @Test(timeout = 60000)
    public void test_1_postOnSessionWithQueryParamShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. org/cbioportal/session_service/domain/Session_74_setData POST:/api/sessions/{source}/{type}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 500 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"genomic_chart\" ")
                .post(baseUrlOfSut + "/api/sessions/_r/genomic_chart")
                .then()
                .statusCode(500)// org/cbioportal/session_service/domain/Session_74_setData
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/_r/genomic_chart"));
    }
    
    
    @Test(timeout = 60000)
    public void test_2_postOnSessionWithQueryParamShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. org/cbioportal/session_service/domain/Session_74_setData POST:/api/sessions/{source}/{type}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 500 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" \"comparison_session\" ")
                .post(baseUrlOfSut + "/api/sessions/_EM_452_XYZ_/comparison_session?EMextraParam123=42")
                .then()
                .statusCode(500)// org/cbioportal/session_service/domain/Session_74_setData
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/_EM_452_XYZ_/comparison_session"));
    }
    
    
    @Test(timeout = 60000)
    public void test_3_postOnSessionWithQueryParamShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. org/cbioportal/session_service/domain/Session_74_setData POST:/api/sessions/{source}/{type}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 500 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_1210_XYZ_\" ")
                .post(baseUrlOfSut + "/api/sessions/tGSHIj/custom_gene_list?EMextraParam123=_EM_1211_XYZ_")
                .then()
                .statusCode(500)// org/cbioportal/session_service/domain/Session_74_setData
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/tGSHIj/custom_gene_list"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4_putOnSessionWithQueryParamShowsFaults_100_200UsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"9jOvkFKstxb\", \"checksum\":\"DPO\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Uu9RtpQHODgeL_r\", \"type\":\"group\", \"_id\":{\"$oid\":\"adeee9ab6b3f15bece039ffe\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_1874_XYZ_\", \"checksum\":\"qz86cGanJW\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_1875_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"3931fc7d00d336ccafa0a193\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault100. HTTP Status 500. framework_code PUT:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" :CnHsS4 ")
                .put(baseUrlOfSut + "/api/sessions/HHD7O;WbbulN7/settings/_EM_1876_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/HHD7O;WbbulN7/settings/_EM_1876_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_5_postOnSessionWithQueryParamShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. org/cbioportal/session_service/domain/Session_74_setData POST:/api/sessions/{source}/{type}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 500 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_599_XYZ_\" ")
                .post(baseUrlOfSut + "/api/sessions/_EM_598_XYZ_/group")
                .then()
                .statusCode(500)// org/cbioportal/session_service/domain/Session_74_setData
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/_EM_598_XYZ_/group"));
    }
    
    
    @Test(timeout = 60000)
    public void test_6_putOnSessionWithQueryParamShowsFaults_100_200UsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"9jOvkFKstxb\", \"checksum\":\"DPO\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Uu9RtpQHODgeL_r\", \"type\":\"group\", \"_id\":{\"$oid\":\"adeee9ab6b3f15bece039ffe\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_1874_XYZ_\", \"checksum\":\"qz86cGanJW\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_1875_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"3931fc7d00d336ccafa0a193\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault100. HTTP Status 500. framework_code PUT:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" :CnHsS4 ")
                .put(baseUrlOfSut + "/api/sessions/HHD7O;WbbulN7/virtual_study/_EM_1876_XYZ_")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/HHD7O;WbbulN7/virtual_study/_EM_1876_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_7_postOnSessionWithQueryParamShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. framework_code POST:/api/sessions/{source}/{type}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 500 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" HexData ")
                .post(baseUrlOfSut + "/api/sessions/mWAyN6gd%25/virtual_study?EMextraParam123=_EM_395_XYZ_")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/mWAyN6gd%25/virtual_study"));
    }
    
    
    @Test(timeout = 60000)
    public void test_8_getOnQueryShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. org/cbioportal/session_service/domain/internal/SessionRepositoryImpl_104_findBySourceAndTypeAndQuery GET:/api/sessions/{source}/{type}/query
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 500 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_5005_XYZ_/virtual_study/query?" + 
                    "field=_&" + 
                    "value=HYTLtZisGPx")
                .then()
                .statusCode(500)// org/cbioportal/session_service/domain/internal/SessionRepositoryImpl_104_findBySourceAndTypeAndQuery
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/_EM_5005_XYZ_/virtual_study/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_9_postOnSessionShowsFaults_100_200UsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"i\", \"checksum\":\"R\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X1rO0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"e1b766d9c4759e6a89237a27\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"U\", \"checksum\":\"_EM_418_XYZ_w\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"settings\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_3045_XYZ_\", \"checksum\":\"2r7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUfCCU\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"Lqab7X4rZoFi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOqABafA_\", \"checksum\":\"hacSI5lwX1tMv\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mUUeYUIjXU\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_3224_XYZ_\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"f0dbe6a9b6fe1bf0ce191b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zu\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjag\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"p2Mn0az\", \"checksum\":\"P\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Itl3fNg9c[HLXUxB\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"97f6892edae6bb5ca50a599e\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_3042_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"C3kd98FVR\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ad5bdde4e8cfc1da8c3d7e1b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/cbioportal/session_service/domain/Session_74_setData POST:/api/sessions/{source}/{type}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 500 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"custom_data\" ")
                .post(baseUrlOfSut + "/api/sessions/_EM_3225_XYZ_/custom_data")
                .then()
                .statusCode(500)// org/cbioportal/session_service/domain/Session_74_setData
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/_EM_3225_XYZ_/custom_data"));
    }
    
    
    @Test(timeout = 60000)
    public void test_10_deleteOnSessionShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. framework_code DELETE:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/kqL;/comparison_session/rxEiXH2YmOn?" + 
                    "field=3m&" + 
                    "value=")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/kqL;/comparison_session/rxEiXH2YmOn"));
    }
    
    
    @Test(timeout = 60000)
    public void test_11_getOnQueryShowsFaults_100_200UsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"_EM_418_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_1048_XYZ_\", \"checksum\":\"bA1ubpAgVJHLm2z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_1049_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"36e503e20eef30c5883bdb5b\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"Lqbb7X4rZoFi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tMi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjXz\", \"type\":\"group\", \"_id\":{\"$oid\":\"b79213c88eace32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_1050_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"00cae7a9a7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zu\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"UUrU\", \"checksum\":\"ZLsCUvwm67moHMk2z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"778cd3a8404eb59717f9f707\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault100. HTTP Status 500. framework_code GET:/api/sessions/{source}/{type}/query
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 500 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_26_XYZ_")
                .get(baseUrlOfSut + "/api/sessions/;7Cy9%3F/custom_data/query?" + 
                    "field=data&" + 
                    "value=_EM_24_XYZ_&" + 
                    "EMextraParam123=_EM_25_XYZ_")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/;7Cy9%3F/custom_data/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_12_getOnSessionWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/_EM_59_XYZ_/group")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_13_getOnSessionWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/Euz1V/virtual_study?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_14_getOnSessionWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/0YfR9XxHSreD/main_session")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_15_getOnSessionWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/f26ygfTu711/settings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_16_postOnFetchWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/_EM_9_XYZ_/group/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_17_postOnFetchWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"pysdISOA4V1N5IuE\", \"checksum\":\"5BYLg1TNMBuy\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"5e29d0593fbfb5d34df6dac2\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_3568_XYZ_\", \"checksum\":\"rb\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3569_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"e2ca582a30ae9c2acb11c26f\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"EM_tainted_map\": \"_EM_3548_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/sessions/8pb/genomic_chart/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_18_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_3044_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X1rO0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"e1b766d9c4769e6a89237a27\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"U\", \"checksum\":\"_EM_418_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"settings\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_3045_XYZ_\", \"checksum\":\"2r7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUfCCU\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"Lqab7X4rZoFi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tMv\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mUUeYUIjXU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"00cae7a9b7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zu\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"p2Mn0az\", \"checksum\":\"P\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Itl3fNg9c[HLXUxB\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"97f6892edae6bb5ca50a599e\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_3042_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"C3kd98FVR\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ad5bdde4e8cfc1da8c3d7e1b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_3046_XYZ_/custom_gene_list")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_19_postOnFetchWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"EM_tainted_map\": \"_EM_3548_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/sessions/4p/custom_data/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_20_postOnFetchWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "group")
                .d("{\"id\":\"U4eVZD8eX\", \"checksum\":\"_EM_3560_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"e1fQOSjb\", \"type\":\"group\", \"_id\":{\"$oid\":\"186c687a9cc3df4cc2aa7981\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"a2vbipYMeeRD_\", \"checksum\":\"TSNy8UNUAfa\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"GkRycf\", \"type\":\"group\", \"_id\":{\"$oid\":\"32f126f2eae7cdbb5c5208c8\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"hmV4MccYIk\", \"checksum\":\"VstTJY5QfSCOYu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"MkFimwUh7\", \"type\":\"settings\", \"_id\":{\"$oid\":\"c713a84fac64793c22f4fd8b\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"jF\", \"checksum\":\"BCijXbig3Wfm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"obaosjVo\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"053e6ffd63addfd07d5cebea\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/g6U/settings/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_21_postOnFetchWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "group")
                .d("{\"id\":\"U4eVZD8eX\", \"checksum\":\"_EM_3560_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"e1fQOSjb\", \"type\":\"group\", \"_id\":{\"$oid\":\"186c687a9cc3df4cc2aa7981\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"a2vbipYMeeRD_\", \"checksum\":\"TSNy8UNUAfa\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"GkRycf\", \"type\":\"group\", \"_id\":{\"$oid\":\"32f126f2eae7cdbb5c5208c8\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"hmV4MccYIk\", \"checksum\":\"VstTJY5QfSCOYu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"MkFimwUh7\", \"type\":\"settings\", \"_id\":{\"$oid\":\"c713a84fac64793c22f4fd8b\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"jF\", \"checksum\":\"BCijXbig3Wfm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"obaosjVo\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"053e6ffd63addfd07d5cebea\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"2_zTgqaVvu4S\", \"checksum\":\"KGjO3MgCc\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"6jv2pAVDAxmQgp\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"a4aa502bb50c67a949da963f\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"Sv5SJ4LC4gzL3f\", \"checksum\":\"0\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"wtQoUtK6R\", \"type\":\"settings\", \"_id\":{\"$oid\":\"e6fa246f7babd474a7dbbacd\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/g6Uu/virtual_study/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_22_postOnFetchWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"EM_tainted_map\": \"_EM_3548_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/sessions/8pb/custom_gene_list/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_23_postOnFetchWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "group")
                .d("{\"id\":\"U4eVZD8eX\", \"checksum\":\"_EM_3560_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"e1fQOSjb\", \"type\":\"group\", \"_id\":{\"$oid\":\"186c687a9cc3df4cc2aa7981\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"a2vbipYMeeRD_\", \"checksum\":\"TSNy8UNUAfa\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"GkRycf\", \"type\":\"group\", \"_id\":{\"$oid\":\"32f126f2eae7cdbb5c5208c8\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/g6U/main_session/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_24_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"TuBpWdnimvh3Y\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d2b565ebb485ad7b89338a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_943_XYZ_\", \"checksum\":\"eRlLZHcxnn\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Kl\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"56cb06f6c03182cff9edabd9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"_EM_333_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAsUpgUu9bSCE\", \"type\":\"group\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yHCeQ\", \"checksum\":\"Lqab7X4rZoFio\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7apw\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d597a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoAB_fA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjX\u008A\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b6a412d88f9cd22f961e8dfd\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UyhR\", \"type\":\"group\", \"_id\":{\"$oid\":\"0fbae7a8a7ed2bffd01a0b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"hHoUQr3hWuFOwT_D\", \"checksum\":\"qoLWkA9Q7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"rsIfMaMpRiq2F\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"9beb1f66b8ee1abd6fbb09eb\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"U75\", \"checksum\":\"riSqOVZxC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"nhZZLC4u3fFl4\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b503c45deae28e104e45dc5a\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_944_XYZ_\", \"checksum\":\"zOnI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"TS4cq3XOgZFSXOv\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"0c23b589e91ac5dfe3f52a3e\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"R\", \"checksum\":\"TvrbfI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"XeW\", \"type\":\"settings\", \"_id\":{\"$oid\":\"c53a8d26ad1e9775df907241\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/rsIfMaMpRiq2F/comparison_session?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'data'.'EM_tainted_map'", containsString("_EM_18_XYZ_"))
                .body("[0].'source'", containsString("rsIfMaMpRiq2F"))
                .body("[0].'type'", containsString("comparison_session"));
    }
    
    
    @Test(timeout = 60000)
    public void test_25_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"TuBpWdnimvh3Y\", \"checksum\":\"_EM_1004_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_1005_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d2b565ebb4859d7b89338a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"LA9Z\", \"checksum\":\"eRlLZHcxnn\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"56cb06f6c03182cff9edabd9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"_EM_333_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAsUpgUu9bSCE\", \"type\":\"group\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yHCeQ\", \"checksum\":\"Lqab7X4rZoFio\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7apw\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d597a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoAB_fA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjX\u008A\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b6a412d88f9cd22f961e8dfd\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UyhR\", \"type\":\"group\", \"_id\":{\"$oid\":\"0fbae7a8a7ed2bffd01a0b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"hHoUQr3hWuFOwT_D\", \"checksum\":\"qoLWkA9Q7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"rsIfMaMpQiq2F\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"9beb1076b8fe2aad6fcb19db\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"U75\", \"checksum\":\"riSqOVZxC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"nhZZLC4u3fFl4\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b503c45deae28e104e45dc5a\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_944_XYZ_\", \"checksum\":\"zOnI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"TS4cq3XOgZFSXOv\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"0c23b589e91ac5dfe3f52a3e\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"R\", \"checksum\":\"TvrbfI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"XeW\", \"type\":\"settings\", \"_id\":{\"$oid\":\"c53a8d26ad1e9775df907241\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/nhZZLC4u3fFl4/custom_data")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_26_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"BIdO7DRy\", \"checksum\":\"R\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"XUsPU\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"e1b666dac475ad6a79347917\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"SA\", \"checksum\":\"_EM_418_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3417_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"_EM_3420_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUfCCU\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"36d6e3f2f0ef41b5873aca5a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"Lqab7X4rZoFix\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7apu\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"d0413a9bce15f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_3421_XYZ_\", \"checksum\":\"UiUUI5lwX5tUv\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mUUeYUIjXUy\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b79313c88eacd320872e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"f0cad7a9b7ee1beebe190b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3418_XYZ_\", \"checksum\":\"Uv5UCFU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_U19_XUZU\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123baa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"p:Mn0az\", \"checksum\":\"L\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Itl3fNg9c[HLXUxB\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"97f6892edae6bb5ca50a599e\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_3042_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"C3kd98FVR\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ad5bdde4e8cfc1da8c3d7e1b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_3419_XYZ_/custom_gene_list")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_27_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eab476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_363_XYZ_\", \"checksum\":\"EM_tainted_map\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"settings\", \"_id\":{\"$oid\":\"56bbf6f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"bA1ubpAgVJHLm2z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAsUpgUu9bSCE\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"Lqab7X4rZoFi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_2360_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mUUeYUUjXU\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"b79213c88eacd32f872e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_2361_XYZ_\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"MyhN\", \"type\":\"settings\", \"_id\":{\"$oid\":\"febae7b8a8ee3b00c00afcfc\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zs6ei\", \"checksum\":\"iCI8qMZ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m7BY9QZ6q\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"673df6ffcb3bab40b2c8b308\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"O3h1_ovl_giCyD\", \"checksum\":\"gKjUyMGuvj\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Lo08Q0kq93y8_m\", \"type\":\"settings\", \"_id\":{\"$oid\":\"521adf0c9e4ba2ffb7bfaffc\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"5bzBUb\", \"checksum\":\"yqKXFPNecqm_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Mw2NByQNtvZ2_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"77f6975f46da9caa8b16ba03\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Vja_TnFfvU\", \"checksum\":\"s0l7HwxDklu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"ClvJcfN\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"c43cbdbbf0db6dc72c5dffdf\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_972_XYZ_/custom_data")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_28_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ad6a69347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"1grSD1dHe98be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVyBusNN3Kd\", \"checksum\":\"_EM_2999_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"lAs]UgWUUfCCU\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"35e6e302deee41c58949eb59\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_3702_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UUeYUIjXU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5308_XYZ_\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"01c9e899b6ee2beedf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev;fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"2WdPfwFgSUU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gnbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wlmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"pUUJSaAXzAO@\", \"checksum\":\"AKZDOts\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Io\", \"type\":\"group\", \"_id\":{\"$oid\":\"22f2e65346c2d35a4644028d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_5309_XYZ_\", \"checksum\":\"XTa7mrKhpsZ0gRT\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"group\", \"_id\":{\"$oid\":\"6ade5981fff0cad1ae9d59ae\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5311_XYZ_\", \"checksum\":\"AA9WkYl1qM_T\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"9yqiuS1YbkW\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"6adf7bcc78dcce13d7c12d0a\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"fFoxfloXFhdohVsU\", \"checksum\":\"IWwG\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"4\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"1e5e1caf5c9aa41bbb8dd783\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"Dp5xemrXmL0L2vYH\", \"checksum\":\"Xm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Ruzj01\", \"type\":\"group\", \"_id\":{\"$oid\":\"ab7af05add0ca35d90caac39\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"Yv\", \"checksum\":\"2zLGhQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"iM\", \"type\":\"settings\", \"_id\":{\"$oid\":\"edeb13f33095bb1aa18aa6e0\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/02_Wnmyo/comparison_session")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_29_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG07\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ae6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"1grSD1dHe78be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3183d0eadebbe8\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"w74Zp6e\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3930_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"36e6f302eeee31c58939eb5a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_3931_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"d0413a9bce05f1abe13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_3932_XYZ_\", \"checksum\":\"_EM_3933_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mUUUeUUIjXU9\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TP\", \"checksum\":\"i93yr:VPXe3Sxmez\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UQhV\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"oSscjzaA\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"123aaa69e33df08e0ede3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"lG7JSaAXzAOB\", \"checksum\":\"AKZDOts\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Io\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f2e66336c2d34a4644f18d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"0w\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuztKfa\", \"type\":\"settings\", \"_id\":{\"$oid\":\"7abf6a81eff0cad3bd7c4aad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"I\", \"checksum\":\"K\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3935_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"5bc64fafc1abf4f84bafec8c\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"k_\", \"checksum\":\"42\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"jan1ebtlFQYRH4i\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"33589a2f70cffd76c4fcdbcf\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"scITQ9xTtL2\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"TRMIO2\", \"type\":\"settings\", \"_id\":{\"$oid\":\"4935b0c5bec79c1b2cdbe779\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"FpidfY6nL\", \"checksum\":\"06f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"0qhe4a8KTxExLbVu\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"7d1c4cc788cc1c01af8c8cbb\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/GfyaZF0/genomic_chart")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_30_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"_EM_418_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_2670_XYZ_\", \"checksum\":\"bA1ubpAgVJHLm2z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUbCCUu\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"Lqab7X4rZoFi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjXz\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79213c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_2664_XYZ_\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"MygV\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"01cbe69ab6ed1ae0c0090a1e\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zu\", \"checksum\":\"Uv7fCBC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_2665_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"ZLsCUvwm67moHMk2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_2671_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f707\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"DdNhEcl\", \"checksum\":\"Dz\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"uGDHHKBEGvaK\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"acb91e3312c32a9bc2f5e3f5\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"KDm0C\", \"checksum\":\"aWPdh2ix2FKqZFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Q4KR_wVG5\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"5ae970bfc2ebdbf0a1ef8afe\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/custom_data/custom_data")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_31_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_4969_XYZ_\", \"checksum\":\"_EM_4970_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"W9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"\", \"checksum\":\"1grSD1dHe98be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_4971_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"_EM_2999_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"lAs]UgWUUfCCU\", \"type\":\"group\", \"_id\":{\"$oid\":\"36e6f302eeee41c58939eb5a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"Jkcy3aX1\", \"checksum\":\"_EM_3702_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hac[I5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UUeYUIjXU\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"lG7JSaAXzAOB\", \"checksum\":\"AKZDOts\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Io\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f2e66336c2d34a4644f18d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"XTa7mrKhpsZ0gRT\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"group\", \"_id\":{\"$oid\":\"6adf5981eff0cad2bd9d59ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"\", \"checksum\":\"AA9WkYl1qM_T\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"9yqiuS1YbkW\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"6adf7bcc78dcce13d7c12d0a\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"fFoxfloXFhdohVsU\", \"checksum\":\"IWwG\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"4\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"1e5e1caf5c9aa41bbb8dd783\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_3705_XYZ_/custom_data")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_32_getOnQueryWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/M0/genomic_chart/query?" + 
                    "field=_EM_55_XYZ_&" + 
                    "value=rgKP9V")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_33_getOnQueryWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_188_XYZ_")
                .get(baseUrlOfSut + "/api/sessions/_EM_185_XYZ_/comparison_session/query?" + 
                    "field=_EM_186_XYZ_&" + 
                    "value=hnv4W_aIXGTAb")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_34_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_697_XYZ_\", \"checksum\":\"_EM_698_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_699_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"d48cde178cbde8fe0d35dbdb\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"vQtRhZz6MLU2nPzt\", \"checksum\":\"iNpz\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"2395e0cf0d0b0aba7bb078d7\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_700_XYZ_/genomic_chart/query?" + 
                    "field=_EM_167_XYZ_&" + 
                    "value=yq110%21&" + 
                    "EMextraParam123=_EM_168_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_35_getOnQueryWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/2WdPfwFkSWg/comparison_session/query?" + 
                    "field=_EM_3777_XYZ_&" + 
                    "value=m7w4Cf")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_36_getOnQueryWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_99_XYZ_")
                .get(baseUrlOfSut + "/api/sessions/v_Amo/main_session/query?" + 
                    "field=_EM_96_XYZ_&" + 
                    "value=_EM_97_XYZ_&" + 
                    "EMextraParam123=_EM_98_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_37_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "settings")
                .d("{\"id\":\"FKPkEKLZShyZx\", \"checksum\":\"JWsyh1F\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Q_o\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"0fdccc50e12aa51abebbca3c\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"qL0bl8BDGYY\", \"checksum\":\"_EM_21_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"kbGkGRYQY\\\\u\", \"type\":\"settings\", \"_id\":{\"$oid\":\"4598dbef043bf455450b5dea\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/UU21zl04T27w/virtual_study/query?" + 
                    "field=dRf&" + 
                    "value=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_38_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"B_\", \"checksum\":\"_EM_1664_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG01\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eab476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_363_XYZ_\", \"checksum\":\"EM_tainted_map\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"settings\", \"_id\":{\"$oid\":\"56bbf6f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"bA1ubpAgVJHLm2z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAsUpgUu9bSCE\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_1665_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d0413a9bce06f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjXz\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79213c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"MyhV\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"0fbae7a8a7ed2bffd01a0b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_1666_XYZ_\", \"checksum\":\"_EM_1667_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m7BY9QZ6q\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"663cf7fecc3abc50b3b8a417\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"OUh1UovlUgiCUD\", \"checksum\":\"gKjUyMGuvj\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Lo08Q0kq93y8_m6\", \"type\":\"settings\", \"_id\":{\"$oid\":\"521adf0c9e4ba2ffb7bfaffc\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"5bzBUb\", \"checksum\":\"yqKXFPNecqm_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Mw2NByQNtvZ2_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"77f6975f46da9caa8b16ba03\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_1668_XYZ_\", \"checksum\":\"s0l7HwxjDklu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"ClvJSfN\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"c43cbdbbf0db6dc72c5dffdf\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/MyhV/main_session/query?" + 
                    "field=_EM_28_XYZ_&" + 
                    "value=_EM_29_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_39_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_252_XYZ_\", \"checksum\":\"_EM_253_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"95869acd2fddcdfc74612d76\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"1B7LhDx\", \"checksum\":\"APH_tLSX1t\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"L\", \"type\":\"group\", \"_id\":{\"$oid\":\"c15be566f4be54d8e41bb1ea\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"qWJ\", \"checksum\":\"lki4Dnuw1F_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"NGBbS_f9GL\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b7bae0d41cb9c5020981d7ea\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"subhEQN3dQiFGv\", \"checksum\":\"f_eyl_Ri8sJlX\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"wMkm\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"6a11eaa6d26e0e0fb58b7c5e\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"o>Oko821ypc\", \"checksum\":\"iP\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UU83O\", \"type\":\"group\", \"_id\":{\"$oid\":\"3ecedc833e3d0468bef3cff9\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"G3OvyjRm\", \"checksum\":\"wU488D2Lb4Hec5\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Gq4n29dhQs7hNXr\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"601b2fdbedf693b658f0b551\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"U1Ajw_\", \"checksum\":\"KGvdrCYg7tM6Wg\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"JCuX\", \"type\":\"settings\", \"_id\":{\"$oid\":\"db5fac57a1ad5f1a3f620a09\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"6bFUM21\", \"checksum\":\"_EM_254_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"axqocmW\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"c1d801cc7db4c6c4b0f7abbf\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/_EM_27_XYZ_/comparison_session/query?" + 
                    "field=WuuikUosytClcnGu&" + 
                    "value=_EM_29_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_40_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"X\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"_EM_418_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"settings\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_2616_XYZ_\", \"checksum\":\"_EM_2617_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUbCCU\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883acb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"Lqab7X4rZoFi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1403aabbf14f09cf13d687a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"_EM_2613_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjXz\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b89222c89ebcc32f963e7b0d\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwJL3TH\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"MyhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"00bae6aab7ed2adfce180c0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_2618_XYZ_\", \"checksum\":\"ev7fCFCo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_2614_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"132aba78f32df28effcd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"ZLsCUvwm67moHMk2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"778cd3a8304eb59617f9f707\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_2615_XYZ_/main_session/query?" + 
                    "field=_EM_23_XYZ_&" + 
                    "value=_EM_24_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_41_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"TuBpWdnimvh3Y\", \"checksum\":\"_EM_1004_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_1005_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d2b565ebb4859d7b89338a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"LA9Z\", \"checksum\":\"eRlLZHcxnn\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"56cb06f6c03182cff9edabd9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"_EM_333_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAsUpgUu9bSCE\", \"type\":\"group\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yHCeQ\", \"checksum\":\"Lqab7X4rZoFio\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7apw\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d597a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoAB_fA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjX\u008A\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b6a412d88f9cd22f961e8dfd\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UyhR\", \"type\":\"group\", \"_id\":{\"$oid\":\"0fbae7a8a7ed2bffd01a0b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"hHoUQr3hWuFOwT_D\", \"checksum\":\"qoLWkA9Q7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"rsIfMaMpQiq2F\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"9beb1076b8fe2aad6fcb19db\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"U75\", \"checksum\":\"riSqOVZxC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"nhZZLC4u3fFl4\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b503c45deae28e104e45dc5a\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_944_XYZ_\", \"checksum\":\"zOnI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"TS4cq3XOgZFSXOv\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"0c23b589e91ac5dfe3f52a3e\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"R\", \"checksum\":\"TvrbfI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"XeW\", \"type\":\"settings\", \"_id\":{\"$oid\":\"c53a8d26ad1e9775df907241\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"KOJBXRdRM\", \"checksum\":\"ppu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"jWTx3\", \"type\":\"group\", \"_id\":{\"$oid\":\"453dbd408f1e77d08fbe8933\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"kbufNCdZAORJ6\", \"checksum\":\"GKF7U3fBU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"V55IiRuy8UUG2I\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"65d8e9ac2c6abf6feba16c99\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_1006_XYZ_/group/query?" + 
                    "field=_EM_23_XYZ_&" + 
                    "value=E0OGh6O2dcH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_42_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"TuBpWdnimvh3Y\", \"checksum\":\"_EM_1004_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_1005_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d2b565ebb4859d7b89338a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"LA9Z\", \"checksum\":\"eRlLZHcxnn\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"56cb06f6c03182cff9edabd9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"_EM_333_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAsUpgUu9bSCE\", \"type\":\"group\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yHCeQ\", \"checksum\":\"Lqab7X4rZoFio\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7apw\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d597a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoAB_fA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjX\u008A\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b6a412d88f9cd22f961e8dfd\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UyhR\", \"type\":\"group\", \"_id\":{\"$oid\":\"0fbae7a8a7ed2bffd01a0b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"hHoUQr3hWuFOwT_D\", \"checksum\":\"qoLWkA9Q7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"rsIfMaMpQiq2F\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"9beb1076b8fe2aad6fcb19db\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"V7U\", \"checksum\":\"rUSqOVZxC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"nhZZLC4u3fFl4\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b503c45deae28e104e45dc5a\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_944_XYZ_\", \"checksum\":\"zOnI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"TS4cq3XOgZFSXOv\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"0c23b589e91ac5dfe3f52a3e\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"R\", \"checksum\":\"TvrbfI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"XeW\", \"type\":\"settings\", \"_id\":{\"$oid\":\"c53a8d26ad1e9775df907241\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"aVZItckrzY3\", \"checksum\":\"soIcCBIZPLN\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"8e8ek9Qis3NuK\", \"type\":\"settings\", \"_id\":{\"$oid\":\"1d7649bdd14240cc0e7a7fbd\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"kCqq51p96I\", \"checksum\":\"Zr\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"cC\", \"type\":\"group\", \"_id\":{\"$oid\":\"ebf3b3ae1ad87bb3b35d18f4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_1006_XYZ_/group/query?" + 
                    "field=_EM_23_XYZ_&" + 
                    "value=E0OGh6O2dcH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_43_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"TuBpWdnimvh3Y\", \"checksum\":\"_EM_1004_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_1005_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d2b565ebb4859d7b89338a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"LA9Z\", \"checksum\":\"eRlLZHcxnn\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"56cb06f6c03182cff9edabd9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"_EM_333_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAsUpgUu9bSCE\", \"type\":\"group\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yHCeQ\", \"checksum\":\"Lqab7X4rZoFio\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7apw\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d597a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoAB_fA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjX\u008A\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b6a412d88f9cd22f961e8dfd\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UyhR\", \"type\":\"group\", \"_id\":{\"$oid\":\"0fbae7a8a7ed2bffd01a0b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"hHoUQr3hWuFOwT_D\", \"checksum\":\"qoLWkA9Q7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"rsIfMaMpQiq2F\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"9beb1076b8fe2aad6fcb19db\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"U75\", \"checksum\":\"riSqOVZxC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"nhZZLC4u3fFl4\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b503c45deae28e104e45dc5a\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_944_XYZ_\", \"checksum\":\"zOnI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"TS4cq3XOgZFSXOv\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"0c23b589e91ac5dfe3f52a3e\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"R\", \"checksum\":\"TvrbfI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"XeW\", \"type\":\"settings\", \"_id\":{\"$oid\":\"c53a8d26ad1e9775df907241\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"fiG\", \"checksum\":\"u\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"tztQEgmQzgzpK_Px\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"7e3df0e4ca7a65e9bfbfa84f\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"jSBYAN0X60F\", \"checksum\":\"zRcrRziX8\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"oAaBLhrmo7TPMm1_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"e8b2b738e9cf076603b8c66d\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_26_XYZ_")
                .get(baseUrlOfSut + "/api/sessions/_EM_1006_XYZ_/group/query?" + 
                    "field=_EM_23_XYZ_&" + 
                    "value=E0OGh6O2dcH")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_44_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"_EM_932_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_933_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_934_XYZ_\", \"checksum\":\"_EM_935_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_936_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"47acd6e6de3282efeadeaad8\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"bA1ubpAgVJHLm2z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUbCCU\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_703_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_704_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"c031398dbd1602bce02e687b\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"]5M_705UXYZU\", \"checksum\":\"MyhV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPuY8IjXzJ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"b7a213d78e9dc31f971e8c0f\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"_EM_706_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"MyhV\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"00cae7a9b7de1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_707_XYZ_\", \"checksum\":\"ev7fCFB\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"11299a89c32c026f1dcf3e98\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"ZLsCUvwm67moHMk2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f707\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/H/custom_data/query?" + 
                    "field=_EM_420_XYZ_&" + 
                    "value=_EM_29_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_45_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"_EM_418_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_1048_XYZ_\", \"checksum\":\"bA1ubpAgVJHLm2z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_1049_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"36e503e20eef30c5883bdb5b\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"Lqbb7X4rZoFi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tMi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjXz\", \"type\":\"group\", \"_id\":{\"$oid\":\"b79213c88eace32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_1050_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"00cae7a9a7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zu\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"UUrU\", \"checksum\":\"ZLsCUvwm67moHMk2z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"778cd3a8404eb59717f9f707\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/H/genomic_chart/query?" + 
                    "field=_EUUU22UUYUU&" + 
                    "value=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_46_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"_EM_418_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_2670_XYZ_\", \"checksum\":\"bA1ubpAgVJHLm2z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUbCCUu\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"Lqab7X4rZoFi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjXz\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79213c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_2664_XYZ_\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"MygV\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"01cbe69ab6ed1ae0c0090a1e\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zu\", \"checksum\":\"Uv7fCBC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_2665_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"ZLsCUvwm67moHMk2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_2671_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f707\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"DdNhEcl\", \"checksum\":\"Dz\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"uGDHHKBEGvaK\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"acb91e3312c32a9bc2f5e3f5\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"KDm0C\", \"checksum\":\"aWPdh2ix2FKqZFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Q4KR_wVG5\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"5ae970bfc2ebdbf0a1ef8afe\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/75Ky9A/comparison_session/query?" + 
                    "field=_EM_23_XYZ_&" + 
                    "value=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_47_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"_EM_418_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"_EM_2999_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUfCCU\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"Q_6i8AcY\", \"checksum\":\"_EM_3789_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce15f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tMv\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mUUeYUIjXU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"00cae7a9b7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zu\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Ps8KyBjjfrFOiT3l\", \"checksum\":\"_EM_3790_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3791_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"bbc8d60b8525fadcde8afdeb\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"82P\", \"checksum\":\"Nrnezpu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"J9rf7Z3WPN\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"9eb6a841d3f2250e17c0a1ff\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_3793_XYZ_/custom_data/query?" + 
                    "field=_EM_23_XYZ_&" + 
                    "value=_EM_24_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_48_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"_EM_418_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"_EM_2999_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUfCCU\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"Q_6i8AcY\", \"checksum\":\"_EM_3789_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce15f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tMv\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mUUeYUIjXU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"00cae7a9b7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zu\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Ps8KyBjjfrFOiT3l\", \"checksum\":\"_EM_3790_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3791_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"bbc8d60b8525fadcde8afdeb\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"82P\", \"checksum\":\"Nrnezpu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"J9rf7Z3WPN\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"9eb6a841d3f2250e17c0a1ff\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/MyhV/group/query?" + 
                    "field=_EM_420_XYZ_&" + 
                    "value=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_49_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG07\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ae6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"1grSD1dHe98be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"w74Zp6e\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3930_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"36e6f302eeee31c58939eb5a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_3931_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"d0413a9bce05f1abe13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_3932_XYZ_\", \"checksum\":\"_EM_3933_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UUeYUIjXU9\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TP\", \"checksum\":\"i93yr:VPXe3Sxmez\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UQhV\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCF?\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"2139aa79f32bf18f0edd3da9\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"UU7JUa=XzAGB\", \"checksum\":\"UKZUOvs\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Jn\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f2e66336c2d34a4644f18d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"_EM_3934_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"7acf5a81eff0cae3bd8c49ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"\", \"checksum\":\"K\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3935_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"5bc64fafc1abf4f84bafec8c\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_4716_XYZ_\", \"checksum\":\"428\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"jan1ebtlFQYRH4\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"33589a2f70cffd76c4fcdbcf\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/MyhV/virtual_study/query?" + 
                    "field=_EM_420_XYZ_4&" + 
                    "value=_EM_29_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_50_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG07\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ae6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"1grSD1dHe98be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_4032_XYZ_\", \"checksum\":\"w74Zp6e\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"uJNtbERphrT\", \"type\":\"group\", \"_id\":{\"$oid\":\"36e6f302eeee31c58939eb5a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_3931_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"d0413a9bce05f1abe13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_3932_XYZ_\", \"checksum\":\"_EM_3933_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UUeYUIjXU9\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"c78413d89eadd42fa72e7cee\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TP\", \"checksum\":\"i93yr:VPXe3Sxmez\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UQhV\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_4033_XYZ_\", \"checksum\":\"_EM_4110_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"lG7JSaAXzAOB\", \"checksum\":\"_EM_4111_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Io\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f3e66337c2d24b4634008d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"_EM_3934_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"7acf5a81eff0cae3bd8c49ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_4034_XYZ_\", \"checksum\":\"Km\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"VZh3b22vPRsp\", \"type\":\"settings\", \"_id\":{\"$oid\":\"5bc64fa0c2abf3e84baeec7c\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"k_\", \"checksum\":\"42\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"jan1ebtlFQYRH4i\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"33589a2f70cffd76c4fcdbcf\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\":euA5Xdr\", \"checksum\":\"miQMxk7bChfZC8gp\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Z148RG\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"c4b5e39ef3f936e4142b58f8\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"j6\", \"checksum\":\"QJ_djLTFvRa4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"bezAMm9f1cc\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d7c9cb0b358bdd639df6ef8f\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_4112_XYZ_/custom_gene_list/query?" + 
                    "field=_EM_23_XYZ_&" + 
                    "value=9vDY1SrjEGVEn8I")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_51_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "settings")
                .d("{\"id\":\"is436pnMifbdq5i\", \"checksum\":\"_EM_66_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"6olyJ3DBPWYGZ\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"c0eddf677b1dd7aeccbeface\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"NcK\", \"checksum\":\"jFUUQULLk0hbkQFi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UEMUUUUUUZU\", \"type\":\"settings\", \"_id\":{\"$oid\":\"6859c48ba02b08cac9fbbe9f\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/_EM_0_XYZ_/settings/query?" + 
                    "field=_EM_68_XYZ_&" + 
                    "value=U")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_52_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"1grSD1dHe98be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"_EM_2999_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"lAs]UgWUUfCCU\", \"type\":\"group\", \"_id\":{\"$oid\":\"36e6f302eeee41c58939eb5a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_3702_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UUeYUIjXU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"lG7JSaAXzAOB\", \"checksum\":\"AKZDOsU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Io\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f2e66336c2d34a4644f18d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_6000_XYZ_\", \"checksum\":\"XTa7mrKhpsZ0gRT\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"6adf5981eff0cad2bd9d59ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"\", \"checksum\":\"AA9WkYl1qM_T\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"9yqiuS1YbkW\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"6adf7bcc78dcce13d7c12d0a\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"fFoxfloXFhdohVsU\", \"checksum\":\"IWwG\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"4\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"1e5e1caf5c9aa41bbb8dd783\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/mcPeY8IjXz/virtual_study/query?" + 
                    "field=_EM_6002_XYZ_&" + 
                    "value=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_53_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG07\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ae6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"1grSD1dHe18be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"U\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_4280_XYZ_\", \"checksum\":\"w74Zp6a\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"group\", \"_id\":{\"$oid\":\"35e6f3f2fedf30c58a39eb59\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_3931_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"d0413a9bce05f1abe13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"WSDnq1JXfw8\", \"checksum\":\"_EM_3933_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UMeYUIjXU9\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d68313d89eaee42fa82c6bfd\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TP\", \"checksum\":\"i93yr:VPXe3Sxmez\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_4161_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_4033_XYZ_\", \"checksum\":\"_EM_4110_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"lG7JSaAXzAOB\", \"checksum\":\"_EM_4111_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Io\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f3e66337c2d24b4634008d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"_EM_3934_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"7acf5a81eff0cae3bd8c49ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_4034_XYZ_\", \"checksum\":\"Km\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"VZh3b22vPRsp\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5bc54fa1c39af2e84baeec6c\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"k_\", \"checksum\":\"42\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"jan1ebtlFQYRH4i\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"33589a2f70cffd76c4fcdbcf\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\":euA5Xdr\", \"checksum\":\"miQMxk7bChfZC8gp\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Z147RG\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"c4b5e39ef3f936e4142b58f8\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"j6\", \"checksum\":\"QJ_djLTFvRa48\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"bezAMm9f1cc\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d7c9cb0b358bdd639df6ef8f\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_4112_XYZ_/custom_gene_list/query?" + 
                    "field=_EM_23_XYZ_&" + 
                    "value=9vDY1SrjEGVEn8I")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_54_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_4473_XYZ_\", \"checksum\":\"O\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG07\", \"type\":\"group\", \"_id\":{\"$oid\":\"d1b666eac476ae6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"1grSD1dHe98be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"U\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_4032_XYZ_\", \"checksum\":\"w74Zp6e\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"uJNtbERhhrT\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"36f6f3f20edf30c57b49ec59\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_UMU3971_UYX_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Rn24rmPT\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"d0413a9bce05f1abe13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"WSDnq1JXfw8\", \"checksum\":\"_EM_3933_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UMeYUIjXU9\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d68313d89eaee42fa82d6bfd\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_4474_XYZ_\", \"checksum\":\"i93yr:VPXe3Sxmez\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_4161_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_4033_XYZ_\", \"checksum\":\"_EM_4110_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"lG7JSaAXzAOB\", \"checksum\":\"_EM_4111_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Io\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f3e66337c2d24b4634008d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"_EM_3934_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"7acf5a81eff0cae3bd8c49ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_4034_XYZ_\", \"checksum\":\"_EM_4475_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"VZh3b22vPRsp\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5bc54fa1c39af2e84baeec6c\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"k_\", \"checksum\":\"42\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"jan1ebtlFQYRH4i\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"33589a2f70cffd76c4fcdbcf\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\":euA5Xdr\", \"checksum\":\"miQMxk7bChfZC8gp\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Z147RG\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"c4b5e39ef3f936e4142b58f8\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"j6\", \"checksum\":\"QJ_djLTFvRa4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"bezAMm9f1cc\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d7c9cb0b358bdd639df6ef8f\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/EM_tainted_map/custom_gene_list/query?" + 
                    "field=class&" + 
                    "value=9vDY1SrjEGVEn8I")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_55_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG07\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ae6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"SZ\", \"checksum\":\"1grSD1dHe98be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UV\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"57cbe7f6be2182dff9debada\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_4032_XYZ_\", \"checksum\":\"w74Zp6e\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"uJNtbERphrT\", \"type\":\"group\", \"_id\":{\"$oid\":\"35e6f3f2fedf30c58a39eb59\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_3931_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"d0413a9bce05f1abe13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"WSDnq1JXfw8\", \"checksum\":\"_EM_3933_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UMeYUIjXU9\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d68313d89eaee42fa82d6bfd\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TP\", \"checksum\":\"i93yr:VPXe3Sxmez\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_4161_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_4033_XYZ_\", \"checksum\":\"_EM_4110_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_4415_XYZ_\", \"checksum\":\"_EM_4111_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"IoN\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f3e76337c2d24b4634008d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"_EM_3934_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"7acf5a81eff0cae3bd8c49ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_4034_XYZ_\", \"checksum\":\"Km\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"VZh3b22vPRsp\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5bc54fa1c39af2e84baeec6c\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"k_\", \"checksum\":\"42\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"jan1ebtlFQYRH4i\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"33589a2f70cffd76c4fcdbcf\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\":euA5Xd\", \"checksum\":\"miQMxk7bChfZC8gpz\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Z147SG\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"c4b5e39ef3f936e4142b58f8\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"j6\", \"checksum\":\"QJ_djLTFvRa4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"bezAMm9f1cc\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c6c8cb0b267cdd639de6ef9f\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/UQhV/custom_gene_list/query?" + 
                    "field=checksum&" + 
                    "value=")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_56_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG07\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ae6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"1grSD1dHe98be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_4032_XYZ_\", \"checksum\":\"w74Zp6e\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"uJNtbERphrT\", \"type\":\"group\", \"_id\":{\"$oid\":\"36e6f302eeee31c58939eb5a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_7\", \"checksum\":\"_EM_3931_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"d0413a9bce05f1abe13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_4274_XYZ_\", \"checksum\":\"y\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UUeYUIjXU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"c78413d89eadd42fa72e7cee\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TPa\", \"checksum\":\"i93yr:VPXe3Sxmez\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"WYUU\", \"type\":\"settings\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_4033_XYZ_\", \"checksum\":\"qkj6k\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_WnmyoG\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"lG7JSaAXz?OB\", \"checksum\":\"AKZDOts\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Io\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"21f2f75326c2d34a4753f19e\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"_EM_3934_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfa\", \"type\":\"settings\", \"_id\":{\"$oid\":\"7acf5a81eff0cae3bd8c49ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_4034_XYZ_\", \"checksum\":\"K\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"VZh3b22vPRsp\", \"type\":\"settings\", \"_id\":{\"$oid\":\"5bc64fa0c2abf3e84baeec7c\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"k_\", \"checksum\":\"42\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"jan1ebtlFQYRH4i\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"33589a2f70cffd76c4fcdbcf\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"2euA5Xdr\", \"checksum\":\"miQMxk7bChfZC8gps\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Z148RG\", \"type\":\"settings\", \"_id\":{\"$oid\":\"c4b6d49f03f926f4032c69e9\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"j6\", \"checksum\":\"QJ_djLTFvRa4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"bezAMm9f1cc\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d7c9cb0b358bdd639df6ef8f\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_3936_XYZ_/custom_gene_list/query?" + 
                    "field=_EM_23_XYZ_&" + 
                    "value=9vDY1SrjEGVEn8I")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_57_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"_EM_4553_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG07\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d1b666eac476ae6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"Sv\", \"checksum\":\"1grSD1dHe98be9\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"V\", \"type\":\"group\", \"_id\":{\"$oid\":\"56baf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_4032_XYZ_\", \"checksum\":\"w74Zp6e\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"uJNtbERphrT\", \"type\":\"group\", \"_id\":{\"$oid\":\"35e6f3f2fedf30c58a39eb59\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_4551_XYZ_\", \"checksum\":\"_EM_3931_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"e0302b8bcef5019be13d697b\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"WSDnq1JXfw8\", \"checksum\":\"_EM_3933_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_4552_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d59314e8aeaee42ea71d6cfd\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TP\", \"checksum\":\"i93yr:VPXe3Sxmez\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_4161_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"7uXfNnupYdbP7zi\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_4033_XYZ_\", \"checksum\":\"_EM_4110_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"687cd2a9404eb59626f9f507\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"lG7JSaAXzAOBK\", \"checksum\":\"_EM_4111_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Io\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f3e66337c2d24b4634008d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"7acf5a81eff0cae3bd8c49ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_4034_XYZ_\", \"checksum\":\"Km\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"VZh3b22vPRsp\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5bc54fa1c39af2e84baeec6c\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"k_\", \"checksum\":\"42i\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"jan1ebtlFQYRH4i\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"3248ab1f60cefe76d4fdcbc0\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\":euA5Xdr\", \"checksum\":\"miQMxk7bChfZC8gp\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Z147RG\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"c4b5e39ef3f936e4142b58f8\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"j6\", \"checksum\":\"QJ_djLTFvRa4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"bezAMm9f1cc\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7c9cb0b358bdd639df6ef8f\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/aiU/custom_gene_list/query?" + 
                    "field=_EM_23_XYZ_&" + 
                    "value=9vDY1SrjEGVEn8I")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_58_getOnSessionWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/_EM_118_XYZ_/EVOMASTER?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/_EM_118_XYZ_/EVOMASTER"));
    }
    
    
    @Test(timeout = 60000)
    public void test_59_postOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_14_XYZ_")
                .contentType("application/json")
                .body(" _EM_13_XYZ_ ")
                .post(baseUrlOfSut + "/api/sessions/ONT2C9krK/EVOMASTER?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/ONT2C9krK/EVOMASTER"));
    }
    
    
    @Test(timeout = 60000)
    public void test_60_putOnSessionWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"6s51p6OoBB3J8L\" ")
                .put(baseUrlOfSut + "/api/sessions/_EM_15_XYZ_/EVOMASTER/_EM_16_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/_EM_15_XYZ_/EVOMASTER/_EM_16_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_61_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "settings")
                .d("{\"id\":\"_3kzp0nKh\", \"checksum\":\"K7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"lG\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"cc7fb2f8300408982b6be5d2\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"uG\", \"checksum\":\"1QV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"xJvpOT\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ae6e0859ded6f539f5091edd\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_112_XYZ_\", \"checksum\":\"HjarNInXePVuTDB\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"dEjQ4\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"47e659b58593eca9dbab0b5e\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"SIsGVSA\", \"checksum\":\"u2hXzc\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"ubsNUIQn\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"79dce80f0bd39d4cba3f89ff\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_113_XYZ_/EVOMASTER/query")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/_EM_113_XYZ_/EVOMASTER/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_62_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"1grSD1dHe98be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"_EM_2999_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"lAs]VgWUUfCCU\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"36e6f302eeee41c58939eb5a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"zVQv1\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UUeYUIjXU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"A8RDcr\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"lG7JSaAXzAOB\", \"checksum\":\"AKZDOts\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Io\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f2e66336c2d34a4644f18d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"XTa7mrKhpsZ0gRT\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"group\", \"_id\":{\"$oid\":\"6adf5981eff0cad2bd9d59ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"\", \"checksum\":\"AA9WkYl1qM_T\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"9yqiuS1YbkW\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"6adf7bcc78dcce13d7c12d0a\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"fFoxfloXFhdohVsU\", \"checksum\":\"IWwG\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"4\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"1e5e1caf5c9aa41bbb8dd783\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/K/group/:KQ%5CoA45Oh;")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_63_postOnFetchWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "group")
                .d("{\"id\":\"ltXpm\", \"checksum\":\"uuOiaq3\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"zF3GrJWo\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"dfbf5f433eaffdaabe91c14b\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_3551_XYZ_\", \"checksum\":\"laIa\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"ad6YNujaVD5\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"965d3dfe7cf108c5be1a83aa\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query/fetch'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/R2IP%5CUndw168m1/main_session/query/fetch")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_64_putOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG07\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ae6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"SZ\", \"checksum\":\"1grSD1dHe98be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UV\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"57cbe7f6be2182dff9debada\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_4032_XYZ_\", \"checksum\":\"w74Zp6e\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"uJNtbERphrT\", \"type\":\"group\", \"_id\":{\"$oid\":\"35e6f3f2fedf30c58a39eb59\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_3931_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"d0413a9bce05f1abe13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"WSDnq1JXfw8\", \"checksum\":\"_EM_3933_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UMeYUIjXU9\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d68313d89eaee42fa82d6bfd\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TP\", \"checksum\":\"i93yr:VPXe3Sxmez\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_4161_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_4033_XYZ_\", \"checksum\":\"_EM_4110_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_4415_XYZ_\", \"checksum\":\"_EM_4111_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"IoN\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f3e76337c2d24b4634008d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"_EM_3934_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"7acf5a81eff0cae3bd8c49ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_4034_XYZ_\", \"checksum\":\"Km\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"VZh3b22vPRsp\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5bc54fa1c39af2e84baeec6c\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"k_\", \"checksum\":\"42\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"jan1ebtlFQYRH4i\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"33589a2f70cffd76c4fcdbcf\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\":euA5Xd\", \"checksum\":\"miQMxk7bChfZC8gpz\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Z147SG\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"c4b5e39ef3f936e4142b58f8\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"j6\", \"checksum\":\"QJ_djLTFvRa4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"bezAMm9f1cc\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c6c8cb0b267cdd639de6ef9f\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"ldoZbfe93mzXy7\" ")
                .put(baseUrlOfSut + "/api/sessions/FWUA/genomic_chart/ldo%5Cdfe93mzXy7iI")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_65_deleteOnSessionWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/_EM_766_XYZ_/EVOMASTER/_EM_767_XYZ_?EMextraParam123=_EM_768_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/_EM_766_XYZ_/EVOMASTER/_EM_767_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_66_deleteOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"TuBpWUUiUvh3U\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d2b565ebb485ad7b89338a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_943_XYZ_\", \"checksum\":\"eRlLZHcxnn\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Kl\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"56cb06f6c03182cff9edabd9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"IP0\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAsUpgUu9bSCE\", \"type\":\"group\", \"_id\":{\"$oid\":\"46c6e4f1effe31a6883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yHCeQ\", \"checksum\":\"Lqab7X4rZoFio\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7apw\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d0403a9bce05f1ace13d597a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoAB_fA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjX\u008A\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b6a412d88f9cd22f961e8dfd\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UyhR\", \"type\":\"group\", \"_id\":{\"$oid\":\"0fbae7a8a7ed2bffd01a0b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"hHoUQr3hWuFOwT_D\", \"checksum\":\"qoLWkA9Q7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"rsIfMaMpRiq2F\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"9beb1f66b8ee1abd6fbb09eb\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"U75\", \"checksum\":\"riSqOVZxC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"nhZZLC4u3fFl4\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b503c45deae28e104e45dc5a\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_944_XYZ_\", \"checksum\":\"zOnI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"TS4cq3XOgZFSXOv\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"0c23b589e91ac5dfe3f52a3e\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"R\", \"checksum\":\"TvrbfI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_1971_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"c53a8d26ad1e9775df907241\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/st/custom_gene_list/%5C?" + 
                    "field=Sy&" + 
                    "value=LcV")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_67_postOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"i\", \"checksum\":\"R\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X1rO0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"e1b766d9c4759e6a89237a27\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"U\", \"checksum\":\"_EM_418_XYZ_w\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"settings\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_3045_XYZ_\", \"checksum\":\"2r7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUfCCU\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"Lqab7X4rZoFi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOqABafA_\", \"checksum\":\"hacSI5lwX1tMv\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mUUeYUIjXU\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_3224_XYZ_\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"f0dbe6a9b6fe1bf0ce191b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zu\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjag\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"p2Mn0az\", \"checksum\":\"P\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Itl3fNg9c[HLXUxB\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"97f6892edae6bb5ca50a599e\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_3042_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"C3kd98FVR\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ad5bdde4e8cfc1da8c3d7e1b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" _EM_3225_XYZ_ ")
                .post(baseUrlOfSut + "/api/sessions/_EM_3225_XYZ_/genomic_chart")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/_EM_3225_XYZ_/genomic_chart"));
    }
    
    
    @Test(timeout = 60000)
    public void test_68_postOnFetchWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query/fetch'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"gxKJOcQN\" ")
                .post(baseUrlOfSut + "/api/sessions/Go1rnfMZ/main_session/query/fetch?field=_EM_4808_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/Go1rnfMZ/main_session/query/fetch"));
    }
    
    
    @Test(timeout = 60000)
    public void test_69_postOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"_EM_418_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_2670_XYZ_\", \"checksum\":\"bA1ubpAgVJHLm2z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUbCCUu\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"Lqab7X4rZoFi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjXz\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79213c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_2664_XYZ_\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"MygV\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"01cbe69ab6ed1ae0c0090a1e\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zu\", \"checksum\":\"Uv7fCBC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_2665_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"ZLsCUvwm67moHMk2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_2671_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f707\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"DdNhEcl\", \"checksum\":\"Dz\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"uGDHHKBEGvaK\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"acb91e3312c32a9bc2f5e3f5\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"KDm0C\", \"checksum\":\"aWPdh2ix2FKqZFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Q4KR_wVG5\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"5ae970bfc2ebdbf0a1ef8afe\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" custom_data ")
                .post(baseUrlOfSut + "/api/sessions/custom_data/group")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/custom_data/group"));
    }
    
    
    @Test(timeout = 60000)
    public void test_70_postOnFetchWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query/fetch'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"wXdziF4g2\" ")
                .post(baseUrlOfSut + "/api/sessions/YkalPVjOe59GeBcd/EVOMASTER/query/fetch")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/YkalPVjOe59GeBcd/EVOMASTER/query/fetch"));
    }
    
    
    @Test(timeout = 60000)
    public void test_71_postOnFetchWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query/fetch'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"qjrkA5jKR\" ")
                .post(baseUrlOfSut + "/api/sessions/qdDvDuYGO0_u/comparison_session/query/fetch?" + 
                    "field=_EM_2317_XYZ_&" + 
                    "value=_EM_2318_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/qdDvDuYGO0_u/comparison_session/query/fetch"));
    }
    
    
    @Test(timeout = 60000)
    public void test_72_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"B_\", \"checksum\":\"_EM_1664_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG01\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eab476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_363_XYZ_\", \"checksum\":\"EM_tainted_map\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"settings\", \"_id\":{\"$oid\":\"56bbf6f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"bA1ubpAgVJHLm2z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAsUpgUu9bSCE\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_1665_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d0413a9bce06f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjXz\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79213c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"MyhV\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"0fbae7a8a7ed2bffd01a0b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_1666_XYZ_\", \"checksum\":\"_EM_1667_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m7BY9QZ6q\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"663cf7fecc3abc50b3b8a417\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"OUh1UovlUgiCUD\", \"checksum\":\"gKjUyMGuvj\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Lo08Q0kq93y8_m6\", \"type\":\"settings\", \"_id\":{\"$oid\":\"521adf0c9e4ba2ffb7bfaffc\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"5bzBUb\", \"checksum\":\"yqKXFPNecqm_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Mw2NByQNtvZ2_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"77f6975f46da9caa8b16ba03\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_1668_XYZ_\", \"checksum\":\"s0l7HwxjDklu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"ClvJSfN\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"c43cbdbbf0db6dc72c5dffdf\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_26_XYZ_")
                .get(baseUrlOfSut + "/api/sessions/75Ky9Ap/custom_data/query?" + 
                    "field=%24binary&" + 
                    "value=&" + 
                    "EMextraParam123=_EM_25_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/75Ky9Ap/custom_data/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_73_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"_EM_932_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_933_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_934_XYZ_\", \"checksum\":\"_EM_935_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_936_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"47acd6e6de3282efeadeaad8\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"bA1ubpAgVJHLm2z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUbCCU\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_703_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_704_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"c031398dbd1602bce02e687b\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"]5M_705UXYZU\", \"checksum\":\"MyhV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPuY8IjXzJ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"b7a213d78e9dc31f971e8c0f\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"_EM_706_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"MyhV\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"00cae7a9b7de1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_707_XYZ_\", \"checksum\":\"ev7fCFB\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"11299a89c32c026f1dcf3e98\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"ZLsCUvwm67moHMk2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f707\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_26_XYZ_")
                .get(baseUrlOfSut + "/api/sessions/7%5CcN4A/custom_data/query?" + 
                    "field=%24numberDouble&" + 
                    "value=3wy8L5Sw_%29PEq_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_74_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0j\", \"type\":\"group\", \"_id\":{\"$oid\":\"d1b666eab476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_363_XYZ_\", \"checksum\":\"EM_tainted_map\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"settings\", \"_id\":{\"$oid\":\"56bbf6f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"bA1ubpAgVJHLm2z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAsUpgUu9bSCE\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"LqUb7UUrUUFi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d0413a9bce05f1ade13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjXz\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79213c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"MyhV\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"0fbae7a8a7ed2bffd01a0b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zs6ei\", \"checksum\":\"iCI8qMZ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m7BY9QZ6q\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"673df6ffcb3bab40b2c8b308\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"O3h1_ovl_giCyD\", \"checksum\":\"_EM_2353_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_2354_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"521adf0c9e4ba2ffc7bfaffc\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"5bzBUb\", \"checksum\":\"yqKXFPNecqm_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Mw2NByQNtvZ2_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"77f6975f46da9caa8b16ba03\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_2355_XYZ_\", \"checksum\":\"s0l7HwxDklu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"ClvJchN\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"c43cceabf1eb6ec83d6dffde\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/75Ky9Ap/custom_gene_list/query?" + 
                    "field=%24code&" + 
                    "value=wYL7Evhwj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/75Ky9Ap/custom_gene_list/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_75_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d1b666eab476ad6b79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_363_XYZ_\", \"checksum\":\"MM_tainted_map\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"56ba05e7ce3092dff9eeb9e9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_2357_XYZ_\", \"checksum\":\"bA1ubpAgVJHLm2z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAsUpgUu9bSCE\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_2358_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d0412a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjXz\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"c68213b79dacd32fa61f8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"MyhV\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"0fbae7a8a7ed2bffd01a0b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zs6ei\", \"checksum\":\"iCI8qMZ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m7BY9QZ6q\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"673df6ffcb3bab40b2c8b308\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"O3h1_ovl_giCyDi\", \"checksum\":\"_EM_2359_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Lo08Q0kq93y8_m\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"521adf0c9e4ba2ffb7bf9ffc\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"5bzBUb\", \"checksum\":\"yqKXFPNecqm_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Mw2NByQNtvZ4_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"87f6975f47da9cab7a16cb02\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Vja_TnFfvU\", \"checksum\":\"s0l7HwxDklu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"DlvJcfN\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"c43cbdbbf0db6dc72c5dffd0\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/75Ky9Ap/custom_gene_list/query?" + 
                    "field=%24uuid&" + 
                    "value=wYL7Evhwj")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/75Ky9Ap/custom_gene_list/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_76_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_2721_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"SX\", \"checksum\":\"N9yHrqw0A\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_2722_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56ba0807cf2191cf0adfbad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"bA1ubpAgVJHLm2z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUbCCU\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"Lqab7X4rZoFi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjXz\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79213c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_2723_XYZ_\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"MyhV\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"f0cae799a6dd1beece181b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zu\", \"checksum\":\"_EM_2724_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"2WdPfwFkSWg\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"ZLsCUvwm67moHMk2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f707\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/75Ky9A/comparison_session/query?" + 
                    "field=%24regex&" + 
                    "value=_EM_24_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/75Ky9A/comparison_session/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_77_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_3044_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X1rO0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"e1b766d9c4769e6a89237a27\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"U\", \"checksum\":\"_EM_418_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"settings\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_3045_XYZ_\", \"checksum\":\"2r7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUfCCU\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"Lb060i\", \"checksum\":\"Lqab7X4jZoFi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3236_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"c0423a9bcd16f2ace14d6a8a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_3237_XYZ_\", \"checksum\":\"hacSI5lwX1tMv\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mUUeYUIjXU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"00cae7a9b7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zu\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"p2Mn0az7\", \"checksum\":\"P\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Itl3fNg9c[HLXUxB\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"97f6892edae6bb5ca50a599e\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"SZ5Z\", \"checksum\":\"a\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"C3kd98FVR\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ad5bdde4e8cfc1da8c3d7e1b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/%3F5Ky8U/group/query?" + 
                    "field=%24type&" + 
                    "value=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/%3F5Ky8U/group/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_78_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_3044_XYZ_\", \"checksum\":\"z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X1rO0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"e1b766d9c4769e6a89237a27\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"U\", \"checksum\":\"_EM_418_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"settings\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"EJ4usW4leLDS5\", \"checksum\":\"2r7G\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UUVMUfCCY\", \"type\":\"group\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"Lqab7X4rZoFi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tMv\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mUUeYUIjXU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"00cae7a9b7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zu\", \"checksum\":\"dv7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"2WdPfwFkSWg\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"p2Mn0az\", \"checksum\":\"U\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Itl3fNg9c[HLXUxB\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"97f6892edae6bb5ca50a599e\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_3042_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"C3kd98FVR\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ad5bdde4e8cfc1da8c3d7e1b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/75Ky9A/genomic_chart/query?" + 
                    "field=%24regularExpression&" + 
                    "value=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/75Ky9A/genomic_chart/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_79_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG07\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ae6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"SZ\", \"checksum\":\"1grSD1dHe98be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UV\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"57cbe7f6be2182dff9debada\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_4032_XYZ_\", \"checksum\":\"w74Zp6e\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"uJNtbERphrT\", \"type\":\"group\", \"_id\":{\"$oid\":\"35e6f3f2fedf30c58a39eb59\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_3931_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"d0413a9bce05f1abe13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"WSDnq1JXfw8\", \"checksum\":\"_EM_3933_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UMeYUIjXU9\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d68313d89eaee42fa82d6bfd\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TP\", \"checksum\":\"i93yr:VPXe3Sxmez\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_4161_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_4033_XYZ_\", \"checksum\":\"_EM_4110_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_4415_XYZ_\", \"checksum\":\"_EM_4111_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"IoN\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f3e76337c2d24b4634008d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"_EM_3934_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"7acf5a81eff0cae3bd8c49ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_4034_XYZ_\", \"checksum\":\"Km\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"VZh3b22vPRsp\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5bc54fa1c39af2e84baeec6c\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"k_\", \"checksum\":\"42\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"jan1ebtlFQYRH4i\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"33589a2f70cffd76c4fcdbcf\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\":euA5Xd\", \"checksum\":\"miQMxk7bChfZC8gpz\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Z147SG\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"c4b5e39ef3f936e4142b58f8\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"j6\", \"checksum\":\"QJ_djLTFvRa4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"bezAMm9f1cc\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c6c8cb0b267cdd639de6ef9f\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/mcPeY8IjXz/EVOMASTER/query?" + 
                    "field=_EM_420_XYZ_4&" + 
                    "value=_EM_4416_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/mcPeY8IjXz/EVOMASTER/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_80_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"i\", \"checksum\":\"R\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X1rO0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"e1b766d9c4759e6a89237a27\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"U\", \"checksum\":\"_EM_418_XYZ_w\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"settings\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_3045_XYZ_\", \"checksum\":\"2r7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUfCCU\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"Lqab7X4rZoFi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOqABafA_\", \"checksum\":\"hacSI5lwX1tMv\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mUUeYUIjXU\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_3224_XYZ_\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"f0dbe6a9b6fe1bf0ce191b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zu\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjag\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"p2Mn0az\", \"checksum\":\"P\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Itl3fNg9c[HLXUxB\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"97f6892edae6bb5ca50a599e\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_3042_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"C3kd98FVR\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ad5bdde4e8cfc1da8c3d7e1b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/mcPeY8IjXz/group/query?" + 
                    "field=%24timestamp&" + 
                    "value=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/mcPeY8IjXz/group/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_81_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "settings")
                .d("{\"id\":\"is436pnMifbdq5i\", \"checksum\":\"DwYI7_stqrR\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_89_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"c0eddf677b1dd7aeccceface\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"NcKm\", \"checksum\":\"jFUUQULKk0hbkQFi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UEMUUUUUUZU\", \"type\":\"settings\", \"_id\":{\"$oid\":\"6859c48ba02b08cac9fbbe9f\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/MsgKM9IadLCEMqm/virtual_study/query?" + 
                    "field=%24maxKey&" + 
                    "value=S")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/MsgKM9IadLCEMqm/virtual_study/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_82_getOnQueryWithQueryParamsReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG07\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ae6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"1grSD1dHe98be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"U\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_4032_XYZ_\", \"checksum\":\"w74Zp6e\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"uJNtbERphrT\", \"type\":\"group\", \"_id\":{\"$oid\":\"35e6f3f2fedf30c58a39eb59\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_3931_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"d0413a9bce05f1abe13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"WSDnq1JXfw8\", \"checksum\":\"_EM_3933_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UMeYUIjXU9\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d68313d89eaee42fa82d6bfd\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TP\", \"checksum\":\"i93yr:VPXe3Sxmez\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_4161_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_4033_XYZ_\", \"checksum\":\"_EM_4110_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"lG7JSa?XzAOB\", \"checksum\":\"_EM_4111_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Iq\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"32e3e66337c2d25b4634008d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"_FMa2934_TYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"group\", \"_id\":{\"$oid\":\"7acf5a81dff0cae3bd8c49ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_4034_XYZ_\", \"checksum\":\"Km\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"VZh3b22vPRsp\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5bc54fa1c39af2e84baeec6c\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"k_\", \"checksum\":\"42\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"jan1ebtlFQYRH4i\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"33589a2f70cffd76c4fcdbcf\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\":euA5Xdr\", \"checksum\":\"miQMxk7bChfZC8gp\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Z147RG\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"c4b5e39ef3f936e4142b58f8\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"j6\", \"checksum\":\"QJ_djLTFvRa4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"bezAMm9f1cc\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d7c9cb0b358bdd639df6ef8f\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_4112_XYZ_/custom_gene_list/query?" + 
                    "field=%24numberDecimal&" + 
                    "value=9vDY1SrjEGVEn8I")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/_EM_4112_XYZ_/custom_gene_list/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_83_getOnSessionWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_329_XYZ_")
                .get(baseUrlOfSut + "/api/sessions/_EM_328_XYZ_/custom_gene_list/TMsAoqhr1hBRtZFl?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_328_XYZ_/custom_gene_list/TMsAoqhr1hBRtZFl"));
    }
    
    
    @Test(timeout = 60000)
    public void test_84_putOnSessionWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_49_XYZ_")
                .contentType("application/json")
                .body(" \"_EM_48_XYZ_\" ")
                .put(baseUrlOfSut + "/api/sessions/sArGz/custom_gene_list/_EM_47_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/sArGz/custom_gene_list/_EM_47_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_85_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "settings")
                .d("{\"id\":\"_3kzp0nKh\", \"checksum\":\"K7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"l\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"cc7fb2f8300408982b6be5d2\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"uG\", \"checksum\":\"1QV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"xJvpOT\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ae6e0859ded6f549f5091edd\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/kfIsWqCbPlnmD/virtual_study/_EM_42_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/kfIsWqCbPlnmD/virtual_study/_EM_42_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_86_putOnSessionWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" _lYPm02fiZG ")
                .put(baseUrlOfSut + "/api/sessions/ht_UXh/main_session/_lYPm02fiZG")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/ht_UXh/main_session/_lYPm02fiZG"));
    }
    
    
    @Test(timeout = 60000)
    public void test_87_getOnSessionWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_178_XYZ_")
                .get(baseUrlOfSut + "/api/sessions/_EM_175_XYZ_/comparison_session/_EM_176_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_175_XYZ_/comparison_session/_EM_176_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_88_putOnSessionWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"u5\" ")
                .put(baseUrlOfSut + "/api/sessions/_EM_247_XYZ_/custom_data/u5?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_247_XYZ_/custom_data/u5"));
    }
    
    
    @Test(timeout = 60000)
    public void test_89_getOnSessionWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/7xLB7HRPan/custom_data/_EM_757_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/7xLB7HRPan/custom_data/_EM_757_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_90_putOnSessionWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" \"_EM_368_XYZ_\" ")
                .put(baseUrlOfSut + "/api/sessions/_EM_366_XYZ_/group/_EM_367_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_366_XYZ_/group/_EM_367_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_91_putOnSessionWithQueryParamReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" _EM_1065_XYZ_ ")
                .put(baseUrlOfSut + "/api/sessions/_EM_1064_XYZ_/comparison_session/y8udcxvkgbwvYS6Q?EMextraParam123=_EM_1066_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_1064_XYZ_/comparison_session/y8udcxvkgbwvYS6Q"));
    }
    
    
    @Test(timeout = 60000)
    public void test_92_deleteOnSessionWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 404 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_409_XYZ_")
                .delete(baseUrlOfSut + "/api/sessions/fp3bF32pCf9GA/custom_data/DjotLpirLTG4s?EMextraParam123=_EM_1461_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/fp3bF32pCf9GA/custom_data/DjotLpirLTG4s"));
    }
    
    
    @Test(timeout = 60000)
    public void test_93_putOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"_EM_4553_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG07\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d1b666eac476ae6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"Sv\", \"checksum\":\"1grSD1dHe98be9\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"V\", \"type\":\"group\", \"_id\":{\"$oid\":\"56baf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_4032_XYZ_\", \"checksum\":\"w74Zp6e\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"uJNtbERphrT\", \"type\":\"group\", \"_id\":{\"$oid\":\"35e6f3f2fedf30c58a39eb59\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_4551_XYZ_\", \"checksum\":\"_EM_3931_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"e0302b8bcef5019be13d697b\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"WSDnq1JXfw8\", \"checksum\":\"_EM_3933_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_4552_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d59314e8aeaee42ea71d6cfd\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TP\", \"checksum\":\"i93yr:VPXe3Sxmez\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_4161_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"7uXfNnupYdbP7zi\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_4033_XYZ_\", \"checksum\":\"_EM_4110_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"687cd2a9404eb59626f9f507\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"lG7JSaAXzAOBK\", \"checksum\":\"_EM_4111_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Io\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f3e66337c2d24b4634008d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"7acf5a81eff0cae3bd8c49ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_4034_XYZ_\", \"checksum\":\"Km\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"VZh3b22vPRsp\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5bc54fa1c39af2e84baeec6c\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"k_\", \"checksum\":\"42i\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"jan1ebtlFQYRH4i\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"3248ab1f60cefe76d4fdcbc0\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\":euA5Xdr\", \"checksum\":\"miQMxk7bChfZC8gp\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Z147RG\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"c4b5e39ef3f936e4142b58f8\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"j6\", \"checksum\":\"QJ_djLTFvRa4\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"bezAMm9f1cc\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7c9cb0b358bdd639df6ef8f\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"ldoZbfe93mzXy7i\" ")
                .put(baseUrlOfSut + "/api/sessions/FWUA/genomic_chart/_EM_4554_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/FWUA/genomic_chart/_EM_4554_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_94_deleteOnSessionWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 404 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "9fLjJMMQh0LYaOP")
                .delete(baseUrlOfSut + "/api/sessions/rsIfMaMpRiq2F/virtual_study/_EM_990_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/rsIfMaMpRiq2F/virtual_study/_EM_990_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_95_deleteOnSessionWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 404 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "69")
                .delete(baseUrlOfSut + "/api/sessions/7w2qta8v0F/genomic_chart/_EM_1000_XYZ_?" + 
                    "field=AY&" + 
                    "value=_EM_1002_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/7w2qta8v0F/genomic_chart/_EM_1000_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_96_deleteOnSessionWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 404 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/l/custom_gene_list/_EM_2333_XYZ_?field=_EM_2334_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/l/custom_gene_list/_EM_2333_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_97_deleteOnSessionWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 404 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/twfiM/main_session/L_NA?value=t4s")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/twfiM/main_session/L_NA"));
    }
    
    
    @Test(timeout = 60000)
    public void test_98_deleteOnSessionWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 404 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/_EM_860_XYZ_/group/TbksKo7xel?" + 
                    "EMextraParam123=_EM_861_XYZ_&" + 
                    "field=6gJzHhNM")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_860_XYZ_/group/TbksKo7xel"));
    }
    
    
    @Test(timeout = 60000)
    public void test_99_deleteOnSessionWithQueryParamsReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 404 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/_EM_1143_XYZ_/settings/_EM_1144_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_1143_XYZ_/settings/_EM_1144_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_100_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"_EM_418_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"_EM_2999_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUfCCU\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"Q_6i8AcY\", \"checksum\":\"_EM_3789_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce15f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tMv\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mUUeYUIjXU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"00cae7a9b7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zu\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Ps8KyBjjfrFOiT3l\", \"checksum\":\"_EM_3790_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3791_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"bbc8d60b8525fadcde8afdeb\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"82P\", \"checksum\":\"Nrnezpu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"J9rf7Z3WPN\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"9eb6a841d3f2250e17c0a1ff\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/K/genomic_chart/_EM_3792_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/K/genomic_chart/_EM_3792_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_101_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3985_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"d1b676e9c475ad6a7a458b28\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"1grSD1dHe98be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"55baf6f6cf3191eff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"jtYXSpD8Ic8Qa0\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"lAs]UgWUUfCCU\", \"type\":\"group\", \"_id\":{\"$oid\":\"46f5f4f2fefe30c58938eb5a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_3702_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UEM_3703_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UUeYUIjXU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"CovrQPV\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"lK7JSaAXU?UB\", \"checksum\":\"_EM_3986_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Uo\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f2e66336c2d34a4644f18d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"XTa7mrKhpsZ0gRT\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfarK\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"6adf5981eff0cad2bd9d599d\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"\", \"checksum\":\"AA9WkYl1qM_T\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"9yqiuS1YbkW\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"6adf7bcc78dcce13d7c12d0a\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"fFoxfloXFhdohVsU\", \"checksum\":\"_EM_3982_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"<\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"1e5e1caf5c9aa41bbb8dd783\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/K/group/SsGWchU7aD")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/K/group/SsGWchU7aD"));
    }
    
    
    @Test(timeout = 60000)
    public void test_102_putOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG07\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ae6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"1grSD1dHe18be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"U\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_4280_XYZ_\", \"checksum\":\"w74Zp6a\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"group\", \"_id\":{\"$oid\":\"35e6f3f2fedf30c58a39eb59\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"`EM_3U4_XYZ_\", \"checksum\":\"_EM_3931_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"d0413a9bce05f1abe13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"WSDnq1JXfw8u\", \"checksum\":\"_EM_3933_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_5755_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d68313d89eaee42fa82c6bfd\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5756_XYZ_\", \"checksum\":\"i9UxrUVPUe3TUmcz\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_4161_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"l6Dg7ia8EHQM\", \"checksum\":\"Cm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Unmyo\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"668be3b7504ec69617eae617\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"lG7JSaAXzAOB\", \"checksum\":\"_EM_4111_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Io\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f3e66337c2d24b4634008d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"GgkC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"7acf5a81eff0cae3bd8c49ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_4034_XYZ_\", \"checksum\":\"Km\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"VZh3b22vPRsp\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"5bc54fa1c39af2e84baeec6c\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"k_\", \"checksum\":\"42\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"jan1ebtlFQYRH4i\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"33589a2f70cffd76c4fcdbcf\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\":euA5Xdr\", \"checksum\":\"miQMxk7bChfZC8gp\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Z147RG\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"c4b5e39df30935e4241b68f8\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"j6\", \"checksum\":\"QJ_djLTFvRa48\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"bezAMm9f1cc\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"d7c9cb0b358bdd639df6ef8f\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"ldoZbfe93mzXy7i\" ")
                .put(baseUrlOfSut + "/api/sessions/UUWI/genomic_chart/lc63qx80vzW_zZa")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/UUWI/genomic_chart/lc63qx80vzW_zZa"));
    }
    
    
    @Test(timeout = 60000)
    public void test_103_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"1grSD1dHe98be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"_EM_2999_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"lAs]UgWUUfCCU\", \"type\":\"group\", \"_id\":{\"$oid\":\"36e6f302eeee41c58939eb5a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_3702_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UUeYUIjXU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH_\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"10cae799b7ee1befce290b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"lG7JSaAXzAOB\", \"checksum\":\"AKZDOts\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Io\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f2e66336c2d34a4644f18d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"XTa7mrKhpsZ0gRT\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"group\", \"_id\":{\"$oid\":\"6adf5981eff0cad2bd9d59ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"\", \"checksum\":\"AA9WkYl1qM_T\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"9yqiuS1YbkW\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"6adf7bcc78dcce13d7c12d0a\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"fFoxfloXFhdohVsU\", \"checksum\":\"IWwG\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"4\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"1e5e1caf5c9aa41bbb8dd783\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/K/group/_EM_6033_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/K/group/_EM_6033_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_104_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"1grSD1dHe98be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"_EM_2999_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"lAs]UgWUUfCCU\", \"type\":\"group\", \"_id\":{\"$oid\":\"36e6f302eeee41c58939eb5a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_3702_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UUeYUIjXU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"00cae799b7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"lG7HSaAXzAOB\", \"checksum\":\"AKZDOts\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Iq\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f2d66346c2d3394644f18d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"XTa7mrKhpsZ0gRT\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"group\", \"_id\":{\"$oid\":\"6adf5981eff0cad2bd9d59ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"C\", \"checksum\":\"AA9WlYk1qK_T\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_6146_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"6adf7bcc78dcce13d7c12d0a\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"fFoxfloXFhdohVsU\", \"checksum\":\"IWwG\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"4\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"1e5e1caf5c9aa41bbb8dd783\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/K/group/_EM_6147_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/K/group/_EM_6147_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_105_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ad6a69347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"S\", \"checksum\":\"1grSD1dHe98be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVyBusNN3Kd\", \"checksum\":\"_EM_2999_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"lAs]UgWUUfCCU\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"35e6e302deee41c58949eb59\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_3702_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UUeYUIjXU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5308_XYZ_\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"01c9e899b6ee2beedf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev;fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"2WdPfwFgSUU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gnbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wlmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"pUUJSaAXzAO@\", \"checksum\":\"AKZDOts\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Io\", \"type\":\"group\", \"_id\":{\"$oid\":\"22f2e65346c2d35a4644028d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_5309_XYZ_\", \"checksum\":\"XTa7mrKhpsZ0gRT\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"group\", \"_id\":{\"$oid\":\"6ade5981fff0cad1ae9d59ae\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5311_XYZ_\", \"checksum\":\"AA9WkYl1qM_T\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"9yqiuS1YbkW\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"6adf7bcc78dcce13d7c12d0a\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"fFoxfloXFhdohVsU\", \"checksum\":\"IWwG\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"4\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"1e5e1caf5c9aa41bbb8dd783\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"Dp5xemrXmL0L2vYH\", \"checksum\":\"Xm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Ruzj01\", \"type\":\"group\", \"_id\":{\"$oid\":\"ab7af05add0ca35d90caac39\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"Yv\", \"checksum\":\"2zLGhQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"iM\", \"type\":\"settings\", \"_id\":{\"$oid\":\"edeb13f33095bb1aa18aa6e0\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/X9rG0/main_session/_EM_5310_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/X9rG0/main_session/_EM_5310_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_106_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d1b666eac476ad6a79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_5126_XYZ_\", \"checksum\":\"1grSD1dHe98be\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_5127_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"_EM_2999_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"lAs]UgWUUfCCU\", \"type\":\"group\", \"_id\":{\"$oid\":\"36e6f302eeee41c58939eb5a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_3702_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3703_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m5UUeYUIjXU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_5129_XYZ_\", \"checksum\":\"68r\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhVy\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"00cae799b7ee1be0cf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3704_XYZ_\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"lG7JSaAXzAOB\", \"checksum\":\"AKZDOts\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Io\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"22f2e66336c2d34a4644f18d\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Hx7SPhlUdG\", \"checksum\":\"XTa7mrKhpsZ0gRT\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"RhBMuzrKfar\", \"type\":\"group\", \"_id\":{\"$oid\":\"6adf5981eff0cad2bd9d59ad\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"\", \"checksum\":\"AA9WkYl1qM_T\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"9yqiuS1YbkW\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"6adf7bcc78dcce13d7c12d0a\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"fFoxfloXFjdohVsU\", \"checksum\":\"IYwG\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"4\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"1e5e1caf5c9aa41bbb8dd783\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"\", \"checksum\":\"ooZErINhXH_qXDd\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"D8Psk0Z\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"31a20d5c93f99acfabdb4b0b\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"_EM_5130_XYZ_\", \"checksum\":\"dhGanKeg53YP8\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"oUcH\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"62bdf9d43fe386b3eccf8428\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/PQqt/settings/zBF00sgNuEX6As")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/PQqt/settings/zBF00sgNuEX6As"));
    }
    
    
    @Test(timeout = 60000)
    public void test_107_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_362_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d1b666eab476ad6b79347a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_363_XYZ_\", \"checksum\":\"MM_tainted_map\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"56ba05e7ce3092dff9eeb9e9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_2357_XYZ_\", \"checksum\":\"bA1ubpAgVJHLm2z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAsUpgUu9bSCE\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"_EM_2358_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d0412a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjXz\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"c68213b79dacd32fa61f8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"MyhV\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"0fbae7a8a7ed2bffd01a0b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zs6ei\", \"checksum\":\"iCI8qMZ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"m7BY9QZ6q\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"673df6ffcb3bab40b2c8b308\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"O3h1_ovl_giCyDi\", \"checksum\":\"_EM_2359_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Lo08Q0kq93y8_m\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"521adf0c9e4ba2ffb7bf9ffc\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"5bzBUb\", \"checksum\":\"yqKXFPNecqm_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Mw2NByQNtvZ4_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"87f6975f47da9cab7a16cb02\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Vja_TnFfvU\", \"checksum\":\"s0l7HwxDklu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"DlvJcfN\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"c43cbdbbf0db6dc72c5dffd0\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/PQy/group/_EM_973_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/PQy/group/_EM_973_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_108_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_3044_XYZ_\", \"checksum\":\"x\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X1rO2\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"e1a866d9d5768e7a89237926\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"U\", \"checksum\":\"_EM_418_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"settings\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_3045_XYZ_\", \"checksum\":\"2r7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUfCCU\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_3123_XYZ_\", \"checksum\":\"_EM_3124_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7apE\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoABafA_\", \"checksum\":\"hacSI5lwX1tMv\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mUUeYUIjXU\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VMuhzwRL3TH\", \"checksum\":\"gT2z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"00cae7a9b7ee1befcf190b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zu\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"p2Mn0az\", \"checksum\":\"Py\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Itl3fNg9c[HLXUxB\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"96f6892edae6bb5ca50a599e\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_3042_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"C3kd98FVR\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ad5bdde4e8cfc1da8c3d7e1b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/X9rG0/group/_EM_3043_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/X9rG0/group/_EM_3043_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_109_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"i\", \"checksum\":\"R\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X1rO0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"e1b766d9c4759e6a89237a27\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"U\", \"checksum\":\"_EM_418_XYZ_w\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"K\", \"type\":\"settings\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_3045_XYZ_\", \"checksum\":\"2r7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUfCCU\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"Lqab7X4rZoFi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7ap\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOqABafA_\", \"checksum\":\"hacSI5lwX1tMv\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mUUeYUIjXU\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"b79313c88eacd32f972e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_3224_XYZ_\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"settings\", \"_id\":{\"$oid\":\"f0dbe6a9b6fe1bf0ce191b0d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"zu\", \"checksum\":\"ev7fCFC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_419_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123aaa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjag\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"p2Mn0az\", \"checksum\":\"P\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Itl3fNg9c[HLXUxB\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"97f6892edae6bb5ca50a599e\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_3042_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"C3kd98FVR\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ad5bdde4e8cfc1da8c3d7e1b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/K/genomic_chart/_EM_3043_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/K/genomic_chart/_EM_3043_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_110_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"BIdO7DRy\", \"checksum\":\"R\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"XUsPU\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"e1b666dac475ad6a79347917\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"SA\", \"checksum\":\"_EM_418_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_3417_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"56bbf7f6cf3182dff9debad9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"_EM_3420_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAs]UgWUUfCCU\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"36d6e3f2f0ef41b5873aca5a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_364_XYZ_\", \"checksum\":\"Lqab7X4rZoFix\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7apu\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"d0413a9bce15f1ace13d697a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_3421_XYZ_\", \"checksum\":\"UiUUI5lwX5tUv\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mUUeYUIjXUy\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"b79313c88eacd320872e8cfe\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"_EM_3000_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UUhV\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"f0cad7a9b7ee1beebe190b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3418_XYZ_\", \"checksum\":\"Uv5UCFU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"_EM_U19_XUZU\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"123baa79e32cf18ffedd3da8\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Gjbg\", \"checksum\":\"_EM_3001_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"02_Wnmyo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"778cd3a8404eb59617f9f607\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"p:Mn0az\", \"checksum\":\"L\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Itl3fNg9c[HLXUxB\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"97f6892edae6bb5ca50a599e\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_3042_XYZ_\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"C3kd98FVR\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ad5bdde4e8cfc1da8c3d7e1b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/X9rG0/group/_EM_3043_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/X9rG0/group/_EM_3043_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_111_getOnSessionWithQueryParamReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"TuBpWdnimvh3Y\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"X9rG0\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"d2b565ebb485ad7b89338a18\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_943_XYZ_\", \"checksum\":\"eRlLZHcxnn\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"Kl\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"56cb06f6c03182cff9edabd9\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"MQVuBusNN3Kd\", \"checksum\":\"_EM_333_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"pAsUpgUu9bSCE\", \"type\":\"group\", \"_id\":{\"$oid\":\"36d6f3f2ffff41b5883adb6a\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yHCeQ\", \"checksum\":\"Lqab7X4rZoFio\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"O91aPE9jBpY7apw\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d0413a9bce05f1ace13d597a\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"8JnPOoAB_fA_\", \"checksum\":\"hacSI5lwX1tM\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"mcPeY8IjX\u008A\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b6a412d88f9cd22f961e8dfd\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"UQ4VKuhzwRL3TH\", \"checksum\":\"ojndl45W8fDu43d\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"UyhR\", \"type\":\"group\", \"_id\":{\"$oid\":\"0fbae7a8a7ed2bffd01a0b0c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"hHoUQr3hWuFOwT_D\", \"checksum\":\"qoLWkA9Q7\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"rsIfMaMpRiq2F\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"9beb1f66b8ee1abd6fbb09eb\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"U75\", \"checksum\":\"riSqOVZxC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"nhZZLC4u3fFl4\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"b503c45deae28e104e45dc5a\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_944_XYZ_\", \"checksum\":\"zOnI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"TS4cq3XOgZFSXOv\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"0c23b589e91ac5dfe3f52a3e\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"R\", \"checksum\":\"TvrbfI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_18_XYZ_\"\n                    }, \"source\":\"XeW\", \"type\":\"settings\", \"_id\":{\"$oid\":\"c53a8d26ad1e9775df907241\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_22_XYZ_/genomic_chart/_EM_945_XYZ_?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_22_XYZ_/genomic_chart/_EM_945_XYZ_"));
    }


}
