import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-06T22:10:20.792-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 11 tests
 * <br>
*  Covered targets: 33
 * <br>
*  Used time: 0h 10m 1s
 * <br>
*  Needed budget for current results: 64%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.org.graphqlscs.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_queryOnText2TxtReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { text2Txt  (word1 : \\\"dBeaoiTDSCeioJg\\\",word2 : null,word3 : \\\"2\\Oj,UW6Ie\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_1_queryOnCostfunsReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { costfuns  (i : 804,s : \\\"k5HkMCJ\\6qgf5z\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_2_queryOnPatReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { pat  (txt : \\\"bs$C\\\",pat : \\\"yRe6CBsCm5X\\c\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_3_queryOnOrdered4ReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { ordered4  (w : \\\"NQvjKP\\q2RDPy\\\",x : null,z : \\\"_EM_113_XYZ_\\\",y : \\\"_EM_114_XYZ_\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_4_queryOnCookieReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { cookie  (name : \\\"userid\\\",val : \\\"4jZXdi\\\",site : \\\"GP7\\M8\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_5_queryOnDateParseReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { dateParse  (dayname : \\\"t\\2U98Iig\\\",monthname : \\\"jun\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_6_queryOnRegexReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { regex  (txt : \\\"9A\\GY\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_7_queryOnCalcReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { calc  (op : \\\"hJWjapc\\g\\\",arg1 : 0.02461397,arg2 : null)         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_8_queryOnFileSuffixReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { fileSuffix  (directory : \\\"7u\\\\\",file : \\\"cIWqY3p\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_9_queryOnTitleReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { title  (sex : \\\"Hh\\kNK5\\\",title : \\\"lGuMODZK23xdWL\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_10_queryOnNotyPevarReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" {\"query\" : \"  { notyPevar  (i : 213,s : \\\"mHUA\\UUU\\\")         } \",\"variables\":null} ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
