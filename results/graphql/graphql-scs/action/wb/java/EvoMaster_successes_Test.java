import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-06T22:10:20.785-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 10 tests
 * <br>
*  Covered targets: 30
 * <br>
*  Used time: 0h 10m 1s
 * <br>
*  Needed budget for current results: 64%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.graphqlscs.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_queryOnText2TxtReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { text2Txt  (word1 : \\\"see\\\",word2 : \\\"_EM_467_XYZ_\\\",word3 : \\\"_EM_2905_XYZ_\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'text2Txt'", containsString(""));
    }
    
    
    @Test(timeout = 60000)
    public void test_1_queryOnCostfunsReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { costfuns  (s : \\\"\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'costfuns'", containsString("10"));
    }
    
    
    @Test(timeout = 60000)
    public void test_2_queryOnPatReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { pat  (txt : \\\"_EM_615_XYZ_\\\",pat : \\\"QAsCmh\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'pat'", containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_3_queryOnOrdered4ReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { ordered4  (w : \\\"_EM_33095_XYZ_\\\",x : \\\"_EM_33096_XYZ_\\\",z : \\\"_EM_33097_XYZ_\\\",y : \\\"Aa6MCT\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'ordered4'", containsString("unordered"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4_queryOnCookieReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { cookie  (name : \\\"2Jfg1rx7c2\\\",val : \\\"j8mqSCKYiTDYS\\\",site : \\\"9vG3TVYzx9I\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'cookie'", containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_5_queryOnDateParseReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { dateParse  (dayname : \\\"_EM_2680_XYZ_\\\",monthname : \\\"jun\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'dateParse'", containsString("6"));
    }
    
    
    @Test(timeout = 60000)
    public void test_6_queryOnRegexReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { regex  (txt : \\\"http//:d/y\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'regex'", containsString("url"));
    }
    
    
    @Test(timeout = 60000)
    public void test_7_queryOnCalcReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { calc  (op : \\\"sqrt\\\",arg1 : 0.8341406,arg2 : 0.49930117)         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'calc'", containsString("0.913312980308503"));
    }
    
    
    @Test(timeout = 60000)
    public void test_8_queryOnFileSuffixReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { fileSuffix  (directory : \\\"acrobat\\\",file : \\\"_EM_23272_XYZ_\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'fileSuffix'", containsString("0"));
    }
    
    
    @Test(timeout = 60000)
    public void test_9_queryOnTitleReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { title  (sex : \\\"female\\\",title : \\\"Â‚_99PwuHu\\\")         } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'title'", containsString("-1"));
    }


}
