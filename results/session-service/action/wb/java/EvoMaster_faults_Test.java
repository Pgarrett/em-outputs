import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.mongo.dsl.MongoDsl.mongo;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.MongoInsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-03T15:55:06.397-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 100 tests
 * <br>
*  Covered targets: 504
 * <br>
*  Used time: 0h 15m 9s
 * <br>
*  Needed budget for current results: 98%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.cbioportal.session_service.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_getOnSessionShowsFaults_100_200UsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"3BHIAY9z2\", \"checksum\":\"_EM_5832_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMn\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1870dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"OjsWkg8BQ_Tx\", \"checksum\":\"ZVQQrUbxyw\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dbf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJ`\", \"checksum\":\"_EM_5833_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5834_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fbf10bbce841365bfa7e8a75\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_UNU147U_UYZ_\", \"checksum\":\"_EM_5835_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"settings\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"Tuc47Uc\", \"checksum\":\"c19oiQDIjQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"gVVL1qVK9\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"f63c9d2d615a27bd76a1e015\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HT21\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"7ad1f5c08beb3aed596a6d17\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5836_XYZ_\", \"checksum\":\"ToS9ensnY4aNoLR\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ih0e9dtvZjRoGis\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"0d5536991a2f5f94ac4a427f\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"pG2K59QNu0tR\", \"checksum\":\"hz\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"TbMMnGBdL_9IZa2\", \"type\":\"group\", \"_id\":{\"$oid\":\"fbec909adcacfb409ecf8e8d\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault100. HTTP Status 500. framework_code GET:/api/sessions/{source}/{type}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Response status 500 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/Q;BCWfzfS9Opt/virtual_study")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/Q;BCWfzfS9Opt/virtual_study"));
    }
    
    
    @Test(timeout = 60000)
    public void test_1_deleteOnSessionShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. framework_code DELETE:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/kpq4QPpk/custom_data/_FM_;3D00_XJ%5B%5B?" + 
                    "field=c_Oa29k0d_&" + 
                    "value=LQG")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/kpq4QPpk/custom_data/_FM_;3D00_XJ%5B%5B"));
    }
    
    
    @Test(timeout = 60000)
    public void test_2_deleteOnSessionShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. framework_code DELETE:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/kpq4QPpk/settings/_FM_i3D;0_XJ%5B%5B?" + 
                    "field=c_Oa29k0d&" + 
                    "value=LPH")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/kpq4QPpk/settings/_FM_i3D;0_XJ%5B%5B"));
    }
    
    
    @Test(timeout = 60000)
    public void test_3_deleteOnSessionShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. framework_code DELETE:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/kro4SUUk/virtual_study/_EM_i4D;0_XJ%5B%5B?" + 
                    "field=c_Oa29k2d&" + 
                    "value=K")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/kro4SUUk/virtual_study/_EM_i4D;0_XJ%5B%5B"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4_deleteOnSessionShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. framework_code DELETE:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/_EM_14947_XYZ_/custom_gene_list/7VY;ur?" + 
                    "field=w&" + 
                    "value=vWa%3ARLZ%3CC")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/_EM_14947_XYZ_/custom_gene_list/7VY;ur"));
    }
    
    
    @Test(timeout = 60000)
    public void test_5_postOnSessionShowsFaults_100_200UsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_6671_XYZ\", \"checksum\":\"_EM_6672_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMnJ\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"2\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6939_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_j\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ca706a1ae801aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yUtjiDnsfwsCrv_p\", \"checksum\":\"g19oiQDIjQw\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6937_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"f43d8b4f615a15cd75afd216\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"UU2U\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6940_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ddbd3de178baf9ee6d77e4c9\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"1eiWbVLwo\", \"checksum\":\"UJk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"b1193ad0108d1ada8bbf7cd5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"i13yWD\", \"checksum\":\"61d5yyc0Al\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_qt6OYro_adzK6cm\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bb9be2dc8a47c5c7abf7c4e1\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bw\", \"checksum\":\"JwH\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"F6u0a3dND2AG\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"f0cdcdd3fa625254cbd07cfe\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault100. HTTP Status 500. framework_code POST:/api/sessions/{source}/{type}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 500 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" _EM_6942_XYZ_ ")
                .post(baseUrlOfSut + "/api/sessions/%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22EM_tainted_map%22:%22_EM_6675_XYZ_%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D/settings")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22EM_tainted_map%22:%22_EM_6675_XYZ_%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D/settings"));
    }
    
    
    @Test(timeout = 60000)
    public void test_6_getOnSessionShowsFaults_100_200UsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_6671_XYZ\", \"checksum\":\"_EM_6672_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMnJ\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"2\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6939_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"f\", \"checksum\":\"_EM_5756_XYZ_jI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"ca807a0be801aef0360a3c10\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yUtjiDnsfwsCrv_p\", \"checksum\":\"_EM_7033_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6937_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"e44c8b40605b15be74afe206\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"UU2U\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B14\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"89e2f3b18acd28c0596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6940_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ddbd3de178baf9ee6d77e4c9\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"1eiWbVLwo\", \"checksum\":\"UJk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6944_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"b1193ad0108d1ada8bbf7cd5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_6945_XYZ_\", \"checksum\":\"_EM_7034_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_qt6OYro_adzK6cm\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bb9be2dc8a48c5c7abf7c4e1\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bw\", \"checksum\":\"JwH\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"F6u0a3dND2AG\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"f0cdcdd3fa625254cbd07cfe\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault100. HTTP Status 500. framework_code GET:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/a;Mk:943UTYZW/main_session/f53d8c3e615a16bd7690e115")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/a;Mk:943UTYZW/main_session/f53d8c3e615a16bd7690e115"));
    }
    
    
    @Test(timeout = 60000)
    public void test_7_putOnSessionShowsFaults_100_200UsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHIAY9zU\", \"checksum\":\"sE6hr6\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7629_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"j\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d7cee82dcee9c2c2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"3QUUZUUVf\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce75f255beb7f8976\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMU4MJz\", \"checksum\":\"wc2CCL\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7632_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd7690e115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"U\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"NVVI\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"UJk}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ba07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault100. HTTP Status 500. framework_code PUT:/api/sessions/{source}/{type}/{id}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> Response status 500 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_16400_XYZ_\" ")
                .put(baseUrlOfSut + "/api/sessions/09p6KVhl;/custom_data/k%5E?" + 
                    "field=_EM_16401_XYZ&" + 
                    "value=VD1e3o8YTFNpo")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/09p6KVhl;/custom_data/k%5E"));
    }
    
    
    @Test(timeout = 60000)
    public void test_8_getOnQueryShowsFaults_100_200UsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"3BJIIY9z2\", \"checksum\":\"TvjoBYfLFm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMnJa\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"2d55ab0a80c0cecdaca7d3dc\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"OjsWkg:BQ_Tx\", \"checksum\":\"_EM_3054_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"f7dee72dbee9c2d1dcf7952d\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJb\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"l\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fbf1fbbce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_3055_XYZ_\", \"checksum\":\"ebEHwvFvJWZ83u\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_3056_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"ca706a1ae8f1afff37093d01\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault100. HTTP Status 500. framework_code GET:/api/sessions/{source}/{type}/query
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 500 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/nM6Y;1mS/group/query?" + 
                    "field=_EM_231_XYZ_&" + 
                    "value=_EM_232_XYZ_")
                .then()
                .statusCode(500)// framework_code
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/nM6Y;1mS/group/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_9_postOnSessionShowsFaults_100_200() throws Exception {
        
        // Fault100. HTTP Status 500. org/cbioportal/session_service/domain/Session_74_setData POST:/api/sessions/{source}/{type}
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 500 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" \"_EM_11_XYZ_\" ")
                .post(baseUrlOfSut + "/api/sessions/_EM_10_XYZ_/group")
                .then()
                .statusCode(500)// org/cbioportal/session_service/domain/Session_74_setData
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/_EM_10_XYZ_/group"));
    }
    
    
    @Test(timeout = 60000)
    public void test_10_getOnQueryShowsFaults_100_200UsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHIAY9zU\", \"checksum\":\"TvnoBYfLEm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMn\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_4459_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"Tuc47Uc\", \"checksum\":\"g19oiQDIjQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"gVVL1qVK9\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"f63c9d2d615a27bd76a1e015\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"8ad2f4b19bcd29de595b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5359_XYZ_\", \"checksum\":\"RJi}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ca07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault100. HTTP Status 500. org/cbioportal/session_service/domain/internal/SessionRepositoryImpl_104_findBySourceAndTypeAndQuery GET:/api/sessions/{source}/{type}/query
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 500 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/nM6YK1mS/custom_gene_list/query?" + 
                    "field=_%24RESTRICTED_TYPES&" + 
                    "value=_EM_232_XYZ_")
                .then()
                .statusCode(500)// org/cbioportal/session_service/domain/internal/SessionRepositoryImpl_104_findBySourceAndTypeAndQuery
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'path'", containsString("/api/sessions/nM6YK1mS/custom_gene_list/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_11_getOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_191_XYZ_")
                .get(baseUrlOfSut + "/api/sessions/_EM_190_XYZ_/custom_gene_list")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_12_getOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/_EM_88_XYZ_/main_session?EMextraParam123=_EM_89_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_13_getOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_690_XYZ_")
                .get(baseUrlOfSut + "/api/sessions/_EM_689_XYZ_/custom_data?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_14_getOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/1lxtIJM1PP/comparison_session?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_15_getOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/XdW69S3dFcua/settings")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_16_postOnFetchReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"EM_tainted_map\": \"_EM_9_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/sessions/MVw/genomic_chart/query/fetch?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_17_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"D8YuGmshcHoMswQ9\", \"checksum\":\"H58Cj\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_1065_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"09a5394c5bd3aee0d65a6da1\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"r6VS\", \"checksum\":\"_EM_1066_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"7EgjZMMo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"bbd55f9d3415fad2b5f0742e\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_8_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"EM_tainted_map\": \"_EM_9_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/sessions/MVw/group/query/fetch")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_18_postOnFetchReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_8_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"EM_tainted_map\": \"_EM_9_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/sessions/MVgs/custom_gene_list/query/fetch?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_19_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"D8YuGmshcHoMswQ9\", \"checksum\":\"H58Cj\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"QYb_WiiS7dkf\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"0aa5394c5bd3aee0d65a6da1\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"r6VS\", \"checksum\":\"_EM_1066_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"7EgjZMMo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"bbd55f9d3415fad2b5f0742e\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"_EM_1203_XYZ_\", \"checksum\":\"9UtcANQ5D\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_1204_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d6547d588af5f25ff6b5face\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"j3mDU8_AoLdWcwJ\", \"checksum\":\"xyCXsF88QfEYlxUt\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"iNlQZ<P5\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"fad73aca2c6c3297e540af86\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"mwx_wPgyi\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_1205_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"023ddfd6766d25a405cfaea9\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"0j9nqwhx2IzC\", \"checksum\":\"jZf4SJxgVS\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"hYCyKelFhKiJjIfg\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"8efa1dd7d5ec2c54c7a0abce\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"EM_tainted_map\": \"_EM_9_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/sessions/MVw/settings/query/fetch?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_20_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"D8YuGmshcHoMswQ9\", \"checksum\":\"H58Cj\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_1065_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"09a5394c5bd3aee0d65a6da1\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"r6VS\", \"checksum\":\"_EM_1066_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"7EgjZMMo\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"bbd55f9d3415fad2b5f0742e\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"\", \"checksum\":\"9UtcANQ5D\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"OccBq5\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"d6547d588af5f25ff6b5face\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"j3mDU8_AoLdWcwJ\", \"checksum\":\"xyCXsF88QfEYlxUt\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"iNlQZ<P5\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"fad73aca2c6c3297e540af86\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"EM_tainted_map\": \"_EM_9_XYZ_\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/sessions/MVw/main_session/query/fetch?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_21_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHI@Y9zU\", \"checksum\":\"TvnoBYfLEm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMn\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1d559b0980dfdedfaca5a4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"u\", \"checksum\":\"_EM_5506_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"UA\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJb\", \"checksum\":\"_EM_5507_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_4459_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"U\", \"checksum\":\"_EM_5356_XYZ_Z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"lSGw0y\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_5360_XYZ_\", \"checksum\":\"U19oiQUJjA\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5508_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"f63c9d2d615a27be76a1e015\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"8ad2f4b19bcd29de595b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"NB8xpo386rKle0\", \"checksum\":\"UJU}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"L\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ca07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_5510_XYZ_/virtual_study")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_22_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHIAY9zU\", \"checksum\":\"TvnoBYfLEm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMn\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_4459_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"Tuc47Uc\", \"checksum\":\"g19oiQDIjQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"gVVL1qVK9\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"f63c9d2d615a27bd76a1e015\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"8ad2f4b19bcd29de595b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee288baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5359_XYZ_\", \"checksum\":\"RJi}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ca07ce4\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"GbII\", \"checksum\":\"ZFY\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"jJSbonL\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"3d7dafa2bfeb3853c5edca21\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"yO6PqBVC8\", \"checksum\":\"mVV_URx2OCs\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ffmBUZ8azN2nr\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ef7b7dcdfd5cea43dca9c536\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_6436_XYZ_/genomic_chart")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_23_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHIAY9zU\", \"checksum\":\"_E=_E781_UYZ`\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMn\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b5db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"_EM_6632_XYZ_U\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"[A\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee72dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_6633_XYZ_\", \"checksum\":\"g19oiQDIjQu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"gVVL1qVK9\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd7690d115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"5YjcbtYao3LyufY\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"nM6YK1mS\", \"type\":\"group\", \"_id\":{\"$oid\":\"ddcc3ff188abf9df6e57d3eb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"UJk}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ba07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/nM6YK1mS/virtual_study")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_24_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UCHUAXUzU\", \"checksum\":\"Hs_f9b\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"pQOO2\", \"type\":\"settings\", \"_id\":{\"$oid\":\"1e559b1970d0dddebc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lZJbU\", \"checksum\":\"_EM_9930_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"aFeqXK5O\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"QMVUJEoU7Ul63\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca606a1be8f2af0e27083d11\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMF6MJzW\", \"checksum\":\"_EM_7631_XYZ_n\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7632_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd7690e115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B10\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"89e2f3b17acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_8345_XYZ_\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"QCBCWfzfS9Op\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"cddd2ef298b909ef6e66e5da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"UJk}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9931_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2abb9ba07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_9932_XYZ_/virtual_study")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_25_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_9810_XYZ_\", \"checksum\":\"_EM_57U1UWYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7629_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b2970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"CD\", \"checksum\":\"Bxne\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z3oEbPBCX\", \"type\":\"settings\", \"_id\":{\"$oid\":\"e7dee92ecff9d2e2dce7963b\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"_EM_9813_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMF6MJz\", \"checksum\":\"_EM_7631_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9816_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"f52c8c3e615916cd7590e015\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"UJku\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9814_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"a10839d2128e2acc9c907ce4\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Jm1j\", \"checksum\":\"9pGD6TCZAK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"erO7D6lu67q\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"5dde6d02b9b855608073a52f\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"VFLzByY9wM\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9815_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"c1ead2e80eae3feb044adb7b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_9817_XYZ_/group")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_26_getOnQueryReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_3_XYZ_")
                .get(baseUrlOfSut + "/api/sessions/K9/main_session/query?" + 
                    "field=_EM_0_XYZ_&" + 
                    "value=_EM_1_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_27_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHIAY9zU\", \"checksum\":\"TvnoBYfLEm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMn\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_5775_XYZ_\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d8dde82ddeeab3e2dbf7a52b\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_4459_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"Tuc47Uc\", \"checksum\":\"_EM_5776_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5777_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"f63c9d2c615a27bd76a1e015\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"_EM_5778_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJC4B1\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"99e2f4b18bbc18dd595b6d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5359_XYZ_\", \"checksum\":\"RJi}o\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183bd1118e2acb9ca07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/nM6YK1mS/genomic_chart/query?" + 
                    "field=_EM_231_XYZ_&" + 
                    "value=UUUU232_XUZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_28_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"3BHIAY9z2\", \"checksum\":\"TvnoBYfLEm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5201_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"3Nca\", \"checksum\":\"ZVQQrUbxywo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dbf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_4459_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"D\", \"checksum\":\"ebEHwvFvJWZ83q\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"O\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"cb706a0ae702aeef38093ef1\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"Tuc47Uc\", \"checksum\":\"g19oiQDIjQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"gVVL1qVK9\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"f63c9d2d615a27bd76a1e015\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HP21\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"8ad1f4b08bdc3aed596a5d17\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"1CYsVHEcYrY\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"TuWz9rEH\", \"checksum\":\"RJiu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"b0182ae0107e1bdcaca07bd4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/nM6YK1mS/custom_gene_list/query?" + 
                    "field=_EM_231_XYZ_&" + 
                    "value=_EM_232_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_29_getOnQueryReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_99_XYZ_/custom_data/query?" + 
                    "field=_EM_100_XYZ_&" + 
                    "value=_EM_101_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_30_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"3BHIAY9z2\", \"checksum\":\"TvnoBYfLEm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMn\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e659b1a70dfcdddcb96c5eb\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_4458_XYZ_\", \"checksum\":\"ZVQQrUbxywo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d7cee82dbee9c2d2dbf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"_EM_5102_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_4459_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"D\", \"checksum\":\"ebEHwvFvJWZ83u\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"O\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"Tuc47Uc\", \"checksum\":\"g19oiQDIjQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"gVVL1qVK9\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"f63c9d2d615a27bd76a1e015\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HP21\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"8ad1f4b08bdc3aed596a5d17\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"1CYsVHEcYrY\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"dUWz9UEH\", \"checksum\":\"RUUU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"M\", \"type\":\"settings\", \"_id\":{\"$oid\":\"b0182ae0107e1bdcaca07bd4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/nM6YK1mS/comparison_session/query?" + 
                    "field=type&" + 
                    "value=_EM_232_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_31_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHIAY9zU\", \"checksum\":\"_EM_5781_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMn\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"aFeqXK5O\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_5782_XYZ_\", \"checksum\":\"g19oiQDIjQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"gVVL1qVK9\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd7690e115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"UJk}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ba07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/nM6YK1mS/virtual_study/query?" + 
                    "field=_EM_231_XYZ_&" + 
                    "value=_EM_232_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_32_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_9810_XYZ_\", \"checksum\":\"_EM_57U1UWYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7629_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b2970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"CD\", \"checksum\":\"Bxne\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z3oEbPBCX\", \"type\":\"settings\", \"_id\":{\"$oid\":\"e7dee92ecff9d2e2dce7963b\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"_EM_9813_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMF6MJz\", \"checksum\":\"_EM_7631_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9816_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"f52c8c3e615916cd7590e015\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"UJku\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9814_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"a10839d2128e2acc9c907ce4\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Jm1j\", \"checksum\":\"9pGD6TCZAK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"erO7D6lu67q\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"5dde6d02b9b855608073a52f\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"VFLzByY9wM\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9815_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"c1ead2e80eae3feb044adb7b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/%60EMU7653_X%5DZ_/genomic_chart/query?" + 
                    "field=_EM_231_XYZ_&" + 
                    "value=_EM_232_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_33_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"vIG\", \"checksum\":\"Wyh9\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_1959_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"a89f9c94bcaf6b9aa7aa39c6\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"ZDYbd\", \"checksum\":\"0_T\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"HfCLwgCxZ70I\", \"type\":\"settings\", \"_id\":{\"$oid\":\"1ab24ac15daf862cc8bee08b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/LrjHW5qifX6/main_session/query?" + 
                    "field=_EM_231_XYZ_&" + 
                    "value=&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_34_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_9884_XYZ_\", \"checksum\":\"_EM_9885_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7629_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"1e459b0970c1ddeecc95a4da\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"UQUUbUbviUU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee8c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_8420_XYZ_\", \"checksum\":\"_EM_7630_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_9886_XYZ_\", \"checksum\":\"QQVUKEoU7Ul63\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca606a1be8f2af0e27083d11\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMF6MJzW\", \"checksum\":\"_EM_7631_XYZ_n\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7632_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd7690e115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"group\", \"_id\":{\"$oid\":\"89d2f2a09add28cf597a5d18\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_8345_XYZ_\", \"checksum\":\"_EM_8421_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"QCBCWfzfS9Opt\", \"type\":\"group\", \"_id\":{\"$oid\":\"cddd2ef298b909ef6e66e5da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"mo92\", \"checksum\":\"_EM_9887_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ba07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_8347_XYZ_/virtual_study/query?" + 
                    "field=_EM_231_XYZ_&" + 
                    "value=_EM_232_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_35_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"SBUIUU9WU\", \"checksum\":\"_EM_5781_XYZ_t\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7629_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"1d569b1970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_9854_XYZ_\", \"checksum\":\"r7K7Xa7bwY7af\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"aFeqXK5O\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"fbf1ebcbe75f255bea7e8a87\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMF6MJz\", \"checksum\":\"UMU`UU31_`YZU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"E2md\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"f53d8d3e615a16bd7690e115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"_EM_9855_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"ddcd3dd079c9f9ce7e77e5ca\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"QCXUNneu\", \"checksum\":\"_EM_9857_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9858_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ba07ce4\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"2MuoH7IsRgi3Y9K\", \"checksum\":\"yBU11UN\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"gqm7WvcSK_wX\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"79edd1c2eae4db8aff8dca33\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"0GzbACn\", \"checksum\":\"8Gb9ya6FiwTWXNy\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"8mg5j03glPGN2\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"cbcc4903cbf2a3bb5fdf768a\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_7633_XYZ_/group/query?" + 
                    "field=class&" + 
                    "value=_EM_232_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_36_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_6671_XYZ\", \"checksum\":\"_EM_6672_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMnJ\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"2\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6939_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"f\", \"checksum\":\"_EM_5756_XYZ_jI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"ca807a0be801aef0360a3c10\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yUtjiDnsfwsCrv_p\", \"checksum\":\"_EM_7033_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6937_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"e44c8b40605b15be74afe206\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"UU2U\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B14\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"89e2f3b18acd28c0596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6940_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ddbd3de178baf9ee6d77e4c9\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"1eiWbVLwo\", \"checksum\":\"UJk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6944_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"b1193ad0108d1ada8bbf7cd5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_6945_XYZ_\", \"checksum\":\"_EM_7034_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_qt6OYro_adzK6cm\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bb9be2dc8a48c5c7abf7c4e1\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bw\", \"checksum\":\"JwH\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"F6u0a3dND2AG\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"f0cdcdd3fa625254cbd07cfe\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_7035_XYZ_/comparison_session/query?" + 
                    "field=_id&" + 
                    "value=jT0mD54y")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_37_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_6671_XYZi\", \"checksum\":\"_EM_6672_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETIdUUUBUUKwUUJ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"1e55ab1970dfdddebc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"2\", \"checksum\":\"ZYUVUebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_8910_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"f\", \"checksum\":\"_EM_5756_XYZ_j\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ca807a0be801aef0360a3c10\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yUtjiDnsfwsCrv_p\", \"checksum\":\"g19oiQDIjQw\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6937_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"f43d8b4f615a15cd75afd216\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_8911_XYZ_\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"group\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6940_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ddbd3de178baf9ee6d77e4c9\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"1eiWbVLwo\", \"checksum\":\"UJkK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6944_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"b1193ad0108d1ada9bbf7cd5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_6945_XYZ_\", \"checksum\":\">1d5yyc0Al\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_qt6OYro_adzK6cm\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bb9be2dc8a47c5c7abf7c4e1\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bw\", \"checksum\":\"JwH\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"F6u0a3dND2AG\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"f0cdcdd3fa625254cbd07cfe\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_6941_XYZ_/comparison_session/query?" + 
                    "field=_class&" + 
                    "value=jT0mD54y")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_38_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHIAY9zU\", \"checksum\":\"_E=_E781_UYZ`\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMn\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b5db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"_EM_6632_XYZ_U\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"[A\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee72dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_6633_XYZ_\", \"checksum\":\"g19oiQDIjQu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"gVVL1qVK9\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd7690d115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"5YjcbtYao3LyufY\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"nM6YK1mS\", \"type\":\"group\", \"_id\":{\"$oid\":\"ddcc3ff188abf9df6e57d3eb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"UJk}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ba07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/nM2YK1m/comparison_session/query?" + 
                    "field=checksum&" + 
                    "value=_EM_232_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_39_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"NaCaqOB\", \"checksum\":\"wVgP\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"RGDA\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"baedfecbdb2eb180adb4b424\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"FWlohvi\", \"checksum\":\"Zn1TJ5n4Ra\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"8fZD1cTl6\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"bba2f4aaad3eaa0de766dceb\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"\", \"checksum\":\"3\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"group\", \"_id\":{\"$oid\":\"a22b3f0be8e9ab4c3becd450\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"Ep9Zs\", \"checksum\":\"73JNsggg\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"XbltCmdY88hrq82c\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"7baee9eb1b9323be1ed5fe4e\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/_EM_230_XYZ_/settings/query?" + 
                    "field=_EM_311_XYZ_&" + 
                    "value=_EM_312_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_40_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_1403_XYZ_\", \"checksum\":\"IPbzI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"khr5s\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"eda5f7ea1ec79929589ae683\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"0\", \"checksum\":\"1DygE\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_1404_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"4ebc83bac1b4415f18fc2ae1\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/sVWLB7bxgka88/comparison_session/query?" + 
                    "field=_EM_231_XYZ_&" + 
                    "value=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_41_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_629_XYZ_\", \"checksum\":\"Wyh9\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"LrjHW5qifX6\", \"type\":\"group\", \"_id\":{\"$oid\":\"a89f9c94bcaf6b9aa6aa39c6\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"ZDYbd\", \"checksum\":\"_EM_630_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"HfCLwgCxZ70I\", \"type\":\"settings\", \"_id\":{\"$oid\":\"1ab24ac15daf862cc8bee08b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Instance type (array) does not match any allowed primitive type (allowed: ["object"])
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/HfCLwgCxZ70I/settings/query?" + 
                    "field=_EM_384_XYZ_&" + 
                    "value=2")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_42_deleteOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/1Btszo/group/E6f%3C%5CR")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_43_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"3BHIAY9z2\", \"checksum\":\"TvnoBYfLEm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMn\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"OUsUUgUUQ_TU\", \"checksum\":\"ZVQQrUbxyw6\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dbf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XH0lYJb\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"l4\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fbf1fbbce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_1472_XYZ_\", \"checksum\":\"ebEHwvFvJWZ83u\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"settings\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"Tuc47Uc\", \"checksum\":\"c19oiQDIjQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"gVVL1qVK9\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"f63c9d2d615a27bd76a1e015\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HT21\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"7ad1f5c08beb3aed596a6d17\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"1CYsVHEcYrY\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"TuWz9rEH\", \"checksum\":\"RJiu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"b0182ae0107e1bdcaca07bd4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/_EM_4360_XYZ_/EVOMASTER/%5CVxL")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_44_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "settings")
                .d("{\"id\":\"AfEfnuXlbwzSiK\", \"checksum\":\"W4SDPAf\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"z\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"6e294dfa7d6a5aba397d4dac\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"vHy9l8q3WpPNo\", \"checksum\":\"Xx2YHPqXS\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Sf0o3y\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"f255e7feca925ad53eefe33b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/UR8%5C/settings")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_45_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"IPbzI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_300_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"edb5e7f90fd6982a58abe693\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"0\", \"checksum\":\"_EM_301_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"sVWLB7bxgka88\", \"type\":\"group\", \"_id\":{\"$oid\":\"4ebc83bac1b4415f18fc2ae1\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query/fetch'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_228_XYZ_\" ")
                .post(baseUrlOfSut + "/api/sessions/Sw9l%5Cm1Sj7/settings/query/fetch")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_46_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UCHUAXUzU\", \"checksum\":\"Hs_f9b\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"pQOO2\", \"type\":\"settings\", \"_id\":{\"$oid\":\"1e559b1970d0dddebc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lZJbU\", \"checksum\":\"_EM_9930_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"aFeqXK5O\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"QMVUJEoU7Ul63\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca606a1be8f2af0e27083d11\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMF6MJzW\", \"checksum\":\"_EM_7631_XYZ_n\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7632_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd7690e115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B10\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"89e2f3b17acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_8345_XYZ_\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"QCBCWfzfS9Op\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"cddd2ef298b909ef6e66e5da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"UJk}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9931_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2abb9ba07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_7634_XYZ_/custom_data/query")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/_EM_7634_XYZ_/custom_data/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_47_postOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHIAY9zU\", \"checksum\":\"_EM_5781_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7629_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"UA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"_EM_7630_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"8\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_11161_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"ca706a1ae8f0aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMF6MJz\", \"checksum\":\"_EM_7631_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7632_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd7690e115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_10993_XYZ_\", \"checksum\":\"UJk}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"4\", \"type\":\"group\", \"_id\":{\"$oid\":\"91183ad0109e1acb9b907de5\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" ISODate ")
                .post(baseUrlOfSut + "/api/sessions/nmr%5CMK/custom_gene_list?value=nmr%5CMK")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_48_putOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHIAY9zU\", \"checksum\":\"_EM_5781_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7629_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"_EM_7630_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_O\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMF6MJz\", \"checksum\":\"_EM_7631_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7632_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd7690e115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"_EM_15632_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"y\", \"type\":\"settings\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ba07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"VD1e3o8YTFNp\" ")
                .put(baseUrlOfSut + "/api/sessions/jGLi%5CxUNZyzi/custom_gene_list/ix?" + 
                    "field=EseF0S1Vv4k8KiG5&" + 
                    "value=VD1e3o8YTFNp")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("text/html");
    }
    
    
    @Test(timeout = 60000)
    public void test_49_postOnFetchReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query/fetch'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"V\" ")
                .post(baseUrlOfSut + "/api/sessions/ffFX1a4Vft3TCb/main_session/query/fetch?field=JWJg4RxJG3SJibz")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/ffFX1a4Vft3TCb/main_session/query/fetch"));
    }
    
    
    @Test(timeout = 60000)
    public void test_50_postOnFetchReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query/fetch'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"hhcEZjl3fyalOc6S\" ")
                .post(baseUrlOfSut + "/api/sessions/tvG1QpPDVXytBr/comparison_session/query/fetch")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/tvG1QpPDVXytBr/comparison_session/query/fetch"));
    }
    
    
    @Test(timeout = 60000)
    public void test_51_postOnFetchReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query/fetch'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1237_XYZ_")
                .contentType("application/json")
                .body(" \"L\" ")
                .post(baseUrlOfSut + "/api/sessions/IqX/virtual_study/query/fetch?field=KFPv7bWRiSkGh0v")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/IqX/virtual_study/query/fetch"));
    }
    
    
    @Test(timeout = 60000)
    public void test_52_postOnFetchReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query/fetch'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "roEG")
                .contentType("application/json")
                .body(" \"_EM_1536_XYZ_\" ")
                .post(baseUrlOfSut + "/api/sessions/PfMH1lYPlpzNjT/settings/query/fetch?" + 
                    "field=_EM_1538_XYZ_&" + 
                    "value=_EM_1539_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/PfMH1lYPlpzNjT/settings/query/fetch"));
    }
    
    
    @Test(timeout = 60000)
    public void test_53_postOnFetchReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query/fetch'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_229_XYZ_")
                .contentType("application/json")
                .body(" \"\" ")
                .post(baseUrlOfSut + "/api/sessions/2oVLiusRq_/custom_data/query/fetch?" + 
                    "EMextraParam123=_EM_2790_XYZ_&" + 
                    "field=_EM_2791_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/2oVLiusRq_/custom_data/query/fetch"));
    }
    
    
    @Test(timeout = 60000)
    public void test_54_getOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/aoBAJdF/EVOMASTER?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/aoBAJdF/EVOMASTER"));
    }
    
    
    @Test(timeout = 60000)
    public void test_55_postOnFetchReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHIAY9zU\", \"checksum\":\"TvnoBYfLEm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMn\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_5775_XYZ_\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d8dde82ddeeab3e2dbf7a52b\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_4459_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"Tuc47Uc\", \"checksum\":\"_EM_5776_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5777_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"f63c9d2c615a27bd76a1e015\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"_EM_5778_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJC4B1\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"99e2f4b18bbc18dd595b6d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5359_XYZ_\", \"checksum\":\"RJi}o\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183bd1118e2acb9ca07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type}/query/fetch -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query/fetch'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"NML\" ")
                .post(baseUrlOfSut + "/api/sessions/M_CiT21-ttEo/EVOMASTER/query/fetch")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/M_CiT21-ttEo/EVOMASTER/query/fetch"));
    }
    
    
    @Test(timeout = 60000)
    public void test_56_deleteOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/tcMSqM8IVsSfUs/EVOMASTER/RAffSfflkgn?" + 
                    "EMextraParam123=_EM_2160_XYZ_&" + 
                    "field=iN2diTRrK62a")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/tcMSqM8IVsSfUs/EVOMASTER/RAffSfflkgn"));
    }
    
    
    @Test(timeout = 60000)
    public void test_57_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_6671_XYZ\", \"checksum\":\"_EM_6672_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMnJ\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"2\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6939_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_j\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ca706a1ae801aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yUtjiDnsfwsCrv_p\", \"checksum\":\"g19oiQDIjQw\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6937_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"f43d8b4f615a15cd75afd216\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"UU2U\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6940_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ddbd3de178baf9ee6d77e4c9\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"1eiWbVLwo\", \"checksum\":\"UJk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"b1193ad0108d1ada8bbf7cd5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"i13yWD\", \"checksum\":\"61d5yyc0Al\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_qt6OYro_adzK6cm\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bb9be2dc8a47c5c7abf7c4e1\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bw\", \"checksum\":\"JwH\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"F6u0a3dND2AG\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"f0cdcdd3fa625254cbd07cfe\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_6943_XYZ_/EVOMASTER/f53d8c3e615a16bd7690e115")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/_EM_6943_XYZ_/EVOMASTER/f53d8c3e615a16bd7690e115"));
    }
    
    
    @Test(timeout = 60000)
    public void test_58_putOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" \"_EM_1611_XYZ_\" ")
                .put(baseUrlOfSut + "/api/sessions/QRNadGxgFV/EVOMASTER/eb88DqdCLX?" + 
                    "EMextraParam123=_EM_1612_XYZ_&" + 
                    "value=t")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/QRNadGxgFV/EVOMASTER/eb88DqdCLX"));
    }
    
    
    @Test(timeout = 60000)
    public void test_59_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_9810_XYZ_\", \"checksum\":\"_EM_57U1UWYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7629_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b2970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"CD\", \"checksum\":\"Bxne\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z3oEbPBCX\", \"type\":\"settings\", \"_id\":{\"$oid\":\"e7dee92ecff9d2e2dce7963b\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"_EM_9813_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMF6MJz\", \"checksum\":\"_EM_7631_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9816_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"f52c8c3e615916cd7590e015\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"UJku\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9814_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"a10839d2128e2acc9c907ce4\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Jm1j\", \"checksum\":\"9pGD6TCZAK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"erO7D6lu67q\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"5dde6d02b9b855608073a52f\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"VFLzByY9wM\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9815_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"c1ead2e80eae3feb044adb7b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> Response status 400 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/Z2AVVJG4B1/EVOMASTER/EyLKF")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/Z2AVVJG4B1/EVOMASTER/EyLKF"));
    }
    
    
    @Test(timeout = 60000)
    public void test_60_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_6671_XYZ_\", \"checksum\":\"_EM_6672_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMnJ\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_j\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ca706a1ae801aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yUtjiDnsfwsCrv_p\", \"checksum\":\"g19oiQDIjQu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6937_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd76a0d115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"ddbd3de178baf9ee6d77e4c9\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"1eiWbVLwo\", \"checksum\":\"UJk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"b1193ad0108d1ada8bbf7cd5\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/zvnz1WllW_0mY/EVOMASTER/query?" + 
                    "field=_EM_231_XYZ_6&" + 
                    "value=_EM_232_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/zvnz1WllW_0mY/EVOMASTER/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_61_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHIAY9zU\", \"checksum\":\"TvnoBYfLEm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMn\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_4459_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"Tuc47Uc\", \"checksum\":\"g19oiQDIjQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"gVVL1qVK9\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"f63c9d2d615a27bd76a1e015\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"8ad2f4b19bcd29de595b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee288baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5359_XYZ_\", \"checksum\":\"RJi}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ca07ce4\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"GbII\", \"checksum\":\"ZFY\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"jJSbonL\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"3d7dafa2bfeb3853c5edca21\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"yO6PqBVC8\", \"checksum\":\"mVV_URx2OCs\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ffmBUZ8azN2nr\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ef7b7dcdfd5cea43dca9c536\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/nM6YK1mS/EVOMASTER/query?" + 
                    "field=%24numberInt&" + 
                    "value=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/nM6YK1mS/EVOMASTER/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_62_postOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_6671_XYZ\", \"checksum\":\"_EM_9767_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMnJ\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"2\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6939_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"f\", \"checksum\":\"_EM_5756_XYZ_j\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ca807a0be801aef0360a3c10\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWtliDnUUwqCUUgp\", \"checksum\":\"g19oiQDIjQw\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6937_XYZ_c\", \"type\":\"settings\", \"_id\":{\"$oid\":\"f43d8b40615a15cd75afd216\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_9768_XYZ_\", \"checksum\":\"_EM_9769_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"8ae2f4b08bcd38b0496b5d17\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_9770_XYZ_\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6940_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ddbd3de178baf9ee6d77e4c9\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"1eiWbVLwo\", \"checksum\":\"UJk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6944_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"b0193ae0109e0ada8cbf6bd5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_6945_XYZ_\", \"checksum\":\"61d5yyc0Al\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_qt6OYro_adzK6cm\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bb9be2dc8a47c5c7abf7c4e1\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bw\", \"checksum\":\"JwU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"F6U4a3dND2AG\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"f0cdcdd3fa625254cbd07cfe\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/NaN/EVOMASTER?" + 
                    "field=EVOMASTER&" + 
                    "value=EVOMASTER")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/NaN/EVOMASTER"));
    }
    
    
    @Test(timeout = 60000)
    public void test_63_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHIAY9zU\", \"checksum\":\"TvnoBYfLEm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMn\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_4459_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"U\", \"checksum\":\"_EM_5356_XYZ_Z\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_5360_XYZ_\", \"checksum\":\"g19oiQDIjQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"gVVL1qVK9\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"f63c9d2d615a27be76a1e015\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"8ad2f4b19bcd29de595b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"NB8xpo386rKle0\", \"checksum\":\"UJU}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"L\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ca07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/nM6YK1mS/custom_gene_list/query?" + 
                    "field=%24code&" + 
                    "value=_EM_232_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/nM6YK1mS/custom_gene_list/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_64_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_1403_XYZ_\", \"checksum\":\"IPbzI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"khr5s\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"eda5f7ea1ec79929589ae683\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"0\", \"checksum\":\"1DygE\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_1404_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"4ebc83bac1b4415f18fc2ae1\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/sVWLB7bxgka88/main_session/query?" + 
                    "field=%24undefined&" + 
                    "value=_EM_2U2_XYU_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/sVWLB7bxgka88/main_session/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_65_postOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_6671_XYZ\", \"checksum\":\"_EM_6672_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMnJ\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"2\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6939_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuVZ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"fbf1fbcde750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"f\", \"checksum\":\"_EM_5756_XYZ_jI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"ca807a0be801aef0360a3c10\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_7037_XYZ_\", \"checksum\":\"UEUU7033UXUV_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6937_XYZ_cL\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"e44c8b4f605b15be75afe206\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"UU2U\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B14\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"89e2f3b18acd28c0586b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6940_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ddbd3de178baf9ee6d77e4c9\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"1eiWbVLwo\", \"checksum\":\"UJkX\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6944_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"b1193ad0108d1adb8bbf7cd5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"6I15tkq\", \"checksum\":\"2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_qt6OYro_adzK6cm\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bb9be2dc8a48c5d7abf7c4e1\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bUp\", \"checksum\":\"JwH\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"UUM_UU36_UYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"f1bdcdd3fa625254cbd07cfe\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" comparison_session ")
                .post(baseUrlOfSut + "/api/sessions/MinKey/genomic_chart")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/MinKey/genomic_chart"));
    }
    
    
    @Test(timeout = 60000)
    public void test_66_postOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_6671_XYZ\", \"checksum\":\"_EM_6672_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMnJ\", \"type\":\"settings\", \"_id\":{\"$oid\":\"1d559c1a70c0decdbda4b3db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"2\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6939_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"aFeqXK5O\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"0a00ecbce86f266ceb808b86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"f\", \"checksum\":\"_EM_5756_XYZ_j\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9680_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"bb90790be800aff0360b3d20\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_9681_XYZ_\", \"checksum\":\"g19oiQDIjQy\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6937_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"f43d8b4f615a15cd75afd216\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"UV2U\", \"checksum\":\"b\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"89e2f3b08bdd37cf596b5d08\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6940_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ddbd3de178baf9ee6d77e4c9\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"1UiWUVLwU\", \"checksum\":\"_EM_9682_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6944_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"b1193ad0108d1ada8bbf7cd5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_6945_XYZ_\", \"checksum\":\"61d5yyc0Al\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_qt6OYro_adzK6cm\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bb9be2dc8a47c5c7abf7c4e1\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bw\", \"checksum\":\"_EM_9683_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9684_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"f0cdcdd3fa625254cbd07cfe\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" BinData ")
                .post(baseUrlOfSut + "/api/sessions/BinData/settings")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/BinData/settings"));
    }
    
    
    @Test(timeout = 60000)
    public void test_67_postOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_9810_XYZ_\", \"checksum\":\"_EM_57U1UWYU_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7629_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b2970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"CD\", \"checksum\":\"Bxne\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z3oEbPBCX\", \"type\":\"settings\", \"_id\":{\"$oid\":\"e7dee92ecff9d2e2dce7963b\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"_EM_9813_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMF6MJz\", \"checksum\":\"_EM_7631_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9816_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"f52c8c3e615916cd7590e015\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"UJku\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9814_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"a10839d2128e2acc9c907ce4\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"Jm1j\", \"checksum\":\"9pGD6TCZAK\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"erO7D6lu67q\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"5dde6d02b9b855608073a52f\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"VFLzByY9wM\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9815_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"c1ead2e80eae3feb044adb7b\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" _EM_9817_XYZ_ ")
                .post(baseUrlOfSut + "/api/sessions/_EM_9817_XYZ_/main_session")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/_EM_9817_XYZ_/main_session"));
    }
    
    
    @Test(timeout = 60000)
    public void test_68_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UCHUAXUzU\", \"checksum\":\"Hs_f9b\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"pQOO2\", \"type\":\"settings\", \"_id\":{\"$oid\":\"1e559b1970d0dddebc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lZJbU\", \"checksum\":\"GRc69i\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<6\", \"checksum\":\"QMVUJEoU7Ul63f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9933_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca606a1be8f2af0d27083d11\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMF6MJzW\", \"checksum\":\"_EM_7631_XYZ_n\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7632_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd7690e115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B10\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"89e2f3b17acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_8345_XYZ_\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"QCBCWfzfS9Op\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"cddd2ef298b909ef6e66e5da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"UJk}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9931_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ba07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/THsx4vT0HAPpm6hA/custom_gene_list/query?" + 
                    "field=%24regex&" + 
                    "value=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/THsx4vT0HAPpm6hA/custom_gene_list/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_69_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UCHUAXUzU\", \"checksum\":\"Hs_f9b\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"pQOO2\", \"type\":\"settings\", \"_id\":{\"$oid\":\"1e559b1970d0dddebc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lZJbU\", \"checksum\":\"_EM_9930_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"aFeqXK5O\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"QMVUJEoU7Ul63\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca606a1be8f2af0e27083d11\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMF6MJzW\", \"checksum\":\"_EM_7631_XYZ_n\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7632_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd7690e115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B10\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"89e2f3b17acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_8345_XYZ_\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"QCBCWfzfS9Op\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"cddd2ef298b909ef6e66e5da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"UJk}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9931_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2abb9ba07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/THsx4vT0HAPpm6hA/virtual_study/query?" + 
                    "field=%24options&" + 
                    "value=")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/THsx4vT0HAPpm6hA/virtual_study/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_70_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"IPbzI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_300_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"edb5e7f90fd6982a58abe693\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"0\", \"checksum\":\"_EM_301_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"sVWLB7bxgka88\", \"type\":\"group\", \"_id\":{\"$oid\":\"4ebc83bac1b4415f18fc2ae1\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_230_XYZ_/main_session/query?" + 
                    "field=%24type&" + 
                    "value=_EM_232_XYZ_&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/_EM_230_XYZ_/main_session/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_71_getOnQueryReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"IPbzI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_300_XYZ_\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"edb5e7f90fd6982a58abe693\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"0\", \"checksum\":\"ULwJjC\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"sVWLB7bxgka88\", \"type\":\"group\", \"_id\":{\"$oid\":\"4dbd73a9c0b44150290b19e0\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/query -> Response status 400 not defined for path '/api/sessions/{source}/{type}/query'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/sVWLB7bxgka88/virtual_study/query?" + 
                    "field=%24type&" + 
                    "value=_EM_232_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/sVWLB7bxgka88/virtual_study/query"));
    }
    
    
    @Test(timeout = 60000)
    public void test_72_postOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_6671_XYZ\", \"checksum\":\"_EM_6672_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMnJ\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"2\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6939_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuVZ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"fbf1fbcde750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"f\", \"checksum\":\"_EM_5756_XYZ_jI\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"ca807a0be801aef0360a3c10\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_7037_XYZ_\", \"checksum\":\"UEUU7033UXUV_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6937_XYZ_cL\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"e44c8b4f605b15be75afe206\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"UU2U\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B14\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"89e2f3b18acd28c0586b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6940_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ddbd3de178baf9ee6d77e4c9\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"1eiWbVLwo\", \"checksum\":\"UJkX\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6944_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"b1193ad0108d1adb8bbf7cd5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"6I15tkq\", \"checksum\":\"2\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_qt6OYro_adzK6cm\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bb9be2dc8a48c5d7abf7c4e1\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bUp\", \"checksum\":\"JwH\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"UUM_UU36_UYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"f1bdcdd3fa625254cbd07cfe\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" ISODate ")
                .post(baseUrlOfSut + "/api/sessions/comparison_session/comparison_session?" + 
                    "field=comparison_session&" + 
                    "value=comparison_session")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/comparison_session/comparison_session"));
    }
    
    
    @Test(timeout = 60000)
    public void test_73_postOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_6671_XYZ_\", \"checksum\":\"_EM_6672_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMnJ\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_j\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ca706a1ae801aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yUtjiDnsfwsCrv_p\", \"checksum\":\"g19oiQDIjQu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6937_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd76a0d115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"ddbd3de178baf9ee6d77e4c9\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"1eiWbVLwo\", \"checksum\":\"UJk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"b1193ad0108d1ada8bbf7cd5\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/%7B%7D/virtual_study?field=_EM_6938_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/%7B%7D/virtual_study"));
    }
    
    
    @Test(timeout = 60000)
    public void test_74_postOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_6671_XYZ\", \"checksum\":\"_EM_6672_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMnJ\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"2\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6939_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_j\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ca706a1ae801aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yUtjiDnsfwsCrv_p\", \"checksum\":\"g19oiQDIjQw\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6937_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"f43d8b4f615a15cd75afd216\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"UU2U\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6940_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ddbd3de178baf9ee6d77e4c9\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"1eiWbVLwo\", \"checksum\":\"UJk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"b1193ad0108d1ada8bbf7cd5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"i13yWD\", \"checksum\":\"61d5yyc0Al\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_qt6OYro_adzK6cm\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bb9be2dc8a47c5c7abf7c4e1\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bw\", \"checksum\":\"JwH\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"F6u0a3dND2AG\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"f0cdcdd3fa625254cbd07cfe\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. POST:/api/sessions/{source}/{type} -> Response status 400 not defined for path '/api/sessions/{source}/{type}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/sessions/%7B%7D/virtual_study?" + 
                    "field=_EM_6942_XYZ_&" + 
                    "value=_EM_6942_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(400.0))
                .body("'error'", containsString("Bad Request"))
                .body("'path'", containsString("/api/sessions/%7B%7D/virtual_study"));
    }
    
    
    @Test(timeout = 60000)
    public void test_75_getOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_325_XYZ_")
                .get(baseUrlOfSut + "/api/sessions/_EM_324_XYZ_/virtual_study/SIS4vhu7O")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_324_XYZ_/virtual_study/SIS4vhu7O"));
    }
    
    
    @Test(timeout = 60000)
    public void test_76_getOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_326_XYZ_/settings/NJ6vV44ZyY4h5U")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_326_XYZ_/settings/NJ6vV44ZyY4h5U"));
    }
    
    
    @Test(timeout = 60000)
    public void test_77_getOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/2IxPbH_sn/genomic_chart/_EM_4_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/2IxPbH_sn/genomic_chart/_EM_4_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_78_putOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" \"Ovirp_tGf0p\" ")
                .put(baseUrlOfSut + "/api/sessions/_EM_12_XYZ_/comparison_session/_EM_13_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_12_XYZ_/comparison_session/_EM_13_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_79_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "genomic_chart")
                .d("{\"id\":\"f\", \"checksum\":\"511IYPaGszvycf\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_20_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"e8aea1b15a45b9cfdb907868\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"_EM_21_XYZ_\", \"checksum\":\"_EM_22_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_23_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"1fd8eb3ffebd02d4dd6df43e\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/_EM_24_XYZ_/group/cJNRY?EMextraParam123=_EM_5_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_24_XYZ_/group/cJNRY"));
    }
    
    
    @Test(timeout = 60000)
    public void test_80_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"3BHIAY9z2\", \"checksum\":\"TvnoBYfLEm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMn\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e659b1a70dfcdddcb96c5eb\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_4458_XYZ_\", \"checksum\":\"ZVQQrUbxywo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d7cee82dbee9c2d2dbf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"_EM_5102_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_4459_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"D\", \"checksum\":\"ebEHwvFvJWZ83u\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"O\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"Tuc47Uc\", \"checksum\":\"g19oiQDIjQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"gVVL1qVK9\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"f63c9d2d615a27bd76a1e015\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HP21\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"8ad1f4b08bdc3aed596a5d17\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"1CYsVHEcYrY\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"dUWz9UEH\", \"checksum\":\"RUUU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"M\", \"type\":\"settings\", \"_id\":{\"$oid\":\"b0182ae0107e1bdcaca07bd4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/sessions/DC112H_/custom_gene_list/ca706a1ae8f1aeff37093d01?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/DC112H_/custom_gene_list/ca706a1ae8f1aeff37093d01"));
    }
    
    
    @Test(timeout = 60000)
    public void test_81_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHIAY9zU\", \"checksum\":\"_E=_E781_UYZ`\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMn\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b5db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"_EM_6632_XYZ_U\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"[A\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee72dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"_EM_6633_XYZ_\", \"checksum\":\"g19oiQDIjQu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"gVVL1qVK9\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd7690d115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"5YjcbtYao3LyufY\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"nM6YK1mS\", \"type\":\"group\", \"_id\":{\"$oid\":\"ddcc3ff188abf9df6e57d3eb\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"UJk}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ba07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/2HvXQP/genomic_chart/f53d8c3e615a16bd7690d115")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/2HvXQP/genomic_chart/f53d8c3e615a16bd7690d115"));
    }
    
    
    @Test(timeout = 60000)
    public void test_82_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_8369_XYZ_\", \"checksum\":\"_EM_5781_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7629_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1960dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"_EM_8370_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WAn\", \"type\":\"settings\", \"_id\":{\"$oid\":\"e7ced92dcef8d2e2dcf7a71c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"_EM_7630_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"aFeqXK5O\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"fbf1fccce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"gEM_535U_XU\\\\_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37092d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMF6MJz\", \"checksum\":\"_EM_7631_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7632_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd7690e115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"_EM_8371_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"UJk}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ba07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_7634_XYZ_/custom_data/89e2f3b18acd28cf596b5d07")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_7634_XYZ_/custom_data/89e2f3b18acd28cf596b5d07"));
    }
    
    
    @Test(timeout = 60000)
    public void test_83_deleteOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 404 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .delete(baseUrlOfSut + "/api/sessions/_EM_2022_XYZ_/main_session/_EM_2023_XYZ_?" + 
                    "EMextraParam123=_EM_2024_XYZ_&" + 
                    "value=_EM_2025_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_2022_XYZ_/main_session/_EM_2023_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_84_deleteOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHIAY9zU\", \"checksum\":\"_EM_5781_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7629_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"_EM_7630_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMF6MJz\", \"checksum\":\"_EM_7631_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7632_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd7690e115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"UJk}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ba07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 404 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/mXAgrGimAHVlL/genomic_chart/EBC0ZFLK7R8?EMextraParam123=42")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/mXAgrGimAHVlL/genomic_chart/EBC0ZFLK7R8"));
    }
    
    
    @Test(timeout = 60000)
    public void test_85_deleteOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHIAY9zU\", \"checksum\":\"TvnoBYfLEm\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMn\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_4459_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"Tuc47Uc\", \"checksum\":\"g19oiQDIjQ\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"gVVL1qVK9\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"f63c9d2d615a27bd76a1e015\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"8ad2f4b19bcd29de595b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee288baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5359_XYZ_\", \"checksum\":\"RJi}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ca07ce4\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"GbII\", \"checksum\":\"ZFY\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"jJSbonL\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"3d7dafa2bfeb3853c5edca21\"}}")
            .and().insertInto("session", "genomic_chart")
                .d("{\"id\":\"yO6PqBVC8\", \"checksum\":\"mVV_URx2OCs\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ffmBUZ8azN2nr\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ef7b7dcdfd5cea43dca9c536\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 404 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/api/sessions/Eg4qjXq10GveJO2E/custom_data/jTbQRc?value=dcGKAgeUNBhRaq")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/Eg4qjXq10GveJO2E/custom_data/jTbQRc"));
    }
    
    
    @Test(timeout = 60000)
    public void test_86_putOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_1760_XYZ_\" ")
                .put(baseUrlOfSut + "/api/sessions/deNv9HJ_Dq_pqq/main_session/_EM_1759_XYZ_?" + 
                    "EMextraParam123=42&" + 
                    "value=K08EpNjygj_TWLs")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/deNv9HJ_Dq_pqq/main_session/_EM_1759_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_87_deleteOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 404 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2197_XYZ_")
                .delete(baseUrlOfSut + "/api/sessions/S2ZGv/group/_EM_2196_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/S2ZGv/group/_EM_2196_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_88_putOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" \"_EM_2185_XYZ_\" ")
                .put(baseUrlOfSut + "/api/sessions/_EM_2183_XYZ_/group/_EM_2184_XYZ_?" + 
                    "EMextraParam123=_EM_2186_XYZ_&" + 
                    "value=9jzCI")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_2183_XYZ_/group/_EM_2184_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_89_putOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHIAY9zU\", \"checksum\":\"_EM_5781_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7629_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"UA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"_EM_7630_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"8\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_11161_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"ca706a1ae8f0aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMF6MJz\", \"checksum\":\"_EM_7631_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7632_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd7690e115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_10993_XYZ_\", \"checksum\":\"UJk}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"4\", \"type\":\"group\", \"_id\":{\"$oid\":\"91183ad0109e1acb9b907de5\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"G5NTB7usQbDEd\" ")
                .put(baseUrlOfSut + "/api/sessions/jGLiXxUNZyzi/custom_gene_list/kv?" + 
                    "field=EseF0S1Vv4k8KiG5&" + 
                    "value=VD1e3o8YTFNp")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/jGLiXxUNZyzi/custom_gene_list/kv"));
    }
    
    
    @Test(timeout = 60000)
    public void test_90_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_6671_XYZ_\", \"checksum\":\"_EM_6672_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMnJ\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_j\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ca706a1ae801aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yUtjiDnsfwsCrv_p\", \"checksum\":\"g19oiQDIjQu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6937_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd76a0d115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"ddbd3de178baf9ee6d77e4c9\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"1eiWbVLwo\", \"checksum\":\"UJk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"b1193ad0108d1ada8bbf7cd5\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/2HvXQP/custom_gene_list/f53d8c3e615a16bd76a0d115")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/2HvXQP/custom_gene_list/f53d8c3e615a16bd76a0d115"));
    }
    
    
    @Test(timeout = 60000)
    public void test_91_putOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"Y8QsRGq2Nz6If\" ")
                .put(baseUrlOfSut + "/api/sessions/_EM_1585_XYZ_/settings/O9D")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_1585_XYZ_/settings/O9D"));
    }
    
    
    @Test(timeout = 60000)
    public void test_92_putOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"V7udZPfDjJE00\", \"checksum\":\"U\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Q\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"0a0ff55bf038deaff1ecbed4\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"kUZLYx3xjUpgzu\", \"checksum\":\"ql72H\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Nv6t_rWpvwTnko\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fc01bb7a92cfcb7c8c3bf292\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"_SeKJ2Bz\", \"checksum\":\"4Bw9VsY0S\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"RPnuL\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"efdbeed29dd41a84a430c42e\"}}")
            .and().insertInto("session", "settings")
                .d("{\"id\":\"iE\", \"checksum\":\"yu52h2AsZ0uC5\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"R\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"26dffed90c741a790d4724fa\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_DUK\" ")
                .put(baseUrlOfSut + "/api/sessions/_EM_3480_XYZ_/virtual_study/_EM_17243_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_3480_XYZ_/virtual_study/_EM_17243_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_93_deleteOnSessionReturnsSchemaInvalidResponse() throws Exception {
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. DELETE:/api/sessions/{source}/{type}/{id} -> Response status 404 not defined for path '/api/sessions/{source}/{type}/{id}'.
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2060_XYZ_")
                .delete(baseUrlOfSut + "/api/sessions/_EM_2058_XYZ_/comparison_session/_EM_2059_XYZ_?" + 
                    "EMextraParam123=42&" + 
                    "value=wm4NNZDcxiXs5x")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_2058_XYZ_/comparison_session/_EM_2059_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_94_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_6671_XYZ\", \"checksum\":\"_EM_6672_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMnJ\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"2\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6939_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"f\", \"checksum\":\"_EM_5756_XYZ_j\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ca807a0be801aef0360a3c10\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yUtjiDnsfwsCrv_p\", \"checksum\":\"g19oiQDIjQw\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6937_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"f43d8b4f615a15cd75afd216\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"UU2U\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6940_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"ddbd3de178baf9ee6d77e4c9\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"1eiWbVLwo\", \"checksum\":\"UJk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6944_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"b1193ad0108d1ada8bbf7cd5\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"_EM_6945_XYZ_\", \"checksum\":\"61d5yyc0Al\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_qt6OYro_adzK6cm\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"bb9be2dc8a47c5c7abf7c4e1\"}}")
            .and().insertInto("session", "custom_gene_list")
                .d("{\"id\":\"bw\", \"checksum\":\"JwH\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"F6u0a3dND2AG\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"f0cdcdd3fa625254cbd07cfe\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_6943_XYZ_/main_session/f53d8c3e615a16bd7690e115")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_6943_XYZ_/main_session/f53d8c3e615a16bd7690e115"));
    }
    
    
    @Test(timeout = 60000)
    public void test_95_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"_EM_6671_XYZ_\", \"checksum\":\"_EM_6672_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMnJ\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiSo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6865_XYZ_\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cfe82dded9d1d2cb07a53c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"aFeqXK5O\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"0af0fbbde660256aeb708a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yUtjiDnsfwsCrv_\", \"checksum\":\"g19oiQDIjQu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_6866_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"f63d8c3f615b15cd87a0d115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"UJk\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"group\", \"_id\":{\"$oid\":\"b1193ad0108d1ada8bbf7cd5\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/2HvZQP/custom_data/_EM_5785_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/2HvZQP/custom_data/_EM_5785_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_96_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"SBUIUU9WU\", \"checksum\":\"_EM_5781_XYZ_t\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7629_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"1d569b1970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"settings\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"_EM_9854_XYZ_\", \"checksum\":\"r7K7Xa7bwY7af\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"aFeqXK5O\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"fbf1ebcbe75f255bea7e8a87\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMF6MJz\", \"checksum\":\"UMU`UU31_`YZU\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"E2md\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"f53d8d3e615a16bd7690e115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"_EM_9855_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"ddcd3dd079c9f9ce7e77e5ca\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"QCXUNneu\", \"checksum\":\"_EM_9857_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_9858_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ba07ce4\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"2MuoH7IsRgi3Y9K\", \"checksum\":\"yBU11UN\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"gqm7WvcSK_wX\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"79edd1c2eae4db8aff8dca33\"}}")
            .and().insertInto("session", "group")
                .d("{\"id\":\"0GzbACn\", \"checksum\":\"8Gb9ya6FiwTWXNy\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"8mg5j03glPGN2\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"cbcc4903cbf2a3bb5fdf768a\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_7634_XYZ_/custom_data/f53d8c3e615a16bd7690e115")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_7634_XYZ_/custom_data/f53d8c3e615a16bd7690e115"));
    }
    
    
    @Test(timeout = 60000)
    public void test_97_putOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHIAY9zU\", \"checksum\":\"sE6hr6\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7629_XYZ_\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddebc95b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"j\", \"checksum\":\"_EM_16927_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"d7cee82dcee9c2c2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0lYJbU\", \"checksum\":\"3QUUZUUVf\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce75f255beb7f8976\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMU4MJz\", \"checksum\":\"wc2CCL\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7632_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd7690e115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HG21\", \"checksum\":\"_EM_16928_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"NVVI\", \"type\":\"group\", \"_id\":{\"$oid\":\"89e2f3b189cc29c0497b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5358_XYZ_\", \"type\":\"group\", \"_id\":{\"$oid\":\"ddcd3ee188baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"UJk}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9bb07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"_EM_16929_XYZ_\" ")
                .put(baseUrlOfSut + "/api/sessions/NVVI/genomic_chart/k_?" + 
                    "field=_EGM_16401_XYZ&" + 
                    "value=")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/NVVI/genomic_chart/k_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_98_getOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"GATRdLH\", \"checksum\":\"_EM_7028_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"ZETId9RKFiiKwMnJ\", \"type\":\"main_session\", \"_id\":{\"$oid\":\"1e559b1970dfdddecc94b4db\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"g\", \"checksum\":\"_EM_7029_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"XP0mYJbU\", \"checksum\":\"76fi_vszGgk4bBuV\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"=\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"custom_data\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yUtjiDnsfwsCrv_p\", \"checksum\":\"g19oiQDIjQu\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"gVULUqRKU\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd76a0d115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJG4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eV6Zt3aeWCwA0Ov\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"J_AKakgEJ9ZbdaxQ\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"ddcd3ee088baf9de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_5783_XYZ_\", \"checksum\":\"_EM_7030_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"\", \"type\":\"group\", \"_id\":{\"$oid\":\"b11939d0108d1ada8bbf7cd5\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. GET:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/sessions/_EM_7032_XYZ_/comparison_session/f53d8c3e615a16bd7690d115")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/_EM_7032_XYZ_/comparison_session/f53d8c3e615a16bd7690d115"));
    }
    
    
    @Test(timeout = 60000)
    public void test_99_putOnSessionReturnsSchemaInvalidResponseUsingMongo() throws Exception {
        List<MongoInsertionDto> insertions = mongo().insertInto("session", "main_session")
                .d("{\"id\":\"UBHIAY9zU\", \"checksum\":\"IMxTcCpQdPTMWz_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_7629_XYZ_\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"1e549b1970dfdeddac85a4cb\"}}")
            .and().insertInto("session", "main_session")
                .d("{\"id\":\"\", \"checksum\":\"ZUUUbebxiUo\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"WA\", \"type\":\"virtual_study\", \"_id\":{\"$oid\":\"d7cee82dcee9c2d2dcf7a62c\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"Sg0\", \"checksum\":\"_EM_7630_XUZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"DC112H_\", \"type\":\"group\", \"_id\":{\"$oid\":\"fbf1fbcce750255beb7f8a86\"}}")
            .and().insertInto("session", "comparison_session")
                .d("{\"id\":\"<\", \"checksum\":\"_EM_5356_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"_EM_5357_XYZ_\", \"type\":\"comparison_session\", \"_id\":{\"$oid\":\"ca706a1ae8f1aeff37093d01\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"yWMF6MJz\", \"checksum\":\"_EM_7631_XYZ_\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"jGLiXxUNZyzi\", \"type\":\"group\", \"_id\":{\"$oid\":\"f53d8c3e615a16bd7690e115\"}}")
            .and().insertInto("session", "custom_data")
                .d("{\"id\":\"HH21\", \"checksum\":\"f\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"Z2AVVJI4B1\", \"type\":\"genomic_chart\", \"_id\":{\"$oid\":\"89e2f3b18acd28cf596b5d07\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"ZL8ptmyo\", \"checksum\":\"eU6Zt3beXCUU0O\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"nM6YK1mS\", \"type\":\"custom_gene_list\", \"_id\":{\"$oid\":\"ddcd3ee188ba09de7d67e4da\"}}")
            .and().insertInto("session", "virtual_study")
                .d("{\"id\":\"_EM_15640_XYZ_\", \"checksum\":\"UJk}\", \"data\":{\n                    \"EM_tainted_map\":\"_EM_16_XYZ_\"\n                    }, \"source\":\"S\", \"type\":\"group\", \"_id\":{\"$oid\":\"a1183ad1118e2acb9ba07ce4\"}}")
            .dtos();
        MongoInsertionResultsDto insertionsresult = controller.execInsertionsIntoMongoDatabase(insertions);
        
        // Fault200. Received A Response From API That Is Not Valid According To Its Schema. PUT:/api/sessions/{source}/{type}/{id} -> No response body is expected but one was found.
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" \"TD1e3o8YTFNp\" ")
                .put(baseUrlOfSut + "/api/sessions/1tm2N_9MM_MinDlZ/custom_data/_EM_15642_XYZ_?" + 
                    "field=EseF0S1Vv4k8KiG5&" + 
                    "value=_EM_15643_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'path'", containsString("/api/sessions/1tm2N_9MM_MinDlZ/custom_data/_EM_15642_XYZ_"));
    }


}
