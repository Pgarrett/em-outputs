import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-03T13:34:23.157-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 25 tests
 * <br>
*  Covered targets: 443
 * <br>
*  Used time: 0h 15m 6s
 * <br>
*  Needed budget for current results: 69%
 * <br>
*  This file contains test cases that are likely to indicate faults.
*/
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.org.springframework.samples.petclinic.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("owners","pets","specialties","types","vet_specialties","vets","visits"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_queryOnOwnerReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owner  (id : 788)  {id,city,telephone,pets{id,name,visits{totalCount}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Query_66_owner
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot return null for non-nullable type: 'Owner' within parent 'Query' (/owner)"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("owner"))
                .body("'errors'[0].'locations'", nullValue())
                .body("'errors'[0].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_1_queryOnPetReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { pet  (id : 220)  {id,name,owner{id,firstName,lastName,address,city}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Query_70_pet
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot return null for non-nullable type: 'Pet' within parent 'Query' (/pet)"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("pet"))
                .body("'errors'[0].'locations'", nullValue())
                .body("'errors'[0].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_2_mutationOnRemoveSpecialtyReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    removeSpecialty  ( input:{specialtyId:419})    {specialties{id,name}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/repository/springdatajpa/SpringDataSpecialtyRepositoryImpl_38_delete
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_3_mutationOnUpdateSpecialtyReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateSpecialty  ( input:{specialtyId:923, name:\\\"h\\\"})    {specialty{id,name}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_149_updateSpecialty
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_4_queryOnSpecialtiesReturnsErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 271L)
                .d("first_name", "\"a8\"")
                .d("last_name", "\"o1b\"")
                .d("address", "\"<U\"")
                .d("city", "\"_UM_2U44UXYZ_c\"")
                .d("telephone", "\"MoI\"")
            .and().insertInto("specialties", 272L)
                .d("name", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  specialties  {name}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/model/NamedEntity_39_getName
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot return null for non-nullable type: 'String' within parent 'Specialty' (/specialties[0]/name)"))
                .body("'errors'[0].'path'.size()", equalTo(3))
                .body("'errors'[0].'path'[0]", containsString("specialties"))
                .body("'errors'[0].'path'[1]", numberMatches(0.0))
                .body("'errors'[0].'path'[2]", containsString("name"))
                .body("'errors'[0].'locations'", nullValue())
                .body("'errors'[0].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_5_mutationOnAddSpecialtyReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    addSpecialty  ( input:{name:\\\"\\\"})    {specialty{id}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_143_addSpecialty
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_6_mutationOnAddSpecialtyReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    addSpecialty  ( input:{name:\\\"_EM_338_XYZ_\\\"})    {specialty{name}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_143_addSpecialty
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_7_queryOnOwnersReturnsErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 135L)
                .d("first_name", "\"uTgNj@VNCYOs\"")
                .d("last_name", "\"kb\u008041Ux5F\"")
                .d("address", "\"_EM_1540_XYZ_\"")
                .d("city", "\"_EM_713_XYZ_\"")
                .d("telephone", "\"tbgwSMX\"")
            .and().insertInto("specialties", 136L)
                .d("name", "\"_EM_960_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owners  (filter : null,orders : [])  {id,address,telephone,pets{id,name,birthDate}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/types/OwnerOrder_80_buildOrderJpaQuery
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_8_mutationOnUpdatePetReturnsErrorUsingSql() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updatePet  ( input:{petId:899, name:\\\"_EM_3647_XYZ_\\\", birthDate:null, typeId:0})    {pet{id,birthDate,owner{city,telephone}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_114_updatePet
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_9_mutationOnUpdateOwnerReturnsErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 101L)
                .d("first_name", "\"Hsy1niMZPSz6\"")
                .d("last_name", "\"2rO\"")
                .d("address", "\"OxGVxWird5\"")
                .d("city", "\"f8BigT\"")
                .d("telephone", "\"\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateOwner  ( input:{ownerId:423, firstName:null, lastName:\\\"_EM_81_XYZ_\\\", address:\\\"znMu9nRjmvx7a\\\", city:\\\"tRZ33FeXIj\\\", telephone:null})    {owner{city,pets{id,name,type{id}}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_68_updateOwner
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_10_mutationOnUpdatePetReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updatePet  ( input:{petId:411, birthDate:null, typeId:null})    {pet{birthDate,type{id},visits{totalCount}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_122_updatePet
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_11_mutationOnUpdateOwnerReturnsErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 135L)
                .d("first_name", "\"uTgNj@VNCYOs\"")
                .d("last_name", "\"kb\u008041Ux5F\"")
                .d("address", "\"_EM_1540_XYZ_\"")
                .d("city", "\"_EM_713_XYZ_\"")
                .d("telephone", "\"tbgwSMX\"")
            .and().insertInto("specialties", 136L)
                .d("name", "\"_EM_960_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateOwner  ( input:{ownerId:-32051, firstName:\\\"_EM_5659_XYZ_\\\", lastName:\\\"pQowmk\\\", address:null, city:\\\"4ffVrAF8o9zJj1LEo\\\", telephone:\\\"_EM_5660_XYZ_\\\"})    {owner{id,firstName,lastName,address,telephone,pets{birthDate,type{name},visits{totalCount}}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_72_updateOwner
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_12_mutationOnUpdateOwnerReturnsErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 337L)
                .d("first_name", "\"Ks\"")
                .d("last_name", "\"U1SDx3nk\"")
                .d("address", "\"ElI\"")
                .d("city", "\"wRHtsIzgUKNaakfA\"")
                .d("telephone", "NULL")
            .and().insertInto("specialties", 338L)
                .d("name", "\"\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateOwner  ( input:{ownerId:897, lastName:\\\"cXG1NwaJOqpJ2Jqj\\\", address:null, city:null})    {owner{firstName,lastName,city}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_76_updateOwner
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_13_queryOnOwnerReturnsErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 1090L)
                .d("first_name", "\"_EM_6276_XYZ_\"")
                .d("last_name", "NULL")
                .d("address", "\"\"")
                .d("city", "\"w3CCeDFR_7g0Or\"")
                .d("telephone", "\"20JWI\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owner  (id : 1)  {lastName,address,city,telephone,pets{birthDate,visits{totalCount}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/model/Owner_94_getPets
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot return null for non-nullable type: 'String' within parent 'Owner' (/owner/lastName)"))
                .body("'errors'[0].'path'.size()", equalTo(2))
                .body("'errors'[0].'path'", hasItems("owner", "lastName"))
                .body("'errors'[0].'locations'", nullValue())
                .body("'errors'[0].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_14_mutationOnUpdatePetReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updatePet  ( input:{petId:899, birthDate:null, typeId:942})    {pet{id,birthDate,owner{city,telephone}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_119_updatePet
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_15_mutationOnUpdatePetReturnsErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 135L)
                .d("first_name", "\"_EM_959_XYZ_K\"")
                .d("last_name", "NULL")
                .d("address", "\"Gcd6JLMqD6Wfck\"")
                .d("city", "\"AodhUeVUTO\"")
                .d("telephone", "\"tbgwSLX\"")
            .and().insertInto("specialties", 136L)
                .d("name", "\"_EM_5489_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updatePet  ( input:{petId:458941, name:null, typeId:47})    {pet{name,type{id},owner{id,firstName,lastName,address,city},visits{visits{id,description}}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_119_updatePet
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_16_mutationOnUpdateOwnerReturnsErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 173L)
                .d("first_name", "\"RBGU2voZW\"")
                .d("last_name", "NULL")
                .d("address", "NULL")
                .d("city", "\"lPmmLO2T\"")
                .d("telephone", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateOwner  ( input:{ownerId:717, lastName:null, address:null, city:\\\"_EM_1272_XYZ_\\\", telephone:\\\"_EM_1273_XYZ_\\\"})    {owner{id,telephone,pets{type{id},visits{totalCount}}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_80_updateOwner
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_17_mutationOnUpdateOwnerReturnsErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 135L)
                .d("first_name", "\"_EM_959_XYZ_K\"")
                .d("last_name", "NULL")
                .d("address", "\"Gcd6JLMqD6Wfck\"")
                .d("city", "\"AodhUeVUTO\"")
                .d("telephone", "\"tbgwSLX\"")
            .and().insertInto("specialties", 136L)
                .d("name", "\"_EM_5489_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateOwner  ( input:{ownerId:76, firstName:null, telephone:\\\"_IM_U\u003c87UXUU`\\\"})    {owner{id,firstName,city,pets{id,name,birthDate,type{name},visits{totalCount}}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_84_updateOwner
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_18_queryOnOwnersReturnsErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 337L)
                .d("first_name", "\"Ks\"")
                .d("last_name", "\"U1SDx3nk\"")
                .d("address", "\"ElI\"")
                .d("city", "\"wRHtsIzgUKNaakfA\"")
                .d("telephone", "NULL")
            .and().insertInto("specialties", 338L)
                .d("name", "\"\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owners    {firstName,lastName,telephone}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/model/Owner_73_getTelephone
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot return null for non-nullable type: 'String' within parent 'Owner' (/owners[0]/telephone)"))
                .body("'errors'[0].'path'.size()", equalTo(3))
                .body("'errors'[0].'path'[0]", containsString("owners"))
                .body("'errors'[0].'path'[1]", numberMatches(0.0))
                .body("'errors'[0].'path'[2]", containsString("telephone"))
                .body("'errors'[0].'locations'", nullValue())
                .body("'errors'[0].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_19_queryOnOwnersReturnsErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 135L)
                .d("first_name", "\"_EM_959_XYZ_K\"")
                .d("last_name", "NULL")
                .d("address", "\"Gcd6JLMqD6Wfck\"")
                .d("city", "\"AodhUeVUTO\"")
                .d("telephone", "\"tbgwSLX\"")
            .and().insertInto("specialties", 136L)
                .d("name", "\"_EM_5489_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owners    {id,firstName,lastName,address}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/model/Owner_57_getAddress
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot return null for non-nullable type: 'String' within parent 'Owner' (/owners[0]/lastName)"))
                .body("'errors'[0].'path'.size()", equalTo(3))
                .body("'errors'[0].'path'[0]", containsString("owners"))
                .body("'errors'[0].'path'[1]", numberMatches(0.0))
                .body("'errors'[0].'path'[2]", containsString("lastName"))
                .body("'errors'[0].'locations'", nullValue())
                .body("'errors'[0].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_20_mutationOnAddOwnerReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    addOwner  ( input:{firstName:\\\"5l8XJdVbapqjNAg\\\", lastName:\\\"_EM_4156_XYZ_\\\", address:\\\"JKfg\\\", city:\\\"1PekH1cETzH\\\"})    {owner{address}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_60_addOwner
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_21_queryOnOwnersReturnsErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 173L)
                .d("first_name", "\"RBGU2voZW\"")
                .d("last_name", "NULL")
                .d("address", "NULL")
                .d("city", "\"lPmmLO2T\"")
                .d("telephone", "NULL")
            .and().insertInto("specialties", 174L)
                .d("name", "\"_EM_1274_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owners  (filter : null,orders : null)  {lastName,address,city,pets{id,name,birthDate}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/model/Owner_94_getPets
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(2))
                .body("'errors'[0].'message'", containsString("Cannot return null for non-nullable type: 'String' within parent 'Owner' (/owners[0]/lastName)"))
                .body("'errors'[0].'path'.size()", equalTo(3))
                .body("'errors'[0].'path'[0]", containsString("owners"))
                .body("'errors'[0].'path'[1]", numberMatches(0.0))
                .body("'errors'[0].'path'[2]", containsString("lastName"))
                .body("'errors'[0].'locations'", nullValue())
                .body("'errors'[0].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[0].'extensions'", nullValue())
                .body("'errors'[1].'message'", containsString("Cannot return null for non-nullable type: 'String' within parent 'Owner' (/owners[0]/address)"))
                .body("'errors'[1].'path'.size()", equalTo(3))
                .body("'errors'[1].'path'[0]", containsString("owners"))
                .body("'errors'[1].'path'[1]", numberMatches(0.0))
                .body("'errors'[1].'path'[2]", containsString("address"))
                .body("'errors'[1].'locations'", nullValue())
                .body("'errors'[1].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[1].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_22_mutationOnUpdateOwnerReturnsErrorUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 95L)
                .d("first_name", "\"_EM_10308_XYZ_\"")
                .d("last_name", "\"Tu3FSt\"")
                .d("address", "\"QJeH\"")
                .d("city", "\"UEM]=9U_XYU_\"")
                .d("telephone", "\"5jfvqyE\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateOwner  ( input:{ownerId:1, firstName:\\\"_EM_7886_XYZ_\\\", lastName:\\\"min0OTf0WusD\\\", address:\\\"5SDJEL9p31tBxl\\\", telephone:\\\"2lC8BxuP\\\"})    {owner{id,lastName,pets{name,type{name},visits{totalCount}}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_87_updateOwner
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    @Test(timeout = 60000)
    public void test_23_mutationOnAddVisitReturnsEmptyUsingSql() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    addSpecialty  ( input:{name:\\\"_EM_1296_XYZ_\\\"})    {specialty{id}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Mutation_143_addSpecialty
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    addPet  ( input:{ownerId:653, name:\\\"Mtok_\\\", birthDate:\\\"2078-03-30\\\", typeId:-536207896})    {pet{name,birthDate,type{name}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  vets  {lastName,specialties{name}}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'vets'.size()", equalTo(0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  pets  {owner{firstName,address}}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'pets'.size()", equalTo(0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { pet  (id : 258)  {id,name,owner{firstName,address,city}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Query_70_pet
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot return null for non-nullable type: 'Pet' within parent 'Query' (/pet)"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("pet"))
                .body("'errors'[0].'locations'", nullValue())
                .body("'errors'[0].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[0].'extensions'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { pet  (id : 993)  {id,visits{totalCount,visits{id}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/graphql/resolvers/Query_70_pet
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot return null for non-nullable type: 'Pet' within parent 'Query' (/pet)"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("pet"))
                .body("'errors'[0].'locations'", nullValue())
                .body("'errors'[0].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[0].'extensions'", nullValue());
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  pettypes  {id,name}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'pettypes'.size()", equalTo(0));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateSpecialty  ( input:{specialtyId:3, name:\\\"E\\\"})    {specialty{id,name}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'updateSpecialty'.'specialty'.'name'", containsString("E"));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  specialties  {name}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'specialties'.size()", equalTo(3))
                .body("'data'.'specialties'[0].'name'", containsString("radiology"))
                .body("'data'.'specialties'[1].'name'", containsString("surgery"))
                .body("'data'.'specialties'[2].'name'", containsString("E"));
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    addVisit  ( input:{petId:1407962511, description:\\\"ao5zq\\\", date:\\\"2068-11-28\\\"})    {visit{id,pet{id,birthDate,owner{lastName,address,telephone}}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_24_queryOnOwnersReturnsErrorUsingSql() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owners  ( filter:{firstName:\\\"_EM_988_XYZ_\\\", lastName:null, address:\\\"G7kPiHT4_3UTLww4\\\", city:null},orders : [{}, {order:ASC}, {field:null, order:DESC}, {}])  {id,firstName,city,telephone,pets{name,birthDate,visits{totalCount,visits{id}}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)// org/springframework/samples/petclinic/repository/springdatajpa/SpringDataOwnerRepositoryImpl_35_findAllByFilterOrder
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }


}
