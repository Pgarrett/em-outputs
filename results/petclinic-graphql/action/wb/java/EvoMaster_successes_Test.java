import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-03T13:34:23.219-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 11 tests
 * <br>
*  Covered targets: 340
 * <br>
*  Used time: 0h 15m 6s
 * <br>
*  Needed budget for current results: 69%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.org.springframework.samples.petclinic.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetDatabase(Arrays.asList("owners","pets","specialties","types","vet_specialties","visits"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_queryOnVetsReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  vets  {id,firstName,specialties{id}}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'vets'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_1_queryOnPettypesReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  pettypes  {id}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'pettypes'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_2_queryOnPetsReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  pets  {id,type{id}}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'pets'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_3_queryOnSpecialtiesReturnsDataUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 135L)
                .d("first_name", "\"uTgNj@VNCYOs\"")
                .d("last_name", "\"kb\u008041Ux5F\"")
                .d("address", "\"_EM_1540_XYZ_\"")
                .d("city", "\"_EM_713_XYZ_\"")
                .d("telephone", "\"tbgwSMX\"")
            .and().insertInto("specialties", 136L)
                .d("name", "\"_EM_960_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  specialties  {id,name}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'specialties'.size()", equalTo(1))
                .body("'data'.'specialties'[0].'name'", containsString("_EM_960_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_4_queryOnOwnerReturnsDataUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 1090L)
                .d("first_name", "\"_EM_6276_XYZ_\"")
                .d("last_name", "\"7SvBS0IzXib\"")
                .d("address", "\"\"")
                .d("city", "\"w3CCeDFR_7g0Oq\"")
                .d("telephone", "\"20JWE\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owner  (id : 1)  {lastName,address,city,telephone,pets{birthDate,visits{totalCount}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'owner'.'lastName'", containsString("7SvBS0IzXib"))
                .body("'data'.'owner'.'address'", containsString(""))
                .body("'data'.'owner'.'city'", containsString("w3CCeDFR_7g0Oq"))
                .body("'data'.'owner'.'telephone'", containsString("20JWE"))
                .body("'data'.'owner'.'pets'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_5_mutationOnAddSpecialtyReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    addSpecialty  ( input:{name:\\\"_EM_533_XYZ_\\\"})    {specialty{id,name}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'addSpecialty'.'specialty'.'name'", containsString("_EM_533_XYZ_"));
    }
    
    
    @Test(timeout = 60000)
    public void test_6_mutationOnRemoveSpecialtyReturnsDataUsingSql() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("owners", 135L)
                .d("first_name", "\"uTgNj@VNCYOs\"")
                .d("last_name", "\"kb\u008041Ux5F\"")
                .d("address", "\"_EM_1540_XYZ_\"")
                .d("city", "\"_EM_713_XYZ_\"")
                .d("telephone", "\"tbgwSMX\"")
            .and().insertInto("specialties", 136L)
                .d("name", "\"_EM_960_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    removeSpecialty  ( input:{specialtyId:1})    {specialties{name}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'removeSpecialty'.'specialties'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_7_mutationOnUpdateOwnerReturnsDataUsingSql() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateOwner  ( input:{ownerId:1, city:\\\"E6JZ\\\"})    {owner{city,pets{id,type{id},visits{totalCount}}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'updateOwner'.'owner'.'city'", containsString("E6JZ"))
                .body("'data'.'updateOwner'.'owner'.'pets'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_8_queryOnOwnersReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owners  ( filter:{firstName:null, address:null})  {address,city,telephone,pets{id,type{id}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'owners'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_9_queryOnOwnersReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owners  ( filter:{firstName:\\\"JrJj43f3\\\", address:null, telephone:\\\"_EM_130_XYZ_\\\"})  {firstName,city,pets{name,birthDate,visits{totalCount}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'owners'.size()", equalTo(0));
    }
    
    
    @Test(timeout = 60000)
    public void test_10_queryOnOwnersReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owners  ( filter:{firstName:null, lastName:\\\"_EM_6_XYZ_\\\", address:\\\"_EM_7_XYZ_\\\", telephone:\\\"Mb8t9RVneMeQYD\\\"})  {id,city,pets{birthDate,type{id}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut + "/graphql")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'owners'.size()", equalTo(0));
    }


}
