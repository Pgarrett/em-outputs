import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.Arrays;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-11-03T01:47:03.694-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 3 tests
 * <br>
*  Covered targets: 9
 * <br>
*  Used time: 0h 16m 12s
 * <br>
*  Needed budget for current results: 87%
 * <br>
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/
public class EvoMaster_others_Test {

    
    private static String baseUrlOfSut = "http://localhost:9977/graphql";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    @Test(timeout = 60000)
    public void test_0_mutationOnAddVisitReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    addVisit  ( input:{petId:164, description:\\\"8\\\", date:\\\"2089-10-23\\\"})    {visit{id}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_1_mutationOnUpdatePetReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updatePet  ( input:{petId:197, birthDate:\\\"2046-13-07\\\", typeId:198})    {pet{id,name,type{name},owner{id,lastName,address,city}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test(timeout = 60000)
    public void test_2_mutationOnAddPetReturnsEmpty() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    addPet  ( input:{ownerId:457, name:\\\"NDYdg_A5\\\", birthDate:\\\"2087-04-08\\\", typeId:502})    {pet{birthDate,type{id,name},owner{firstName,lastName,address,telephone},visits{visits{date}}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
    }


}
