import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-10-17T17:08:12.323-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 13 tests
 * <br>
*  Covered targets: 35
 * <br>
*  Used time: 0h 11m 19s
 * <br>
*  Needed budget for current results: 93%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:9977/graphql";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: pet
    // 			Action parameters:
    // 				id: '210'
    // 				pet: '{"id":false, "name":true, "birthDate":false, "type":{"id":true, "name":false}, "owner":{"id":false, "firstName":true, "lastName":false, "address":true, "city":false, "telephone":true}}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.numeric.IntegerGene = id:'210'
    // 				org.evomaster.core.search.gene.ObjectGene = pet:'{"id":false, "name":true, "birthDate":false, "type":{"id":true, "name":false}, "owner":{"id":false, "firstName":true, "lastName":false, "address":true, "city":false, "telephone":true}}'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: pet
    @Test(timeout = 60000)
    public void test_0_qUERYOnPetReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { pet  (id : 210)  {name,type{id},owner{firstName,address,telephone}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot return null for non-nullable type: 'Pet' within parent 'Query' (/pet)"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("pet"))
                .body("'errors'[0].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[0].'locations'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: addOwner
    // 			Action parameters:
    // 				input: '{"lastName":"rNBJ7pjvYiXOAGQU"}'
    // 				addOwner: '{"owner":{"id":true, "firstName":true, "lastName":false, "address":true, "city":false, "telephone":false}}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = input:'{"lastName":"rNBJ7pjvYiXOAGQU"}'
    // 				org.evomaster.core.search.gene.ObjectGene = addOwner:'{"owner":{"id":true, "firstName":true, "lastName":false, "address":true, "city":false, "telephone":false}}'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: addOwner
    @Test(timeout = 60000)
    public void test_1_mUTATIONOnAddOwnerReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    addOwner  ( input:{lastName:\\\"rNBJ7pjvYiXOAGQU\\\"})    {owner{id,firstName,address}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: updatePet
    // 			Action parameters:
    // 				input: '{"petId":913, "name":"", "typeId":277}'
    // 				updatePet: '{"pet":{"id":true, "name":false, "birthDate":true, "visits":{"totalCount":true}}}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = input:'{"petId":913, "name":"", "typeId":277}'
    // 				org.evomaster.core.search.gene.ObjectGene = updatePet:'{"pet":{"id":true, "name":false, "birthDate":true, "visits":{"totalCount":true}}}'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: updatePet
    @Test(timeout = 60000)
    public void test_2_mUTATIONOnUpdatePetReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updatePet  ( input:{petId:913, name:\\\"\\\", typeId:277})    {pet{id,birthDate,visits{totalCount}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: removeSpecialty
    // 			Action parameters:
    // 				input: '{"specialtyId":975}'
    // 				removeSpecialty: '{"specialties":{"id":true, "name":false}}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = input:'{"specialtyId":975}'
    // 				org.evomaster.core.search.gene.ObjectGene = removeSpecialty:'{"specialties":{"id":true, "name":false}}'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: removeSpecialty
    @Test(timeout = 60000)
    public void test_3_mUTATIONOnRemoveSpecialtyReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    removeSpecialty  ( input:{specialtyId:975})    {specialties{id}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: owners
    // 			Action parameters:
    // 				filter: ''
    // 				orders: ''
    // 				owners: '{"id":false, "firstName":false, "lastName":true, "address":false, "city":true, "telephone":false}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = filter:''
    // 				org.evomaster.core.search.gene.optional.OptionalGene = orders:''
    // 				org.evomaster.core.search.gene.ObjectGene = owners:'{"id":false, "firstName":false, "lastName":true, "address":false, "city":true, "telephone":false}'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: owners
    @Test(timeout = 60000)
    public void test_4_qUERYOnOwnersReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owners    {lastName,city}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'owners'.size()", equalTo(10))
                .body("'data'.'owners'[0].'lastName'", containsString("Franklin"))
                .body("'data'.'owners'[0].'city'", containsString("Madison"))
                .body("'data'.'owners'[1].'lastName'", containsString("Davis"))
                .body("'data'.'owners'[1].'city'", containsString("Sun Prairie"))
                .body("'data'.'owners'[2].'lastName'", containsString("Sna_q1tn31"))
                .body("'data'.'owners'[2].'city'", containsString("McFarland"))
                ; // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: pets
    // 			Action parameters:
    // 				pets: '{"id":true, "name":true, "birthDate":false, "type":{"id":true, "name":false}, "owner":{"id":false, "firstName":false, "lastName":true, "address":false, "city":true, "telephone":false}}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = pets:'{"id":true, "name":true, "birthDate":false, "type":{"id":true, "name":false}, "owner":{"id":false, "firstName":false, "lastName":true, "address":false, "city":true, "telephone":false}}'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: pets
    @Test(timeout = 60000)
    public void test_5_qUERYOnPetsReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  pets  {id,name,type{id},owner{lastName,city}}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'pets'.size()", equalTo(13))
                .body("'data'.'pets'[0].'name'", containsString("Leo"))
                .body("'data'.'pets'[0].'owner'.'lastName'", containsString("Franklin"))
                .body("'data'.'pets'[0].'owner'.'city'", containsString("Madison"))
                .body("'data'.'pets'[1].'name'", containsString("Basil"))
                .body("'data'.'pets'[1].'owner'.'lastName'", containsString("Davis"))
                .body("'data'.'pets'[1].'owner'.'city'", containsString("Sun Prairie"))
                .body("'data'.'pets'[2].'name'", containsString("Rosy"))
                .body("'data'.'pets'[2].'owner'.'lastName'", containsString("Sna_q1tn31"))
                .body("'data'.'pets'[2].'owner'.'city'", containsString("McFarland"))
                ; // Skipping assertions on the remaining 10 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: vets
    // 			Action parameters:
    // 				vets: '{"id":false, "firstName":true, "lastName":false}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = vets:'{"id":false, "firstName":true, "lastName":false}'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: vets
    @Test(timeout = 60000)
    public void test_6_qUERYOnVetsReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  vets  {firstName}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'vets'.size()", equalTo(6))
                .body("'data'.'vets'[0].'firstName'", containsString("James"))
                .body("'data'.'vets'[1].'firstName'", containsString("Helen"))
                .body("'data'.'vets'[2].'firstName'", containsString("Linda"))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: owner
    // 			Action parameters:
    // 				id: '3'
    // 				owner: '{"id":true, "firstName":true, "lastName":true, "address":true, "city":false, "telephone":false}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.numeric.IntegerGene = id:'3'
    // 				org.evomaster.core.search.gene.ObjectGene = owner:'{"id":true, "firstName":true, "lastName":true, "address":true, "city":false, "telephone":false}'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: owner
    @Test(timeout = 60000)
    public void test_7_qUERYOnOwnerReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owner  (id : 3)  {id,firstName,lastName,address}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'owner'.'firstName'", containsString("Eduardo"))
                .body("'data'.'owner'.'lastName'", containsString("Sna_q1tn31"))
                .body("'data'.'owner'.'address'", containsString("2693 Commerce St."));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: updateOwner
    // 			Action parameters:
    // 				input: '{"ownerId":6, "firstName":"c2IAAbu_zl", "lastName":null, "address":null, "telephone":null}'
    // 				updateOwner: '{"owner":{"id":false, "firstName":false, "lastName":false, "address":true, "city":false, "telephone":false, "pets":{"id":false, "name":true, "birthDate":false, "type":{"id":true, "name":true}, "visits":{"totalCount":true}}}}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = input:'{"ownerId":6, "firstName":"c2IAAbu_zl", "lastName":null, "address":null, "telephone":null}'
    // 				org.evomaster.core.search.gene.ObjectGene = updateOwner:'{"owner":{"id":false, "firstName":false, "lastName":false, "address":true, "city":false, "telephone":false, "pets":{"id":false, "name":true, "birthDate":false, "type":{"id":true, "name":true}, "visits":{"totalCount":true}}}}'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: updateOwner
    @Test(timeout = 60000)
    public void test_8_mUTATIONOnUpdateOwnerReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateOwner  ( input:{ownerId:6, firstName:\\\"c2IAAbu_zl\\\", lastName:null, address:null, telephone:null})    {owner{address,pets{name,type{id,name},visits{totalCount}}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'updateOwner'.'owner'.'address'", containsString("105 N. Lake St."))
                .body("'data'.'updateOwner'.'owner'.'pets'.size()", equalTo(2))
                .body("'data'.'updateOwner'.'owner'.'pets'[0].'name'", containsString("5KK_BE8vZ"))
                .body("'data'.'updateOwner'.'owner'.'pets'[0].'type'.'name'", containsString("cat"))
                .body("'data'.'updateOwner'.'owner'.'pets'[0].'visits'.'totalCount'", numberMatches(2.0))
                .body("'data'.'updateOwner'.'owner'.'pets'[1].'name'", containsString("Max"))
                .body("'data'.'updateOwner'.'owner'.'pets'[1].'type'.'name'", containsString("cat"))
                .body("'data'.'updateOwner'.'owner'.'pets'[1].'visits'.'totalCount'", numberMatches(2.0));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: addSpecialty
    // 			Action parameters:
    // 				input: '{"name":"0kbRUu"}'
    // 				addSpecialty: '{"specialty":{"id":true, "name":true}}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = input:'{"name":"0kbRUu"}'
    // 				org.evomaster.core.search.gene.ObjectGene = addSpecialty:'{"specialty":{"id":true, "name":true}}'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: addSpecialty
    @Test(timeout = 60000)
    public void test_9_mUTATIONOnAddSpecialtyReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    addSpecialty  ( input:{name:\\\"0kbRUu\\\"})    {specialty{id,name}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'addSpecialty'.'specialty'.'name'", containsString("0kbRUu"));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: pettypes
    // 			Action parameters:
    // 				pettypes: '{"id":false, "name":true}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = pettypes:'{"id":false, "name":true}'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: pettypes
    @Test(timeout = 60000)
    public void test_10_qUERYOnPettypesReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  pettypes  {name}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'pettypes'.size()", equalTo(6))
                .body("'data'.'pettypes'[0].'name'", containsString("cat"))
                .body("'data'.'pettypes'[1].'name'", containsString("dog"))
                .body("'data'.'pettypes'[2].'name'", containsString("lizard"))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: specialties
    // 			Action parameters:
    // 				specialties: '{"id":true, "name":false}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = specialties:'{"id":true, "name":false}'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: specialties
    @Test(timeout = 60000)
    public void test_11_qUERYOnSpecialtiesReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  specialties  {id}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'specialties'.size()", equalTo(46))
                ; // Skipping assertions on the remaining 43 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: updateSpecialty
    // 			Action parameters:
    // 				input: '{"specialtyId":33, "name":"Q8eLJfQT8Yj"}'
    // 				updateSpecialty: '{"specialty":{"id":true, "name":true}}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = input:'{"specialtyId":33, "name":"Q8eLJfQT8Yj"}'
    // 				org.evomaster.core.search.gene.ObjectGene = updateSpecialty:'{"specialty":{"id":true, "name":true}}'
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: updateSpecialty
    @Test(timeout = 60000)
    public void test_12_mUTATIONOnUpdateSpecialtyReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateSpecialty  ( input:{specialtyId:33, name:\\\"Q8eLJfQT8Yj\\\"})    {specialty{id,name}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'updateSpecialty'.'specialty'.'name'", containsString("Q8eLJfQT8Yj"));
    }


}
