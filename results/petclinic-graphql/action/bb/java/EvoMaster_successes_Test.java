import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.test.utils.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
*  This file was automatically generated by EvoMaster on 2024-10-06T17:01:25.527-03:00[America/Argentina/Buenos_Aires]
 * <br>
*  The generated test suite contains 13 tests
 * <br>
*  Covered targets: 34
 * <br>
*  Used time: 0h 11m 4s
 * <br>
*  Needed budget for current results: 89%
 * <br>
*  This file contains test cases that represent successful calls.
*/
public class EvoMaster_successes_Test {

    
    private static String baseUrlOfSut = "http://localhost:9977/graphql";
    
    
    @BeforeClass
    public static void initClass() {
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    
    
    
    
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: addOwner
    // 			Action parameters:
    // 				input: '{"lastName":null}'
    // 				addOwner: '{"owner":{"id":true, "firstName":true, "lastName":false, "address":true, "city":true, "telephone":true}}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = input:{"lastName":null}
    // 				org.evomaster.core.search.gene.ObjectGene = addOwner:{"owner":{"id":true, "firstName":true, "lastName":false, "address":true, "city":true, "telephone":true}}
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: addOwner
    @Test(timeout = 60000)
    public void test_0_mutationOnAddownerReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    addOwner  ( input:{lastName:null})    {owner{id,firstName,address,city,telephone}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: pet
    // 			Action parameters:
    // 				id: '142'
    // 				pet: '{"id":true, "name":true, "birthDate":false, "type":{"id":true, "name":false}, "owner":{"id":true, "firstName":true, "lastName":true, "address":false, "city":false, "telephone":false}, "visits":{"totalCount":false, "visits":{"id":true, "description":true, "date":true}}}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.numeric.IntegerGene = id:142
    // 				org.evomaster.core.search.gene.ObjectGene = pet:{"id":true, "name":true, "birthDate":false, "type":{"id":true, "name":false}, "owner":{"id":true, "firstName":true, "lastName":true, "address":false, "city":false, "telephone":false}, "visits":{"totalCount":false, "visits":{"id":true, "description":true, "date":true}}}
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: pet
    @Test(timeout = 60000)
    public void test_1_queryOnPetReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { pet  (id : 142)  {id,name,type{id},owner{id,firstName,lastName},visits{visits{id,description,date}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot return null for non-nullable type: 'Pet' within parent 'Query' (/pet)"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("pet"))
                .body("'errors'[0].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[0].'locations'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: removeSpecialty
    // 			Action parameters:
    // 				input: '{"specialtyId":837}'
    // 				removeSpecialty: '{"specialties":{"id":true, "name":false}}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = input:{"specialtyId":837}
    // 				org.evomaster.core.search.gene.ObjectGene = removeSpecialty:{"specialties":{"id":true, "name":false}}
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: removeSpecialty
    @Test(timeout = 60000)
    public void test_2_mutationOnRemovespecialtyReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    removeSpecialty  ( input:{specialtyId:837})    {specialties{id}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: updatePet
    // 			Action parameters:
    // 				input: '{"petId":319, "name":null, "birthDate":null}'
    // 				updatePet: '{"pet":{"id":true, "name":false, "birthDate":false, "type":{"id":true, "name":true}, "visits":{"totalCount":true}}}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = input:{"petId":319, "name":null, "birthDate":null}
    // 				org.evomaster.core.search.gene.ObjectGene = updatePet:{"pet":{"id":true, "name":false, "birthDate":false, "type":{"id":true, "name":true}, "visits":{"totalCount":true}}}
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: updatePet
    @Test(timeout = 60000)
    public void test_3_mutationOnUpdatepetReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updatePet  ( input:{petId:319, name:null, birthDate:null})    {pet{id,type{id,name},visits{totalCount}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Internal Server Error(s) while executing query"))
                .body("'errors'[0].'path'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: owner
    // 			Action parameters:
    // 				id: '1675019122'
    // 				owner: '{"id":false, "firstName":true, "lastName":true, "address":false, "city":true, "telephone":false, "pets":{"id":true, "name":false, "birthDate":false, "visits":{"totalCount":true}}}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.numeric.IntegerGene = id:1675019122
    // 				org.evomaster.core.search.gene.ObjectGene = owner:{"id":false, "firstName":true, "lastName":true, "address":false, "city":true, "telephone":false, "pets":{"id":true, "name":false, "birthDate":false, "visits":{"totalCount":true}}}
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: owner
    @Test(timeout = 60000)
    public void test_4_queryOnOwnerReturnsError() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owner  (id : 1675019122)  {firstName,lastName,city,pets{id,visits{totalCount}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'", nullValue())
                .body("'errors'.size()", equalTo(1))
                .body("'errors'[0].'message'", containsString("Cannot return null for non-nullable type: 'Owner' within parent 'Query' (/owner)"))
                .body("'errors'[0].'path'.size()", equalTo(1))
                .body("'errors'[0].'path'", hasItems("owner"))
                .body("'errors'[0].'errorType'", containsString("DataFetchingException"))
                .body("'errors'[0].'locations'", nullValue())
                .body("'errors'[0].'extensions'", nullValue());
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: owners
    // 			Action parameters:
    // 				filter: ''
    // 				orders: ''
    // 				owners: '{"id":false, "firstName":true, "lastName":false, "address":false, "city":false, "telephone":false, "pets":{"id":false, "name":false, "birthDate":true, "type":{"id":true, "name":false}}}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = filter:
    // 				org.evomaster.core.search.gene.optional.OptionalGene = orders:
    // 				org.evomaster.core.search.gene.ObjectGene = owners:{"id":false, "firstName":true, "lastName":false, "address":false, "city":false, "telephone":false, "pets":{"id":false, "name":false, "birthDate":true, "type":{"id":true, "name":false}}}
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: owners
    @Test(timeout = 60000)
    public void test_5_queryOnOwnersReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"  { owners    {firstName,pets{birthDate,type{id}}}       } \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'owners'.size()", equalTo(10))
                .body("'data'.'owners'[0].'firstName'", containsString("George"))
                .body("'data'.'owners'[0].'pets'.size()", equalTo(1))
                .body("'data'.'owners'[0].'pets'[0].'birthDate'", containsString("2010/09/07"))
                .body("'data'.'owners'[1].'firstName'", containsString("Betty"))
                .body("'data'.'owners'[1].'pets'.size()", equalTo(1))
                .body("'data'.'owners'[1].'pets'[0].'birthDate'", containsString("2012/08/06"))
                .body("'data'.'owners'[2].'firstName'", containsString("Eduardo"))
                .body("'data'.'owners'[2].'pets'.size()", equalTo(2))
                .body("'data'.'owners'[2].'pets'[0].'birthDate'", containsString("2010/03/07"))
                .body("'data'.'owners'[2].'pets'[1].'birthDate'", containsString("2011/04/17"))
                ; // Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: updateSpecialty
    // 			Action parameters:
    // 				input: '{"specialtyId":56, "name":"u"}'
    // 				updateSpecialty: '{"specialty":{"id":true, "name":true}}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = input:{"specialtyId":56, "name":"u"}
    // 				org.evomaster.core.search.gene.ObjectGene = updateSpecialty:{"specialty":{"id":true, "name":true}}
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: updateSpecialty
    @Test(timeout = 60000)
    public void test_6_mutationOnUpdatespecialtyReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateSpecialty  ( input:{specialtyId:56, name:\\\"u\\\"})    {specialty{id,name}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'updateSpecialty'.'specialty'.'name'", containsString("u"));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: pettypes
    // 			Action parameters:
    // 				pettypes: '{"id":true, "name":true}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = pettypes:{"id":true, "name":true}
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: pettypes
    @Test(timeout = 60000)
    public void test_7_queryOnPettypesReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  pettypes  {id,name}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'pettypes'.size()", equalTo(6))
                .body("'data'.'pettypes'[0].'name'", containsString("cat"))
                .body("'data'.'pettypes'[1].'name'", containsString("dog"))
                .body("'data'.'pettypes'[2].'name'", containsString("lizard"))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: vets
    // 			Action parameters:
    // 				vets: '{"id":true, "firstName":false, "lastName":false, "specialties":{"id":true, "name":true}}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = vets:{"id":true, "firstName":false, "lastName":false, "specialties":{"id":true, "name":true}}
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: vets
    @Test(timeout = 60000)
    public void test_8_queryOnVetsReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  vets  {id,specialties{id,name}}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'vets'.size()", equalTo(6))
                .body("'data'.'vets'[0].'specialties'.size()", equalTo(0))
                .body("'data'.'vets'[1].'specialties'.size()", equalTo(1))
                .body("'data'.'vets'[1].'specialties'[0].'name'", containsString("radiology"))
                .body("'data'.'vets'[2].'specialties'.size()", equalTo(1))
                .body("'data'.'vets'[2].'specialties'[0].'name'", containsString("6lnYRxx443vBjzU"))
                ; // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: specialties
    // 			Action parameters:
    // 				specialties: '{"id":true, "name":false}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = specialties:{"id":true, "name":false}
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: specialties
    @Test(timeout = 60000)
    public void test_9_queryOnSpecialtiesReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  specialties  {id}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'specialties'.size()", equalTo(122))
                ; // Skipping assertions on the remaining 119 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: updateOwner
    // 			Action parameters:
    // 				input: '{"ownerId":3, "lastName":null, "city":"XmHoof92", "telephone":null}'
    // 				updateOwner: '{"owner":{"id":true, "firstName":true, "lastName":true, "address":false, "city":true, "telephone":false, "pets":{"id":false, "name":false, "birthDate":true, "visits":{"totalCount":true}}}}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = input:{"ownerId":3, "lastName":null, "city":"XmHoof92", "telephone":null}
    // 				org.evomaster.core.search.gene.ObjectGene = updateOwner:{"owner":{"id":true, "firstName":true, "lastName":true, "address":false, "city":true, "telephone":false, "pets":{"id":false, "name":false, "birthDate":true, "visits":{"totalCount":true}}}}
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: updateOwner
    @Test(timeout = 60000)
    public void test_10_mutationOnUpdateownerReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    updateOwner  ( input:{ownerId:3, lastName:null, city:\\\"XmHoof92\\\", telephone:null})    {owner{id,firstName,lastName,city,pets{birthDate,visits{totalCount}}}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'updateOwner'.'owner'.'firstName'", containsString("Eduardo"))
                .body("'data'.'updateOwner'.'owner'.'lastName'", containsString("Rodriquez"))
                .body("'data'.'updateOwner'.'owner'.'city'", containsString("XmHoof92"))
                .body("'data'.'updateOwner'.'owner'.'pets'.size()", equalTo(2))
                .body("'data'.'updateOwner'.'owner'.'pets'[0].'birthDate'", containsString("2010/03/07"))
                .body("'data'.'updateOwner'.'owner'.'pets'[0].'visits'.'totalCount'", numberMatches(0.0))
                .body("'data'.'updateOwner'.'owner'.'pets'[1].'birthDate'", containsString("2011/04/17"))
                .body("'data'.'updateOwner'.'owner'.'pets'[1].'visits'.'totalCount'", numberMatches(0.0));
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: pets
    // 			Action parameters:
    // 				pets: '{"id":true, "name":false, "birthDate":true}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = pets:{"id":true, "name":false, "birthDate":true}
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: pets
    @Test(timeout = 60000)
    public void test_11_queryOnPetsReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \" {  pets  {id,birthDate}   }   \" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'data'.'pets'.size()", equalTo(13))
                .body("'data'.'pets'[0].'birthDate'", containsString("2010/09/07"))
                .body("'data'.'pets'[1].'birthDate'", containsString("2012/08/06"))
                .body("'data'.'pets'[2].'birthDate'", containsString("2011/04/17"))
                ; // Skipping assertions on the remaining 10 elements. This limit of 3 elements can be increased in the configurations
    }
    
    
    // Individual:
    // 	Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: addSpecialty
    // 			Action parameters:
    // 				input: '{"name":"_dK0Jy"}'
    // 				addSpecialty: '{"specialty":{"id":true, "name":false}}'
    // 			Genes:
    // 				org.evomaster.core.search.gene.ObjectGene = input:{"name":"_dK0Jy"}
    // 				org.evomaster.core.search.gene.ObjectGene = addSpecialty:{"specialty":{"id":true, "name":false}}
    // 	Evaluated Actions:
    // 		org.evomaster.core.problem.graphql.GraphQLAction: addSpecialty
    @Test(timeout = 60000)
    public void test_12_mutationOnAddspecialtyReturnsData() throws Exception {
        
        given().accept("application/json")
                .contentType("application/json")
                .body(" { " + 
                    " \"query\": \"mutation{    addSpecialty  ( input:{name:\\\"_dK0Jy\\\"})    {specialty{id}}    }\" " + 
                    " } ")
                .post(baseUrlOfSut)
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json");
    }


}
