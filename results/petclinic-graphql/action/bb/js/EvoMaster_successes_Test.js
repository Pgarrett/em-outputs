const superagent = require("superagent");
const EM = require("./EMTestUtils.js");
jest.setTimeout(60000);




/**
*  This file was automatically generated by EvoMaster on 2024-10-06T16:50:19.308-03:00[America/Argentina/Buenos_Aires]
*  
*  The generated test suite contains 13 tests
*  
*  Covered targets: 34
*  
*  Used time: 0h 11m 13s
*  
*  Needed budget for current results: 96%
*  
*  This file contains test cases that represent successful calls.
*/

const baseUrlOfSut = "http://localhost:9977/graphql";


beforeAll( async () => {
});








// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: removeSpecialty
// 			Action parameters:
// 				input: '{"specialtyId":550}'
// 				removeSpecialty: '{"specialties":{"id":true, "name":false}}'
// 			Genes:
// 				org.evomaster.core.search.gene.ObjectGene = input:{"specialtyId":550}
// 				org.evomaster.core.search.gene.ObjectGene = removeSpecialty:{"specialties":{"id":true, "name":false}}
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: removeSpecialty
test("test_0_MutationOnRemovespecialtyReturnsError", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"mutation{    removeSpecialty  ( input:{specialtyId:550})    {specialties{id}}    }\" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data).toBe(null);
    expect(res_0.body.errors.length).toBe(1);
    expect(res_0.body.errors[0].message).toBe("Internal Server Error(s) while executing query");
    expect(res_0.body.errors[0].path).toBe(null);
    expect(res_0.body.errors[0].extensions).toBe(null);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: updateOwner
// 			Action parameters:
// 				input: '{"ownerId":320, "firstName":"63iyDC", "city":"BHJO", "telephone":""}'
// 				updateOwner: '{"owner":{"id":false, "firstName":true, "lastName":false, "address":true, "city":false, "telephone":true, "pets":{"id":true, "name":true, "birthDate":false, "type":{"id":true, "name":false}}}}'
// 			Genes:
// 				org.evomaster.core.search.gene.ObjectGene = input:{"ownerId":320, "firstName":"63iyDC", "city":"BHJO", "telephone":""}
// 				org.evomaster.core.search.gene.ObjectGene = updateOwner:{"owner":{"id":false, "firstName":true, "lastName":false, "address":true, "city":false, "telephone":true, "pets":{"id":true, "name":true, "birthDate":false, "type":{"id":true, "name":false}}}}
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: updateOwner
test("test_1_MutationOnUpdateownerReturnsError", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"mutation{    updateOwner  ( input:{ownerId:320, firstName:\\\"63iyDC\\\", city:\\\"BHJO\\\", telephone:\\\"\\\"})    {owner{firstName,address,telephone,pets{id,name,type{id}}}}    }\" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data).toBe(null);
    expect(res_0.body.errors.length).toBe(1);
    expect(res_0.body.errors[0].message).toBe("Internal Server Error(s) while executing query");
    expect(res_0.body.errors[0].path).toBe(null);
    expect(res_0.body.errors[0].extensions).toBe(null);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: updatePet
// 			Action parameters:
// 				input: '{"petId":648, "name":"URk7r0uDv", "typeId":null}'
// 				updatePet: '{"pet":{"id":true, "name":false, "birthDate":false, "type":{"id":true, "name":true}, "visits":{"totalCount":true}}}'
// 			Genes:
// 				org.evomaster.core.search.gene.ObjectGene = input:{"petId":648, "name":"URk7r0uDv", "typeId":null}
// 				org.evomaster.core.search.gene.ObjectGene = updatePet:{"pet":{"id":true, "name":false, "birthDate":false, "type":{"id":true, "name":true}, "visits":{"totalCount":true}}}
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: updatePet
test("test_2_MutationOnUpdatepetReturnsError", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"mutation{    updatePet  ( input:{petId:648, name:\\\"URk7r0uDv\\\", typeId:null})    {pet{id,type{id,name},visits{totalCount}}}    }\" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data).toBe(null);
    expect(res_0.body.errors.length).toBe(1);
    expect(res_0.body.errors[0].message).toBe("Internal Server Error(s) while executing query");
    expect(res_0.body.errors[0].path).toBe(null);
    expect(res_0.body.errors[0].extensions).toBe(null);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: updateSpecialty
// 			Action parameters:
// 				input: '{"specialtyId":878, "name":"DcYQ1P"}'
// 				updateSpecialty: '{"specialty":{"id":false, "name":true}}'
// 			Genes:
// 				org.evomaster.core.search.gene.ObjectGene = input:{"specialtyId":878, "name":"DcYQ1P"}
// 				org.evomaster.core.search.gene.ObjectGene = updateSpecialty:{"specialty":{"id":false, "name":true}}
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: updateSpecialty
test("test_3_MutationOnUpdatespecialtyReturnsError", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"mutation{    updateSpecialty  ( input:{specialtyId:878, name:\\\"DcYQ1P\\\"})    {specialty{name}}    }\" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data).toBe(null);
    expect(res_0.body.errors.length).toBe(1);
    expect(res_0.body.errors[0].message).toBe("Internal Server Error(s) while executing query");
    expect(res_0.body.errors[0].path).toBe(null);
    expect(res_0.body.errors[0].extensions).toBe(null);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: addOwner
// 			Action parameters:
// 				input: '{"firstName":null, "address":"yh1RFM"}'
// 				addOwner: '{"owner":{"id":true, "firstName":false, "lastName":true, "address":true, "city":true, "telephone":false}}'
// 			Genes:
// 				org.evomaster.core.search.gene.ObjectGene = input:{"firstName":null, "address":"yh1RFM"}
// 				org.evomaster.core.search.gene.ObjectGene = addOwner:{"owner":{"id":true, "firstName":false, "lastName":true, "address":true, "city":true, "telephone":false}}
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: addOwner
test("test_4_MutationOnAddownerReturnsError", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"mutation{    addOwner  ( input:{firstName:null, address:\\\"yh1RFM\\\"})    {owner{id,lastName,address,city}}    }\" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data).toBe(null);
    expect(res_0.body.errors.length).toBe(1);
    expect(res_0.body.errors[0].message).toBe("Internal Server Error(s) while executing query");
    expect(res_0.body.errors[0].path).toBe(null);
    expect(res_0.body.errors[0].extensions).toBe(null);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: pettypes
// 			Action parameters:
// 				pettypes: '{"id":true, "name":true}'
// 			Genes:
// 				org.evomaster.core.search.gene.ObjectGene = pettypes:{"id":true, "name":true}
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: pettypes
test("test_5_QueryOnPettypesReturnsData", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \" {  pettypes  {id,name}   }   \" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data.pettypes.length).toBe(6);
    expect(res_0.body.data.pettypes[0].name).toBe("cat");
    expect(res_0.body.data.pettypes[1].name).toBe("dog");
    expect(res_0.body.data.pettypes[2].name).toBe("lizard");
    // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: owners
// 			Action parameters:
// 				filter: '{"address":"U_z", "telephone":null}'
// 				orders: ''
// 				owners: '{"id":false, "firstName":false, "lastName":true, "address":true, "city":false, "telephone":true}'
// 			Genes:
// 				org.evomaster.core.search.gene.optional.OptionalGene = filter:{"address":"U_z", "telephone":null}
// 				org.evomaster.core.search.gene.optional.OptionalGene = orders:
// 				org.evomaster.core.search.gene.ObjectGene = owners:{"id":false, "firstName":false, "lastName":true, "address":true, "city":false, "telephone":true}
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: owners
test("test_6_QueryOnOwnersReturnsData", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"  { owners  ( filter:{address:\\\"U_z\\\", telephone:null})  {lastName,address,telephone}       } \" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data.owners.length).toBe(0);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: vets
// 			Action parameters:
// 				vets: '{"id":true, "firstName":false, "lastName":false}'
// 			Genes:
// 				org.evomaster.core.search.gene.ObjectGene = vets:{"id":true, "firstName":false, "lastName":false}
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: vets
test("test_7_QueryOnVetsReturnsData", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \" {  vets  {id}   }   \" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data.vets.length).toBe(6);
    // Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: owner
// 			Action parameters:
// 				id: '9'
// 				owner: '{"id":true, "firstName":true, "lastName":false, "address":true, "city":false, "telephone":false, "pets":{"id":true, "name":false, "birthDate":true}}'
// 			Genes:
// 				org.evomaster.core.search.gene.numeric.IntegerGene = id:9
// 				org.evomaster.core.search.gene.ObjectGene = owner:{"id":true, "firstName":true, "lastName":false, "address":true, "city":false, "telephone":false, "pets":{"id":true, "name":false, "birthDate":true}}
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: owner
test("test_8_QueryOnOwnerReturnsData", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"  { owner  (id : 9)  {id,firstName,address,pets{id,birthDate}}       } \" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data.owner.firstName).toBe("David");
    expect(res_0.body.data.owner.address).toBe("2749 Blackhawk Trail");
    expect(res_0.body.data.owner.pets.length).toBe(1);
    expect(res_0.body.data.owner.pets[0].birthDate).toBe("2010/03/09");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: pet
// 			Action parameters:
// 				id: '2'
// 				pet: '{"id":true, "name":true, "birthDate":true, "owner":{"id":true, "firstName":true, "lastName":false, "address":true, "city":false, "telephone":false}, "visits":{"totalCount":true}}'
// 			Genes:
// 				org.evomaster.core.search.gene.numeric.IntegerGene = id:2
// 				org.evomaster.core.search.gene.ObjectGene = pet:{"id":true, "name":true, "birthDate":true, "owner":{"id":true, "firstName":true, "lastName":false, "address":true, "city":false, "telephone":false}, "visits":{"totalCount":true}}
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: pet
test("test_9_QueryOnPetReturnsData", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"  { pet  (id : 2)  {id,name,birthDate,owner{id,firstName,address},visits{totalCount}}       } \" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data.pet.name).toBe("Basil");
    expect(res_0.body.data.pet.birthDate).toBe("2012/08/06");
    expect(res_0.body.data.pet.owner.firstName).toBe("Betty");
    expect(res_0.body.data.pet.owner.address).toBe("638 Cardinal Ave.");
    expect(res_0.body.data.pet.visits.totalCount).toBe(0.0);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: pets
// 			Action parameters:
// 				pets: '{"id":false, "name":true, "birthDate":true, "owner":{"id":true, "firstName":false, "lastName":false, "address":true, "city":false, "telephone":false}}'
// 			Genes:
// 				org.evomaster.core.search.gene.ObjectGene = pets:{"id":false, "name":true, "birthDate":true, "owner":{"id":true, "firstName":false, "lastName":false, "address":true, "city":false, "telephone":false}}
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: pets
test("test_10_QueryOnPetsReturnsData", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \" {  pets  {name,birthDate,owner{id,address}}   }   \" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data.pets.length).toBe(13);
    expect(res_0.body.data.pets[0].name).toBe("Leo");
    expect(res_0.body.data.pets[0].birthDate).toBe("2010/09/07");
    expect(res_0.body.data.pets[0].owner.address).toBe("110 W. Liberty St.");
    expect(res_0.body.data.pets[1].name).toBe("Basil");
    expect(res_0.body.data.pets[1].birthDate).toBe("2012/08/06");
    expect(res_0.body.data.pets[1].owner.address).toBe("638 Cardinal Ave.");
    expect(res_0.body.data.pets[2].name).toBe("Rosy");
    expect(res_0.body.data.pets[2].birthDate).toBe("2011/04/17");
    expect(res_0.body.data.pets[2].owner.address).toBe("2693 Commerce St.");
    // Skipping assertions on the remaining 10 elements. This limit of 3 elements can be increased in the configurations
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: addSpecialty
// 			Action parameters:
// 				input: '{"name":"knB1HD4c"}'
// 				addSpecialty: '{"specialty":{"id":true, "name":true}}'
// 			Genes:
// 				org.evomaster.core.search.gene.ObjectGene = input:{"name":"knB1HD4c"}
// 				org.evomaster.core.search.gene.ObjectGene = addSpecialty:{"specialty":{"id":true, "name":true}}
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: addSpecialty
test("test_11_MutationOnAddspecialtyReturnsData", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"mutation{    addSpecialty  ( input:{name:\\\"knB1HD4c\\\"})    {specialty{id,name}}    }\" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data.addSpecialty.specialty.name).toBe("knB1HD4c");
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: specialties
// 			Action parameters:
// 				specialties: '{"id":true, "name":false}'
// 			Genes:
// 				org.evomaster.core.search.gene.ObjectGene = specialties:{"id":true, "name":false}
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: specialties
test("test_12_QueryOnSpecialtiesReturnsData", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \" {  specialties  {id}   }   \" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.data.specialties.length).toBe(82);
    // Skipping assertions on the remaining 79 elements. This limit of 3 elements can be increased in the configurations
});
