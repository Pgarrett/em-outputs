const superagent = require("superagent");
const EM = require("./EMTestUtils.js");
jest.setTimeout(60000);




/**
*  This file was automatically generated by EvoMaster on 2024-10-06T16:50:19.328-03:00[America/Argentina/Buenos_Aires]
*  
*  The generated test suite contains 3 tests
*  
*  Covered targets: 9
*  
*  Used time: 0h 11m 13s
*  
*  Needed budget for current results: 96%
*  
*  This file contains test cases that represent failed calls, but not indicative of faults.
*/

const baseUrlOfSut = "http://localhost:9977/graphql";


beforeAll( async () => {
});








// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: addVisit
// 			Action parameters:
// 				input: '{"petId":966, "description":"uB2z_6eW", "date":"1904-02-24"}'
// 				addVisit: '{"visit":{"id":true, "description":false, "date":false}}'
// 			Genes:
// 				org.evomaster.core.search.gene.ObjectGene = input:{"petId":966, "description":"uB2z_6eW", "date":"1904-02-24"}
// 				org.evomaster.core.search.gene.ObjectGene = addVisit:{"visit":{"id":true, "description":false, "date":false}}
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: addVisit
test("test_0_MutationOnAddvisitReturnsEmpty", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"mutation{    addVisit  ( input:{petId:966, description:\\\"uB2z_6eW\\\", date:\\\"1904-02-24\\\"})    {visit{id}}    }\" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(400);
    expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: updatePet
// 			Action parameters:
// 				input: '{"petId":459, "name":null, "birthDate":"2057-11-08"}'
// 				updatePet: '{"pet":{"id":true, "name":true, "birthDate":false, "type":{"id":true, "name":false}, "owner":{"id":false, "firstName":true, "lastName":true, "address":true, "city":false, "telephone":false}, "visits":{"totalCount":true}}}'
// 			Genes:
// 				org.evomaster.core.search.gene.ObjectGene = input:{"petId":459, "name":null, "birthDate":"2057-11-08"}
// 				org.evomaster.core.search.gene.ObjectGene = updatePet:{"pet":{"id":true, "name":true, "birthDate":false, "type":{"id":true, "name":false}, "owner":{"id":false, "firstName":true, "lastName":true, "address":true, "city":false, "telephone":false}, "visits":{"totalCount":true}}}
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: updatePet
test("test_1_MutationOnUpdatepetReturnsEmpty", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"mutation{    updatePet  ( input:{petId:459, name:null, birthDate:\\\"2057-11-08\\\"})    {pet{id,name,type{id},owner{firstName,lastName,address},visits{totalCount}}}    }\" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(400);
    expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
});


// Individual:
// 	Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: addPet
// 			Action parameters:
// 				input: '{"ownerId":467, "name":"t5l", "birthDate":"1938-11-23", "typeId":186}'
// 				addPet: '{"pet":{"id":false, "name":true, "birthDate":true}}'
// 			Genes:
// 				org.evomaster.core.search.gene.ObjectGene = input:{"ownerId":467, "name":"t5l", "birthDate":"1938-11-23", "typeId":186}
// 				org.evomaster.core.search.gene.ObjectGene = addPet:{"pet":{"id":false, "name":true, "birthDate":true}}
// 	Evaluated Actions:
// 		org.evomaster.core.problem.graphql.GraphQLAction: addPet
test("test_2_MutationOnAddpetReturnsEmpty", async () => {
    
    const res_0 = await superagent
            .post(baseUrlOfSut).set('Accept', "application/json")
            .set('Content-Type','application/json')
            .send(" { " + 
                " \"query\": \"mutation{    addPet  ( input:{ownerId:467, name:\\\"t5l\\\", birthDate:\\\"1938-11-23\\\", typeId:186})    {pet{name,birthDate}}    }\" " + 
                " } ")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(400);
    expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
});
