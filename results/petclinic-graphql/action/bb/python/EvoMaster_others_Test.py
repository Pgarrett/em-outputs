#!/usr/bin/env python

import json
import unittest
import requests
import os
if os.name == 'nt':
    class timeout_decorator:
        @staticmethod
        def timeout(*args, **kwargs):
            return lambda f: f # return a no-op decorator
else:
    import timeout_decorator
from em_test_utils import *


#  This file was automatically generated by EvoMaster on 2024-10-06T16:39:04.001-03:00[America/Argentina/Buenos_Aires]
#  
#  The generated test suite contains 3 tests
#  
#  Covered targets: 9
#  
#  Used time: 0h 10m 59s
#  
#  Needed budget for current results: 90%
#  
#  This file contains test cases that represent failed calls, but not indicative of faults.
class EvoMaster_others_Test(unittest.TestCase):

    
    baseUrlOfSut = "http://localhost:9977/graphql"
    
    
    
    
    
    
    
    
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: updatePet
    # 			Action parameters:
    # 				input: '{"petId":414, "birthDate":"2074-05-22"}'
    # 				updatePet: '{"pet":{"id":false, "name":false, "birthDate":false, "visits":{"totalCount":true}}}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.ObjectGene = input:{"petId":414, "birthDate":"2074-05-22"}
    # 				org.evomaster.core.search.gene.ObjectGene = updatePet:{"pet":{"id":false, "name":false, "birthDate":false, "visits":{"totalCount":true}}}
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: updatePet
    @timeout_decorator.timeout(60)
    def test_0_MUTATION_on_updatePet_returns_empty(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"mutation{    updatePet  ( input:{petId:414, birthDate:\\\"2074-05-22\\\"})    {pet{visits{totalCount}}}    }\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 400
        assert res_0.text == ''
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: addPet
    # 			Action parameters:
    # 				input: '{"ownerId":796, "name":"eG0eNU", "birthDate":"2043-07-21", "typeId":672}'
    # 				addPet: '{"pet":{"id":true, "name":false, "birthDate":true, "visits":{"totalCount":true}}}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.ObjectGene = input:{"ownerId":796, "name":"eG0eNU", "birthDate":"2043-07-21", "typeId":672}
    # 				org.evomaster.core.search.gene.ObjectGene = addPet:{"pet":{"id":true, "name":false, "birthDate":true, "visits":{"totalCount":true}}}
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: addPet
    @timeout_decorator.timeout(60)
    def test_1_MUTATION_on_addPet_returns_empty(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"mutation{    addPet  ( input:{ownerId:796, name:\\\"eG0eNU\\\", birthDate:\\\"2043-07-21\\\", typeId:672})    {pet{id,birthDate,visits{totalCount}}}    }\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 400
        assert res_0.text == ''
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: addVisit
    # 			Action parameters:
    # 				input: '{"petId":785, "description":"xkDE", "date":"1991-05-13"}'
    # 				addVisit: '{"visit":{"id":false, "description":true, "date":false}}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.ObjectGene = input:{"petId":785, "description":"xkDE", "date":"1991-05-13"}
    # 				org.evomaster.core.search.gene.ObjectGene = addVisit:{"visit":{"id":false, "description":true, "date":false}}
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: addVisit
    @timeout_decorator.timeout(60)
    def test_2_MUTATION_on_addVisit_returns_empty(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"mutation{    addVisit  ( input:{petId:785, description:\\\"xkDE\\\", date:\\\"1991-05-13\\\"})    {visit{description}}    }\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 400
        assert res_0.text == ''


if __name__ == '__main__':
    unittest.main()
