#!/usr/bin/env python

import json
import unittest
import requests
import os
if os.name == 'nt':
    class timeout_decorator:
        @staticmethod
        def timeout(*args, **kwargs):
            return lambda f: f # return a no-op decorator
else:
    import timeout_decorator
from em_test_utils import *


#  This file was automatically generated by EvoMaster on 2024-10-06T16:39:03.978-03:00[America/Argentina/Buenos_Aires]
#  
#  The generated test suite contains 13 tests
#  
#  Covered targets: 34
#  
#  Used time: 0h 10m 59s
#  
#  Needed budget for current results: 90%
#  
#  This file contains test cases that represent successful calls.
class EvoMaster_successes_Test(unittest.TestCase):

    
    baseUrlOfSut = "http://localhost:9977/graphql"
    
    
    
    
    
    
    
    
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: pet
    # 			Action parameters:
    # 				id: '636'
    # 				pet: '{"id":true, "name":false, "birthDate":true, "type":{"id":true, "name":true}}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.numeric.IntegerGene = id:636
    # 				org.evomaster.core.search.gene.ObjectGene = pet:{"id":true, "name":false, "birthDate":true, "type":{"id":true, "name":true}}
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: pet
    @timeout_decorator.timeout(60)
    def test_0_QUERY_on_pet_returns_error(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"  { pet  (id : 636)  {id,birthDate,type{id,name}}       } \" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["data"] is None
        assert len(res_0.json()["errors"]) == 1
        assert res_0.json()["errors"][0]["message"] == "Cannot return null for non-nullable type: 'Pet' within parent 'Query' (/pet)"
        assert len(res_0.json()["errors"][0]["path"]) == 1
        assert res_0.json()["errors"][0]["path"][0] == "pet"
        assert res_0.json()["errors"][0]["errorType"] == "DataFetchingException"
        assert res_0.json()["errors"][0]["locations"] is None
        assert res_0.json()["errors"][0]["extensions"] is None
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: addOwner
    # 			Action parameters:
    # 				input: '{"lastName":"3G", "address":null, "city":null}'
    # 				addOwner: '{"owner":{"id":true, "firstName":false, "lastName":true, "address":true, "city":false, "telephone":true}}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.ObjectGene = input:{"lastName":"3G", "address":null, "city":null}
    # 				org.evomaster.core.search.gene.ObjectGene = addOwner:{"owner":{"id":true, "firstName":false, "lastName":true, "address":true, "city":false, "telephone":true}}
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: addOwner
    @timeout_decorator.timeout(60)
    def test_1_MUTATION_on_addOwner_returns_error(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"mutation{    addOwner  ( input:{lastName:\\\"3G\\\", address:null, city:null})    {owner{id,lastName,address,telephone}}    }\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["data"] is None
        assert len(res_0.json()["errors"]) == 1
        assert res_0.json()["errors"][0]["message"] == "Internal Server Error(s) while executing query"
        assert res_0.json()["errors"][0]["path"] is None
        assert res_0.json()["errors"][0]["extensions"] is None
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: updatePet
    # 			Action parameters:
    # 				input: '{"petId":145, "typeId":null}'
    # 				updatePet: '{"pet":{"id":true, "name":true, "birthDate":false, "type":{"id":false, "name":true}, "owner":{"id":true, "firstName":false, "lastName":true, "address":true, "city":false, "telephone":false}, "visits":{"totalCount":false, "visits":{"id":false, "description":false, "date":true}}}}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.ObjectGene = input:{"petId":145, "typeId":null}
    # 				org.evomaster.core.search.gene.ObjectGene = updatePet:{"pet":{"id":true, "name":true, "birthDate":false, "type":{"id":false, "name":true}, "owner":{"id":true, "firstName":false, "lastName":true, "address":true, "city":false, "telephone":false}, "visits":{"totalCount":false, "visits":{"id":false, "description":false, "date":true}}}}
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: updatePet
    @timeout_decorator.timeout(60)
    def test_2_MUTATION_on_updatePet_returns_error(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"mutation{    updatePet  ( input:{petId:145, typeId:null})    {pet{id,name,type{name},owner{id,lastName,address},visits{visits{date}}}}    }\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["data"] is None
        assert len(res_0.json()["errors"]) == 1
        assert res_0.json()["errors"][0]["message"] == "Internal Server Error(s) while executing query"
        assert res_0.json()["errors"][0]["path"] is None
        assert res_0.json()["errors"][0]["extensions"] is None
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: owner
    # 			Action parameters:
    # 				id: '236'
    # 				owner: '{"id":true, "firstName":true, "lastName":true, "address":true, "city":true, "telephone":false}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.numeric.IntegerGene = id:236
    # 				org.evomaster.core.search.gene.ObjectGene = owner:{"id":true, "firstName":true, "lastName":true, "address":true, "city":true, "telephone":false}
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: owner
    @timeout_decorator.timeout(60)
    def test_3_QUERY_on_owner_returns_error(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"  { owner  (id : 236)  {id,firstName,lastName,address,city}       } \" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["data"] is None
        assert len(res_0.json()["errors"]) == 1
        assert res_0.json()["errors"][0]["message"] == "Cannot return null for non-nullable type: 'Owner' within parent 'Query' (/owner)"
        assert len(res_0.json()["errors"][0]["path"]) == 1
        assert res_0.json()["errors"][0]["path"][0] == "owner"
        assert res_0.json()["errors"][0]["errorType"] == "DataFetchingException"
        assert res_0.json()["errors"][0]["locations"] is None
        assert res_0.json()["errors"][0]["extensions"] is None
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: removeSpecialty
    # 			Action parameters:
    # 				input: '{"specialtyId":883}'
    # 				removeSpecialty: '{"specialties":{"id":true, "name":true}}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.ObjectGene = input:{"specialtyId":883}
    # 				org.evomaster.core.search.gene.ObjectGene = removeSpecialty:{"specialties":{"id":true, "name":true}}
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: removeSpecialty
    @timeout_decorator.timeout(60)
    def test_4_MUTATION_on_removeSpecialty_returns_error(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"mutation{    removeSpecialty  ( input:{specialtyId:883})    {specialties{id,name}}    }\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["data"] is None
        assert len(res_0.json()["errors"]) == 1
        assert res_0.json()["errors"][0]["message"] == "Internal Server Error(s) while executing query"
        assert res_0.json()["errors"][0]["path"] is None
        assert res_0.json()["errors"][0]["extensions"] is None
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: pettypes
    # 			Action parameters:
    # 				pettypes: '{"id":false, "name":true}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.ObjectGene = pettypes:{"id":false, "name":true}
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: pettypes
    @timeout_decorator.timeout(60)
    def test_5_QUERY_on_pettypes_returns_data(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \" {  pettypes  {name}   }   \" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert len(res_0.json()["data"]["pettypes"]) == 6
        assert res_0.json()["data"]["pettypes"][0]["name"] == "cat"
        assert res_0.json()["data"]["pettypes"][1]["name"] == "dog"
        assert res_0.json()["data"]["pettypes"][2]["name"] == "lizard"
        # Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: updateSpecialty
    # 			Action parameters:
    # 				input: '{"specialtyId":8, "name":"1PPg60bI8FQotb"}'
    # 				updateSpecialty: '{"specialty":{"id":false, "name":true}}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.ObjectGene = input:{"specialtyId":8, "name":"1PPg60bI8FQotb"}
    # 				org.evomaster.core.search.gene.ObjectGene = updateSpecialty:{"specialty":{"id":false, "name":true}}
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: updateSpecialty
    @timeout_decorator.timeout(60)
    def test_6_MUTATION_on_updateSpecialty_returns_data(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"mutation{    updateSpecialty  ( input:{specialtyId:8, name:\\\"1PPg60bI8FQotb\\\"})    {specialty{name}}    }\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["data"]["updateSpecialty"]["specialty"]["name"] == "1PPg60bI8FQotb"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: specialties
    # 			Action parameters:
    # 				specialties: '{"id":true, "name":false}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.ObjectGene = specialties:{"id":true, "name":false}
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: specialties
    @timeout_decorator.timeout(60)
    def test_7_QUERY_on_specialties_returns_data(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \" {  specialties  {id}   }   \" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert len(res_0.json()["data"]["specialties"]) == 45
        # Skipping assertions on the remaining 42 elements. This limit of 3 elements can be increased in the configurations
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: owners
    # 			Action parameters:
    # 				filter: '{"firstName":null, "address":null}'
    # 				orders: 'null'
    # 				owners: '{"id":true, "firstName":true, "lastName":true, "address":false, "city":true, "telephone":false}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.optional.OptionalGene = filter:{"firstName":null, "address":null}
    # 				org.evomaster.core.search.gene.optional.OptionalGene = orders:null
    # 				org.evomaster.core.search.gene.ObjectGene = owners:{"id":true, "firstName":true, "lastName":true, "address":false, "city":true, "telephone":false}
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: owners
    @timeout_decorator.timeout(60)
    def test_8_QUERY_on_owners_returns_data(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"  { owners  ( filter:{firstName:null, address:null},orders : null)  {id,firstName,lastName,city}       } \" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert len(res_0.json()["data"]["owners"]) == 10
        assert res_0.json()["data"]["owners"][0]["firstName"] == "George"
        assert res_0.json()["data"]["owners"][0]["lastName"] == "Franklin"
        assert res_0.json()["data"]["owners"][0]["city"] == "Madison"
        assert res_0.json()["data"]["owners"][1]["firstName"] == "Betty"
        assert res_0.json()["data"]["owners"][1]["lastName"] == "Davis"
        assert res_0.json()["data"]["owners"][1]["city"] == "Sun Prairie"
        assert res_0.json()["data"]["owners"][2]["firstName"] == "Eduardo"
        assert res_0.json()["data"]["owners"][2]["lastName"] == "Rodriquez"
        assert res_0.json()["data"]["owners"][2]["city"] == "McFarland"
        # Skipping assertions on the remaining 7 elements. This limit of 3 elements can be increased in the configurations
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: addSpecialty
    # 			Action parameters:
    # 				input: '{"name":"GtfkbQJMooACjfU4"}'
    # 				addSpecialty: '{"specialty":{"id":false, "name":true}}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.ObjectGene = input:{"name":"GtfkbQJMooACjfU4"}
    # 				org.evomaster.core.search.gene.ObjectGene = addSpecialty:{"specialty":{"id":false, "name":true}}
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: addSpecialty
    @timeout_decorator.timeout(60)
    def test_9_MUTATION_on_addSpecialty_returns_data(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"mutation{    addSpecialty  ( input:{name:\\\"GtfkbQJMooACjfU4\\\"})    {specialty{name}}    }\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["data"]["addSpecialty"]["specialty"]["name"] == "GtfkbQJMooACjfU4"
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: updateOwner
    # 			Action parameters:
    # 				input: '{"ownerId":8, "firstName":null, "address":null, "telephone":null}'
    # 				updateOwner: '{"owner":{"id":false, "firstName":true, "lastName":true, "address":true, "city":false, "telephone":false}}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.ObjectGene = input:{"ownerId":8, "firstName":null, "address":null, "telephone":null}
    # 				org.evomaster.core.search.gene.ObjectGene = updateOwner:{"owner":{"id":false, "firstName":true, "lastName":true, "address":true, "city":false, "telephone":false}}
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: updateOwner
    @timeout_decorator.timeout(60)
    def test_10_MUTATION_on_updateOwner_returns_data(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \"mutation{    updateOwner  ( input:{ownerId:8, firstName:null, address:null, telephone:null})    {owner{firstName,lastName,address}}    }\" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert res_0.json()["data"]["updateOwner"]["owner"]["firstName"] == "Maria"
        assert res_0.json()["data"]["updateOwner"]["owner"]["lastName"] == "Escobito"
        assert res_0.json()["data"]["updateOwner"]["owner"]["address"] == "345 Maple St."
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: pets
    # 			Action parameters:
    # 				pets: '{"id":true, "name":true, "birthDate":true, "owner":{"id":false, "firstName":true, "lastName":true, "address":false, "city":false, "telephone":false}}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.ObjectGene = pets:{"id":true, "name":true, "birthDate":true, "owner":{"id":false, "firstName":true, "lastName":true, "address":false, "city":false, "telephone":false}}
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: pets
    @timeout_decorator.timeout(60)
    def test_11_QUERY_on_pets_returns_data(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \" {  pets  {id,name,birthDate,owner{firstName,lastName}}   }   \" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert len(res_0.json()["data"]["pets"]) == 13
        assert res_0.json()["data"]["pets"][0]["name"] == "Leo"
        assert res_0.json()["data"]["pets"][0]["birthDate"] == "2010/09/07"
        assert res_0.json()["data"]["pets"][0]["owner"]["firstName"] == "George"
        assert res_0.json()["data"]["pets"][0]["owner"]["lastName"] == "Franklin"
        assert res_0.json()["data"]["pets"][1]["name"] == "Basil"
        assert res_0.json()["data"]["pets"][1]["birthDate"] == "2012/08/06"
        assert res_0.json()["data"]["pets"][1]["owner"]["firstName"] == "Betty"
        assert res_0.json()["data"]["pets"][1]["owner"]["lastName"] == "Davis"
        assert res_0.json()["data"]["pets"][2]["name"] == "Rosy"
        assert res_0.json()["data"]["pets"][2]["birthDate"] == "2011/04/17"
        assert res_0.json()["data"]["pets"][2]["owner"]["firstName"] == "Eduardo"
        assert res_0.json()["data"]["pets"][2]["owner"]["lastName"] == "Rodriquez"
        # Skipping assertions on the remaining 10 elements. This limit of 3 elements can be increased in the configurations
    
    
    # Individual:
    # 	Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: vets
    # 			Action parameters:
    # 				vets: '{"id":false, "firstName":false, "lastName":false, "specialties":{"id":false, "name":true}}'
    # 			Genes:
    # 				org.evomaster.core.search.gene.ObjectGene = vets:{"id":false, "firstName":false, "lastName":false, "specialties":{"id":false, "name":true}}
    # 	Evaluated Actions:
    # 		org.evomaster.core.problem.graphql.GraphQLAction: vets
    @timeout_decorator.timeout(60)
    def test_12_QUERY_on_vets_returns_data(self):
        
        headers = {}
        headers["content-type"] = "application/json"
        body = " { " + \
            " \"query\": \" {  vets  {specialties{name}}   }   \" " + \
            " } "
        headers['Accept'] = "application/json"
        res_0 = requests \
                .post(self.baseUrlOfSut,
                    headers=headers, data=body)
        
        assert res_0.status_code == 200
        assert "application/json" in res_0.headers["content-type"]
        assert len(res_0.json()["data"]["vets"]) == 6
        assert len(res_0.json()["data"]["vets"][0]["specialties"]) == 0
        assert len(res_0.json()["data"]["vets"][1]["specialties"]) == 1
        assert res_0.json()["data"]["vets"][1]["specialties"][0]["name"] == "radiology"
        assert len(res_0.json()["data"]["vets"][2]["specialties"]) == 2
        assert res_0.json()["data"]["vets"][2]["specialties"][0]["name"] == "6lnYRxx443vBjzU"
        assert res_0.json()["data"]["vets"][2]["specialties"][1]["name"] == "surgery"
        # Skipping assertions on the remaining 3 elements. This limit of 3 elements can be increased in the configurations


if __name__ == '__main__':
    unittest.main()
